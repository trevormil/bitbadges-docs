openapi: '3.0.2'
info:
  title: BitBadges API
  version: '0.1'
servers:
  - url: https://api.bitbadges.io/api/v0
paths:
  /status:
    post:
      operationId: getStatus
      summary: Get Status
      description: |
        Gets the current status details about the blockchain / indexer (gas, block height, etc).
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetStatusRouteSuccessResponse'
          description: Returns the current status of the blockchain / indexer

        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /search/{searchValue}:
    post:
      operationId: searchByValue
      summary: Search
      description: |
        Searches for collections, badges, accounts, and address lists based on the provided search value.
      parameters:
        - name: searchValue
          in: path
          description: The value to search for.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSearchRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSearchRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/batch:
    post:
      operationId: getCollectionsBatch
      summary: Retrieve badge collections
      description: Retrieves badge collections and associated details in batches.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCollectionBatchRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionBatchRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /collection/{collectionId}/{badgeId}/owners:
    post:
      operationId: getOwnersForBadge
      summary: Retrieve owners for a badge
      description: Retrieves the owners for a specific badge in a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID of the badge for which owners are to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOwnersForBadgeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetOwnersForBadgeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/balance/{cosmosAddress}:
    post:
      operationId: getBadgeBalanceByAddress
      summary: Retrieve badge balance by address
      description: Retrieves the balance of a specific badge for a specific address.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: cosmosAddress
          in: path
          description: The Cosmos address for which the badge balance is to be retrieved.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeBalanceByAddressRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeBalanceByAddressRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/{badgeId}/activity:
    post:
      operationId: getBadgeActivity
      summary: Retrieve activity for a badge
      description: Retrieves the activity for a specific badge in a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID of the badge for which activity is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeActivityRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeActivityRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/refresh:
    post:
      operationId: refreshMetadata
      summary: Trigger metadata refresh for a collection
      description: |
        Triggers a metadata refresh for a specific collection. BitBadges API uses a refresh queue system for fetching anything off-chain.
        This will refetch any details for the collection (such as metadata, balances, approval details, etc). Note it will reject if recently refreshed.
        Uses a cooldown of 5 minutes.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection to trigger metadata refresh.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshMetadataRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshMetadataRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /claims/{claimId}/{cosmosAddress}:
    post:
      operationId: checkAndCompleteClaim
      summary: Check and complete claim
      description: |
        Completes a claim for a user. This will check if the claim is valid and that all criteria is satisfied. If so, we perform the claim action.
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: cosmosAddress
          in: path
          description: The Cosmos address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckAndCompleteClaimRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckAndCompleteClaimRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /deleteReview/{reviewId}:
    post:
      operationId: deleteReview
      summary: Delete a review
      description: Deletes a review.
      parameters:
        - name: reviewId
          in: path
          description: The ID of the review to be deleted.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteReviewRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteReviewRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /collection/{collectionId}/addReview:
    post:
      operationId: addReviewForCollection
      summary: Add a review for a collection
      description: Adds a new review for a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection for which the review is being added.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewForCollectionRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddReviewForCollectionRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /user/batch:
    post:
      operationId: getAccounts
      summary: Get accounts and details
      description: Retrieves accounts and accompanying details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /user/{addressOrUsername}/addReview:
    post:
      operationId: addReviewForUser
      summary: Add a review for a user
      description: Adds a review for a user.
      parameters:
        - name: addressOrUsername
          in: path
          description: The address or username of the user for whom the review is being added.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewForUserRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddReviewForUserRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /user/updateAccount:
    post:
      operationId: updateAccountInfo
      summary: Update user account information
      description: Updates the profile/account information for a user. Only the provided fields will be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInfoRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAccountInfoRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /addBalancesToOffChainStorage:
    post:
      operationId: addBalancesToOffChainStorage
      summary: Add balance map to off-chain storage
      description: Adds a balance map to off-chain storage. Mode can either be 'ipfs' for storing on IPFS or 'centralized' for storing on DigitalOcean.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBalancesToOffChainStorageRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddBalancesToOffChainStorageRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /addMetadataToIpfs:
    post:
      operationId: addMetadataToIpfs
      summary: Add metadata to IPFS
      description: Adds metadata to IPFS.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMetadataToIpfsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddMetadataToIpfsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /addApprovalDetailsToOffChainStorage:
    post:
      operationId: addApprovalDetailsToOffChainStorage
      summary: Add approval details to off-chain storage
      description: Adds approval details to off-chain storage.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddApprovalDetailsToOffChainStorageRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddApprovalDetailsToOffChainStorageRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /auth/getChallenge:
    post:
      operationId: getSignInChallenge
      summary: Get Blockin sign-in challenge
      description: Gets the Blockin sign-in challenge to be signed for authentication. The returned blockinMessage is the message to be signed by the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSignInChallengeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSignInChallengeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/verify:
    post:
      operationId: verifySignIn
      summary: Verify user sign-in
      description: Verifies the user-signed challenge and grants them a valid session if everything checks out.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySignInRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iVerifySignInRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/status:
    post:
      operationId: checkIfSignedIn
      summary: Check user sign-in status
      description: Checks if the user is signed in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckSignInStatusRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckSignInStatusRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/logout:
    post:
      operationId: signOut
      summary: Sign out user
      description: Signs the user out.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSignOutSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /browse:
    post:
      operationId: getBrowseCollections
      summary: Get browse collections
      description: Gets details for a browse/explore page.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBrowseCollectionsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBrowseCollectionsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /broadcast:
    post:
      operationId: broadcastTx
      summary: Broadcast transaction
      description: Broadcasts a transaction to the blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BroadcastTxRouteRequestBody'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBroadcastTxRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /simulate:
    post:
      operationId: simulateTx
      summary: Simulate transaction
      description: Simulates a transaction on the blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SimulateTxRouteRequestBody'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateTxRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /metadata:
    post:
      operationId: fetchMetadataDirectly
      summary: Fetch metadata directly from IPFS
      description: Fetches arbitrary metadata directly from IPFS. This is useful for fetching metadata that is not stored on-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchMetadataDirectlyRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFetchMetadataDirectlyRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - frontendOnly: []
  /addressList/update:
    post:
      operationId: updateAddressLists
      summary: Update or create address lists
      description: Updates or creates address lists stored by BitBadges centralized servers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userIsOwner: []
        - userSignedIn: []
  /addressList:
    post:
      operationId: getAddressLists
      summary: Get address lists
      description: Gets address lists. Can be on-chain or off-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /addressList/delete:
    post:
      operationId: deleteAddressLists
      summary: Delete address lists
      description: Deletes address lists. Must be created off-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userIsOwner: []
        - userSignedIn: []
  /authCode:
    post:
      operationId: getAuthCode
      summary: Get Blockin authentication code
      description: Gets a Blockin authentication code. This is used for signing in with Blockin at in-person events. Anyone with the signature is able to fetch the preimage message.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /authCode/create:
    post:
      operationId: createAuthCode
      summary: Create Blockin authentication code
      description: Creates a Blockin authentication code. This is used for signing in with Blockin at in-person events.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /authCode/delete:
    post:
      operationId: deleteAuthCode
      summary: Delete Blockin authentication code
      description: Deletes a Blockin authentication code. This is used for signing in with Blockin at in-person events.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /auth/verifyGeneric:
    post:
      operationId: verifySignInGeneric
      summary: Verify Blockin sign-in requests (generic)
      description: A generic route for verifying Blockin sign-in requests. Used as a helper if implementing Blockin on your own.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericBlockinVerifyRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenericBlockinVerifyRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /sendClaimAlerts:
    post:
      operationId: sendClaimAlert
      summary: Sends claim alert notifications
      description: Sends claim alert notifications out.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendClaimAlertsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSendClaimAlertsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /getFollowDetails:
    post:
      operationId: getFollowDetails
      summary: Gets follow details for a user
      description: Gets the follow details for a user with the BitBadges follow protocol.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFollowDetailsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetFollowDetailsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /getClaimAlerts:
    post:
      operationId: getClaimAlerts
      summary: Gets claim alerts for a collection
      description: Gets claim alerts for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimAlertsForCollectionRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAlertsForCollectionRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
        - userSignedIn: []
        - userIsManager: []
  /getRefreshStatus:
    post:
      operationId: getRefreshStatus
      summary: Gets the refresh status for a collection
      description: Gets the refresh status for a collection. Used to track if any errors occur during a refresh, or if it is in the queue or not.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NumberType'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshStatusRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /getProtocol:
    post:
      operationId: getProtocol
      summary: Get protocol details by name
      description: Get protocol details by name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetProtocolsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetProtocolsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /getCollectionForProtocol:
    post:
      operationId: getCollectionForProtocol
      summary: Get the collection ID set by a user for a protocol
      description: Get the collection ID set by a user for a protocol.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCollectionForProtocolRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionForProtocolRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []

  /filterBadgesInCollection:
    post:
      operationId: filterBadgesInCollection
      summary: Filter badges in a collection based on multiple filter values
      description: Filter badges in a collection based on multiple filter values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterBadgesInCollectionRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFilterBadgesInCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /appleWalletPass:
    post:
      operationId: generateAppleWalletPass
      summary: Generate an Apple Wallet pass
      description: |
        Generate an Apple Wallet pass based on the provided request body. 
        ```tsx
         <a
              onClick={async () => {
                const res = await BitBadgesApi.generateAppleWalletPass({
                  name: authCode.name,
                  description: authCode.description,
                  signature: authCode.signature,
                  message: createChallenge(authCode.params)
                });
                const pass = Buffer.from(res.data);

                const blob = new Blob([pass], { type: 'application/vnd.apple.pkpass' });
                const url = window.URL.createObjectURL(blob);
                if (url) {
                  const link = document.createElement('a');
                  link.href = url;
                  link.download = 'bitbadges.pkpass';
                  link.click();
                }
              }}>
              <img src="/images/add_to_apple_wallet.svg" style={{ width: 150 }} />
            </a>
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAppleWalletPassRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateAppleWalletPassRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /claims:
    post:
      operationId: getClaims
      summary: Retrieve claims
      description: Retrieve claims based on the provided request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
        - userMaybeSignedIn: []
components:
  responses:
    ErrorResponse:
      description: An error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestResponse:
      description: Bad Request - Invalid configuration or request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedResponse:
      description: Unauthorized - Does not meet authnetication requirements. This can be due to an invalid API key, CORS origin, or session cookie.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: Requires a BitBadges API key for requests
      x-type: string
    frontendOnly:
      type: apiKey
      in: header
      name: Origin
      description: Can only be called by the official BitBadges frontend. Not for developer use.
    userSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in with a valid session.
    userMaybeSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in for certain requests, but not all.
    userIsManager:
      type: http
      scheme: cookie
      description: User must be signed in and have manager permissions.
    userIsOwner:
      type: http
      scheme: cookie
      description: User must be signed in and have owner permissions.
  schemas:
    ErrorResponse:
      type: object
      required:
        - errorMessage
      properties:
        error:
          type: object
          description: Serialized error object for debugging purposes. Technical users can use this to debug issues.
        errorMessage:
          type: string
          description: UX-friendly error message that can be displayed to the user. Always present if error.
        unauthorized:
          type: boolean
          description: Authentication error. Present if the user is not authenticated.
    NumberType:
      anyOf:
        - type: string
        - type: number
      example: '1'
      description: String numbers are always returned to avoid precision loss. You may pass in request bodies as numbers or strings. See SDK docs for NumberType conversions.
    BlockinChallengeParams:
      properties:
        domain:
          description: The domain of the challenge.
          type: string
        statement:
          description: The statement of the challenge.
          type: string
        address:
          description: The address of the challenge.
          type: string
        uri:
          description: The URI of the challenge.
          type: string
        nonce:
          description: The nonce of the challenge.
          type: string
        version:
          description: The version of the challenge.
          type: string
        chainId:
          description: The chain ID of the challenge.
          type: string
        issuedAt:
          description: The issued at time of the challenge.
          type: string
        expirationDate:
          description: The expiration date of the challenge.
          type: string
        notBefore:
          description: The not before time of the challenge.
          type: string
        resources:
          items:
            type: string
          type: array
        assetOwnershipRequirements:
          description: The asset ownership requirements of the challenge.
      required:
        - domain
        - statement
        - address
        - uri
        - nonce
      additionalProperties: false
      type: object

    VerifyChallengeOptions:
      properties:
        expectedChallengeParams:
          $ref: '#/components/schemas/BlockinChallengeParams'
          description: Optionally define the expected details to check. If the challenge was edited and the details do not match, the challenge will fail verification.
        beforeVerification:
          description: >-
            Optional function to call before verification. This is useful to
            verify the challenge is valid before proceeding with verification. Note
            you can use expectedChallengeParams to verify values equal as expected.
            This function is useful if you need to implement custom logic other than
            strict equality). For example, assert that only one of assets A, B, or C
            are defined and not all three.
          type: string
        balancesSnapshot:
          description: >-
            For verification of assets, instead of dynamically fetching the assets,
            you can specify a snapshot of the assets. This is useful if you have a
            snapshot, balances will not change, or you are verifying in an offline
            manner.
          type: object
        skipTimestampVerification:
          description: >-
            If true, we do not check timestamps (expirationDate / notBefore). This
            is useful if you are verifying a challenge that is expected to be
            verified at a future time.
          type: boolean
        skipAssetVerification:
          description: >-
            If true, we do not check asset ownership. This is useful if you are
            verifying a challenge that is expected to be verified at a future time.
          type: boolean
        earliestIssuedAt:
          description: >-
            The earliest issued At ISO date string that is valid. For example, if
            you want to verify a challenge that was issued within the last minute,
            you can specify this to be 1 minute ago.
          type: string
        issuedAtTimeWindowMs:
          description: >-
            If set, we will verify the issuedAt is within this amount of ms ago
            (i.e. issuedAt >= Date.now() - issuedAtTimeWindowMs)
          type: number
        skipSignatureVerification:
          description: >-
            If true, we do not check the signature. You can pass in an undefined
            ChainDriver
          type: boolean
      required:
        - expectedChallengeParams
      additionalProperties: false
      type: object

    # -------------------------------------------------------------COPIED FROM JS SCRIPT-------------------------------------------------------------
    Doc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
      required:
        - _docId
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iBitBadgesCollection:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: The badge metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Inherited
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Inherited, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: The manager timeline
          type: array
        collectionPermissions:
          $ref: '#/components/schemas/iCollectionPermissions'
          description: The collection permissions
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: The collection approved transfers timeline
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: The is archived timeline
          type: array
        defaultBalances:
          $ref: '#/components/schemas/iUserBalanceStore'
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only used if collection has "Standard" balance type.
        createdBy:
          description: The cosmos address of the user who created this collection
          type: string
        createdBlock:
          description: The block number when this collection was created
          $ref: '#components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        updateHistory:
          items:
            properties:
              txHash:
                type: string
              block:
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            type: object
          description: The update history of this collection
          type: array
        aliasAddress:
          description: The alias cosmos address for the collection
          type: string
        cachedCollectionMetadata:
          $ref: '#/components/schemas/iMetadata'
          description: >-
            The fetched collection metadata for this collection. Will only be
            fetched if requested. It is your responsibility to join this data.
        cachedBadgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadataDetails'
          description: >-
            The fetched badge metadata for this collection. Will only be fetched
            if requested. It is your responsibility to join this data.
          type: array
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: >-
            The fetched activity for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
          description: >-
            The fetched reviews for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: >-
            The fetched owners of this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
          description: >-
            The fetched merkle challenges for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
          description: >-
            The fetched approval trackers for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        nsfw:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
              type: array
            reason:
              type: string
          required:
            - badgeIds
            - reason
          additionalProperties: false
          description: The badge IDs in this collection that are marked as NSFW.
          type: object
        reported:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
              type: array
            reason:
              type: string
          required:
            - badgeIds
            - reason
          additionalProperties: false
          description: The badge IDs in this collection that have been reported.
          type: object
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        offChainClaims:
          items:
            properties:
              claimId:
                type: string
              plugins:
                items: {}
                type: array
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
              manualDistribution:
                type: boolean
            required:
              - claimId
              - plugins
              - balancesToSet
            additionalProperties: false
            type: object
          description: >-
            Details about any off-chain claims for this collection. Only
            applicable when outsourced to BitBadges.
          type: array
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionPermissions
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - defaultBalances
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
        - cachedBadgeMetadata
        - activity
        - reviews
        - owners
        - merkleChallenges
        - approvalTrackers
        - views
        - offChainClaims
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iUpdateHistory:
      properties:
        txHash:
          type: string
        block:
          $ref: '#components/schemas/NumberType'
        blockTimestamp:
          $ref: '#components/schemas/NumberType'
      required:
        - txHash
        - block
        - blockTimestamp
      additionalProperties: false
      type: object
    ErrorDoc:
      properties:
        _docId:
          type: string
        _id:
          type: string
        error:
          type: string
        function:
          type: string
      required:
        - _docId
        - error
        - function
      additionalProperties: false
      type: object
    iNotificationPreferences:
      properties:
        email:
          type: string
        emailVerification:
          $ref: '#/components/schemas/iEmailVerificationStatus'
        preferences:
          properties:
            listActivity:
              type: boolean
            transferActivity:
              type: boolean
            claimAlerts:
              type: boolean
          additionalProperties: false
          type: object
      additionalProperties: false
      type: object
    iEmailVerificationStatus:
      properties:
        verified:
          type: boolean
        token:
          type: string
        expiry:
          $ref: '#components/schemas/NumberType'
        antiPhishingCode:
          type: string
      additionalProperties: false
      type: object
    iActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
      required:
        - _docId
        - timestamp
        - block
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iReviewDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        review:
          description: The review text (max 2048 characters).
          type: string
        stars:
          description: The number of stars given (1-5).
          $ref: '#components/schemas/NumberType'
        from:
          description: The cosmos address of the user who gave the review.
          type: string
        collectionId:
          description: >-
            The collection ID of the collection that was reviewed. Only
            applicable to collection reviews.
          $ref: '#components/schemas/NumberType'
        reviewedAddress:
          description: >-
            The cosmos address of the user who the review is for. Only
            applicable to user reviews.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - review
        - stars
        - from
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iTransferActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        to:
          items:
            type: string
          description: The list of cosmos addresses that were involved in the activity.
          type: array
        from:
          description: The list of cosmos addresses that were involved in the activity.
          type: string
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The list of balances and badge IDs that were transferred.
          type: array
        collectionId:
          description: The collection ID of the collection that was transferred.
          $ref: '#components/schemas/NumberType'
        memo:
          description: The memo of the transfer.
          type: string
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: Which approval to use to precalculate the balances.
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: The prioritized approvals of the transfer.
          type: array
        onlyCheckPrioritizedApprovals:
          description: Whether or not to only check prioritized approvals.
          type: boolean
        initiatedBy:
          description: The cosmos address of the user who initiated the activity.
          type: string
        txHash:
          description: The transaction hash of the activity.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - to
        - from
        - balances
        - collectionId
        - initiatedBy
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iListActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        listId:
          description: The list ID of the list.
          type: string
        addedToList:
          description: >-
            Whether or not the address is included in the list. Note that this
            could mean added to an whitelist or a blacklist
          type: boolean
        addresses:
          items:
            type: string
          description: The list of addresses that were added or removed from the list.
          type: array
        txHash:
          description: The transaction hash of the activity.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - listId
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iClaimAlertDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        code:
          description: The code of the claim alert.
          type: string
        cosmosAddresses:
          items:
            type: string
          description: The cosmos addresses of the users that have been alerted.
          type: array
        collectionId:
          description: The collection ID of the claim alert.
          $ref: '#components/schemas/NumberType'
        message:
          description: The message of the claim alert.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - cosmosAddresses
        - collectionId
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iCollectionDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: The badge metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Inherited
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Inherited, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: The manager timeline
          type: array
        collectionPermissions:
          $ref: '#/components/schemas/iCollectionPermissions'
          description: The collection permissions
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: The collection approved transfers timeline
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: The is archived timeline
          type: array
        defaultBalances:
          $ref: '#/components/schemas/iUserBalanceStore'
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only used if collection has "Standard" balance type.
        createdBy:
          description: The cosmos address of the user who created this collection
          type: string
        createdBlock:
          description: The block number when this collection was created
          $ref: '#components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        updateHistory:
          items:
            properties:
              txHash:
                type: string
              block:
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            type: object
          description: The update history of this collection
          type: array
        aliasAddress:
          description: The alias cosmos address for the collection
          type: string
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionPermissions
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - defaultBalances
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iAccountDoc:
      properties:
        publicKey:
          description: The public key of the account
          type: string
        accountNumber:
          description: The account number of the account
          $ref: '#components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        ethAddress:
          description: The Eth address of the account
          type: string
        btcAddress:
          description: The Bitcoin address of the account
          type: string
        sequence:
          description: The sequence of the account
          $ref: '#components/schemas/NumberType'
        balance:
          $ref: '#/components/schemas/iCosmosCoin'
          description: The balance of the account
      required:
        - publicKey
        - accountNumber
        - pubKeyType
        - ethAddress
        - btcAddress
      additionalProperties: false
      type: object
    iCustomLink:
      properties:
        title:
          type: string
        url:
          type: string
        image:
          type: string
      required:
        - title
        - url
        - image
      additionalProperties: false
      description: |-
        CustomLinks are custom links that can be added to a profile.
      type: object
    iCustomPage:
      properties:
        title:
          type: string
        description:
          type: string
        items:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      type: object
    iCustomListPage:
      properties:
        title:
          type: string
        description:
          type: string
        items:
          items:
            type: string
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      description: >-
        CustomListPage is a custom list page that can be added to a profile. The
        items are valid list IDs.

      type: object
    iProfileDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          description: The latest chain the user signed in with
        solAddress:
          description: >-
            The Solana address of the profile, if applicable (bc we need it to
            convert)
          type: string
        notifications:
          $ref: '#/components/schemas/iNotificationPreferences'
          description: The notifications of the account
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: Approved ways to sign in (rather than Blockin)
          type: object
      required:
        - _docId
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iQueueDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        uri:
          description: >-
            The URI of the metadata to be fetched. If {id} is present, it will
            be replaced with each individual ID in badgeIds
          type: string
        collectionId:
          description: The collection ID of the metadata to be fetched
          $ref: '#components/schemas/NumberType'
        loadBalanceId:
          description: >-
            The load balance ID of the metadata to be fetched. Only the node
            with the same load balance ID will fetch this metadata
          $ref: '#components/schemas/NumberType'
        refreshRequestTime:
          description: >-
            The timestamp of when this metadata was requested to be refreshed
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        numRetries:
          description: >-
            The number of times this metadata has been tried to be fetched but
            failed
          $ref: '#components/schemas/NumberType'
        lastFetchedAt:
          description: >-
            The timestamp of when this metadata was last fetched (milliseconds
            since epoch)
          $ref: '#components/schemas/NumberType'
        error:
          description: The error message if this metadata failed to be fetched
          type: string
        deletedAt:
          description: >-
            The timestamp of when this document was deleted (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        nextFetchTime:
          description: >-
            The timestamp of when this document should be fetched next
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        emailMessage:
          type: string
        recipientAddress:
          type: string
        activityDocId:
          type: string
        notificationType:
          type: string
      required:
        - _docId
        - uri
        - collectionId
        - loadBalanceId
        - refreshRequestTime
        - numRetries
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iIndexerStatus:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
      required:
        - status
      additionalProperties: false
      type: object
    iLatestBlockStatus:
      properties:
        height:
          description: The height of the latest block
          $ref: '#components/schemas/NumberType'
        txIndex:
          description: The transaction index of the latest block
          $ref: '#components/schemas/NumberType'
        timestamp:
          description: The timestamp of the latest block (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
      required:
        - height
        - txIndex
        - timestamp
      additionalProperties: false
      type: object
    iStatusDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        block:
          $ref: '#/components/schemas/iLatestBlockStatus'
          description: The latest synced block status (i.e. height, txIndex, timestamp)
        nextCollectionId:
          description: The next collection ID to be used
          $ref: '#components/schemas/NumberType'
        gasPrice:
          description: The current gas price based on the average of the lastXGasAmounts
          type: number
        lastXGasAmounts:
          items:
            $ref: '#/components/schemas/NumberType'
          description: The last X gas prices
          type: array
        lastXGasLimits:
          items:
            $ref: '#/components/schemas/NumberType'
          description: The last X gas limits
          type: array
      required:
        - _docId
        - block
        - nextCollectionId
        - gasPrice
        - lastXGasAmounts
        - lastXGasLimits
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iAddressListEditKey:
      properties:
        key:
          description: The key that can be used to edit the address list
          type: string
        expirationDate:
          description: The expiration date of the key (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        mustSignIn:
          description: True if the user can only add their signed in address to the list
          type: boolean
      required:
        - key
        - expirationDate
      additionalProperties: false
      type: object
    iAddressListDoc:
      properties:
        listId:
          description: The ID of the address list.
          type: string
        addresses:
          items:
            type: string
          description: The addresses of the address list.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          type: string
        aliasAddress:
          description: The alias cosmos address of the address list.
          type: string
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                type: string
              block:
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            type: object
          description: The update history of this list
          type: array
        createdBlock:
          description: The block number when this list was created
          $ref: '#components/schemas/NumberType'
        lastUpdated:
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        nsfw:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The reported reason if this list is reported
          type: object
        private:
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iBalanceDoc:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                type: string
              block:
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            type: object
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.


        Fields for the MongoDB database document

      type: object
    ClaimIntegrationPluginType:
      enum:
        - password
        - numUses
        - greaterThanXBADGEBalance
        - discord
        - codes
        - twitter
        - transferTimes
        - requiresProofOfAddress
        - whitelist
        - mustOwnBadges
        - api
      type: string
    JsonBodyInputWithValue:
      properties:
        key:
          type: string
        label:
          type: string
        type:
          enum:
            - date
            - url
          type: string
        value:
          anyOf:
            - type: string
            - type: number
            - type: boolean
      required:
        - key
        - label
        - value
      additionalProperties: false
      type: object
    JsonBodyInputSchema:
      properties:
        key:
          type: string
        label:
          type: string
        type:
          enum:
            - date
            - url
            - string
            - number
            - boolean
          type: string
        helper:
          type: string
      required:
        - key
        - label
        - type
      additionalProperties: false
      type: object
    ClaimApiCallInfo:
      properties:
        uri:
          type: string
        name:
          type: string
        description:
          type: string
        passDiscord:
          type: boolean
        passTwitter:
          type: boolean
        bodyParams:
          type: object
        userInputsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
      required:
        - uri
        - name
        - userInputsSchema
      additionalProperties: false
      type: object
    iClaimBuilderDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        cid:
          description: The CID of the password document
          type: string
        createdBy:
          description: The cosmos address of the user who created this password
          type: string
        docClaimed:
          description: True if the password document is claimed by the collection
          type: boolean
        collectionId:
          description: The collection ID of the password document
          $ref: '#components/schemas/NumberType'
        plugins:
          items: {}
          description: Dynamic checks to run in the form of plugins
          type: array
        manualDistribution:
          description: >-
            If true, the claim codes are to be distributed manually. This doc
            will only be used for storage purposes.
          type: boolean
        state:
          additionalProperties: {}
          description: The current state of each plugin
          type: object
        action:
          properties:
            codes:
              items:
                type: string
              type: array
            seedCode:
              type: string
            balancesToSet:
              $ref: '#/components/schemas/iIncrementedBalances'
            listId:
              type: string
          additionalProperties: false
          description: Details for the action to perform if the criteria is correct
          type: object
      required:
        - _docId
        - cid
        - createdBy
        - docClaimed
        - collectionId
        - plugins
        - state
        - action
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iApprovalTrackerDoc:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#components/schemas/NumberType'
        amountTrackerId:
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          description: The address of the approval to check.
          type: string
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          type: string
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        numTransfers:
          description: The number of transfers. Is an incrementing tally.
          $ref: '#components/schemas/NumberType'
        amounts:
          items:
            $ref: '#/components/schemas/iBalance'
          description: A tally of the amounts transferred for this approval.
          type: array
      required:
        - collectionId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
        - _docId
        - numTransfers
        - amounts
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iChallengeTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        challengeId:
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
      required:
        - collectionId
        - challengeId
        - challengeLevel
        - approverAddress
      additionalProperties: false
      type: object
    iMerkleChallengeDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        challengeId:
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
        usedLeafIndices:
          items:
            $ref: '#/components/schemas/NumberType'
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
      required:
        - _docId
        - collectionId
        - challengeId
        - challengeLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iMerkleChallengeIdDetails:
      properties:
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        challengeId:
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
        usedLeafIndices:
          items:
            $ref: '#/components/schemas/NumberType'
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
      required:
        - collectionId
        - challengeId
        - challengeLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      type: object
    iFetchDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        content:
          anyOf:
            - $ref: '#/components/schemas/iMetadata'
            - $ref: '#/components/schemas/iApprovalInfoDetails'
            - $ref: '#/components/schemas/iOffChainBalancesMap'
          description: >-
            The content of the fetch document. Note that we store balances in
            BALANCES_DB and not here to avoid double storage.
        fetchedAt:
          description: The time the document was fetched
          $ref: '#components/schemas/NumberType'
        fetchedAtBlock:
          description: The block the document was fetched
          $ref: '#components/schemas/NumberType'
        db:
          enum:
            - ApprovalInfo
            - Metadata
            - Balances
          description: The type of content fetched. This is used for querying purposes
          type: string
        isPermanent:
          description: >-
            True if the document is permanent (i.e. fetched from a permanent URI
            like IPFS)
          type: boolean
      required:
        - _docId
        - fetchedAt
        - fetchedAtBlock
        - db
        - isPermanent
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iRefreshDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        refreshRequestTime:
          description: The time the refresh was requested (Unix timestamp in milliseconds)
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - collectionId
        - refreshRequestTime
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iAirdropDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        airdropped:
          description: True if the airdrop has been completed
          type: boolean
        timestamp:
          description: >-
            The timestamp of when the airdrop was completed (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        hash:
          description: The hash of the airdrop transaction
          type: string
      required:
        - _docId
        - airdropped
        - timestamp
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iIPFSTotalsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        bytesUploaded:
          description: The total bytes uploaded
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - bytesUploaded
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iComplianceDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        badges:
          properties:
            nsfw:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
              type: array
            reported:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        addressLists:
          properties:
            nsfw:
              items:
                properties:
                  listId:
                    type: string
                  reason:
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  listId:
                    type: string
                  reason:
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        accounts:
          properties:
            nsfw:
              items:
                properties:
                  cosmosAddress:
                    type: string
                  reason:
                    type: string
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  cosmosAddress:
                    type: string
                  reason:
                    type: string
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
      required:
        - _docId
        - badges
        - addressLists
        - accounts
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iBlockinAuthSignatureDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        signature:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
        cosmosAddress:
          type: string
        params:
          $ref: '#components/schemas/BlockinChallengeParams'
        createdAt:
          $ref: '#components/schemas/NumberType'
        deletedAt:
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - signature
        - name
        - description
        - image
        - cosmosAddress
        - params
        - createdAt
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iFollowDetailsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        followingCount:
          description: The number of users that the user is following
          $ref: '#components/schemas/NumberType'
        followersCount:
          description: The number of users that are following the user
          $ref: '#components/schemas/NumberType'
        followers:
          items:
            type: string
          description: The followers of the user
          type: array
        following:
          items:
            type: string
          description: The following of the user
          type: array
        followingCollectionId:
          description: The collection ID of the following collection
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iProtocolDoc:
      properties:
        name:
          description: The name of the protocol.
          type: string
        uri:
          description: The URI of the protocol.
          type: string
        customData:
          description: The custom data of the protocol.
          type: string
        createdBy:
          description: The cosmos address of the user who created the protocol.
          type: string
        isFrozen:
          description: Whether the protocol is frozen or not.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
      required:
        - name
        - uri
        - customData
        - createdBy
        - isFrozen
        - _docId
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iUserProtocolCollectionsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        protocols:
          additionalProperties:
            $ref: '#/components/schemas/NumberType'
          type: object
      required:
        - _docId
        - protocols
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    iBadgeMetadataDetails:
      properties:
        metadataId:
          description: >-
            The metadata ID for the fetched URI. Metadata IDs map an ID to each
            unique URI. See BitBadges Docs for more information.
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs that correspond to the metadata
          type: array
        metadata:
          $ref: '#/components/schemas/iMetadata'
          description: The metadata fetched by the URI
        uri:
          description: The URI that the metadata was fetched from
          type: string
        customData:
          description: Custom data
          type: string
        toUpdate:
          description: >-
            Flag to denote if the metadata is new and should be updated. Used
            internally.
          type: boolean
      required:
        - badgeIds
        - metadata
      additionalProperties: false
      type: object
    iMetadata:
      properties:
        name:
          description: The name of the badge or badge collection.
          type: string
        description:
          description: The description of the badge or badge collection.
          type: string
        image:
          description: The image of the badge or badge collection.
          type: string
        video:
          description: >-
            The video of the badge or badge collection. If a standard video is
            used, this should be a link to the video. We will use image as the
            poster image. If a youtube video is used, we embed it as an iframe.
          type: string
        creator:
          description: The creator of the badge or badge collection.
          type: string
        color:
          description: The color of the badge or badge collection.
          type: string
        category:
          description: >-
            The category of the badge or badge collection (e.g. "Education",
            "Attendance").
          type: string
        externalUrl:
          description: The external URL of the badge or badge collection.
          type: string
        tags:
          items:
            type: string
          description: The tags of the badge or badge collection
          type: array
        socials:
          additionalProperties:
            type: string
          description: The socials of the badge or badge collection
          type: object
        offChainTransferabilityInfo:
          properties:
            host:
              type: string
            assignMethod:
              type: string
          required:
            - host
            - assignMethod
          additionalProperties: false
          description: The off-chain transferability info of the badge or badge collection
          type: object
        attributes:
          items:
            properties:
              type:
                enum:
                  - date
                  - url
                type: string
              name:
                type: string
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - name
              - value
            additionalProperties: false
            type: object
          description: The attributes of the badge or badge collection
          type: array
        fetchedAtBlock:
          description: The block the metadata was fetched at.
          $ref: '#components/schemas/NumberType'
        fetchedAt:
          description: The time the metadata was fetched.
          $ref: '#components/schemas/NumberType'
        _isUpdating:
          description: Whether the metadata is currently being updated.
          type: boolean
      required:
        - name
        - description
        - image
      additionalProperties: false
      type: object
    iBitBadgesAddressList:
      properties:
        listId:
          description: The ID of the address list.
          type: string
        addresses:
          items:
            type: string
          description: The addresses of the address list.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          type: string
        aliasAddress:
          description: The alias cosmos address of the address list.
          type: string
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                type: string
              block:
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            type: object
          description: The update history of this list
          type: array
        createdBlock:
          description: The block number when this list was created
          $ref: '#components/schemas/NumberType'
        lastUpdated:
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        nsfw:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The reported reason if this list is reported
          type: object
        private:
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
        metadata:
          $ref: '#/components/schemas/iMetadata'
          description: The metadata of the address list.
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
          description: The activity of the address list.
          type: array
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: The views of the address list.
          type: object
        editClaims:
          items:
            properties:
              claimId:
                type: string
              plugins:
                items: {}
                type: array
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
          type: array
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
        - listsActivity
        - views
        - editClaims
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    GetAddressListsRouteRequestBody:
      properties:
        listsToFetch:
          items:
            properties:
              listId:
                type: string
              viewsToFetch:
                items:
                  properties:
                    viewId:
                      type: string
                    viewType:
                      enum:
                        - listActivity
                      type: string
                    bookmark:
                      type: string
                  required:
                    - viewId
                    - viewType
                    - bookmark
                  additionalProperties: false
                  type: object
                type: array
              fetchPrivateParams:
                type: boolean
            required:
              - listId
            additionalProperties: false
            type: object
          description: >-
            The lists and accompanyin details to fetch. Supports on-chain,
            off-chain, and reserved lists.
          type: array
      required:
        - listsToFetch
      additionalProperties: false
      type: object
    iGetAddressListsRouteSuccessResponse:
      properties:
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    UpdateAddressListsRouteRequestBody:
      properties:
        addressLists:
          items:
            allOf:
              - $ref: '#/components/schemas/iAddressList'
              - properties:
                  private:
                    type: boolean
                  editClaims:
                    items:
                      properties:
                        claimId:
                          type: string
                        plugins:
                          items: {}
                          type: array
                      required:
                        - claimId
                        - plugins
                      additionalProperties: false
                      type: object
                    type: array
                  viewableWithLink:
                    type: boolean
                required:
                  - editClaims
                additionalProperties: false
                type: object
          description: |-
            New address lists to update.
            Requester must be creator of the lists.
            Only applicable to off-chain balances.
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    iUpdateAddressListsRouteSuccessResponse:
      additionalProperties: false
      type: object
    DeleteAddressListsRouteRequestBody:
      properties:
        listIds:
          items:
            type: string
          description: The list IDs to delete.
          type: array
      required:
        - listIds
      additionalProperties: false
      type: object
    iDeleteAddressListsRouteSuccessResponse:
      additionalProperties: false
      type: object
    iBitBadgesUserInfo:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          description: The latest chain the user signed in with
        solAddress:
          description: >-
            The Solana address of the profile, if applicable (bc we need it to
            convert)
          type: string
        notifications:
          $ref: '#/components/schemas/iNotificationPreferences'
          description: The notifications of the account
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: Approved ways to sign in (rather than Blockin)
          type: object
        publicKey:
          description: The public key of the account
          type: string
        accountNumber:
          description: The account number of the account
          $ref: '#components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        ethAddress:
          description: The Eth address of the account
          type: string
        btcAddress:
          description: The Bitcoin address of the account
          type: string
        sequence:
          description: The sequence of the account
          $ref: '#components/schemas/NumberType'
        balance:
          $ref: '#/components/schemas/iCosmosCoin'
          description: The balance of the account
        resolvedName:
          description: The resolved name of the account (e.g. ENS name).
          type: string
        avatar:
          description: The avatar of the account.
          type: string
        chain:
          description: The chain of the account.
        airdropped:
          description: Indicates whether the account has claimed their airdrop.
          type: boolean
        collected:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: >-
            A list of badges that the account has collected. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: >-
            A list of transfer activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
          description: >-
            A list of list activity items for the account. Paginated and fetched
            as needed. To be used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
          description: >-
            A list of review activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
          description: >-
            A list of merkle challenge activity items for the account. Paginated
            and fetched as needed. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
          description: >-
            A list of approvals tracker activity items for the account.
            Paginated and fetched as needed. To be used in conjunction with
            views.
          type: array
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
          description: >-
            A list of address lists for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
          description: >-
            A list of claim alerts for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        authCodes:
          items:
            $ref: '#/components/schemas/iBlockinAuthSignatureDoc'
          description: >-
            A list of auth codes for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        address:
          description: The native address of the account
          type: string
        nsfw:
          additionalProperties:
            type: string
          description: Indicates whether the account is NSFW.
          type: object
        reported:
          additionalProperties:
            type: string
          description: Indicates whether the account has been reported.
          type: object
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        alias:
          properties:
            collectionId:
              $ref: '#components/schemas/NumberType'
            listId:
              type: string
          additionalProperties: false
          description: The alias for the account.
          type: object
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - ethAddress
        - btcAddress
        - chain
        - collected
        - activity
        - listsActivity
        - reviews
        - merkleChallenges
        - approvalTrackers
        - addressLists
        - claimAlerts
        - authCodes
        - address
        - views
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    AccountMap:
      additionalProperties:
        $ref: '#/components/schemas/iBitBadgesUserInfo'
      description: |-
        AccountMap is used to store the user information by address.
      type: object
    AccountViewKey:
      enum:
        - createdLists
        - privateLists
        - authCodes
        - transferActivity
        - reviews
        - badgesCollected
        - claimAlerts
        - allLists
        - whitelists
        - blacklists
        - createdBadges
        - managingBadges
        - listsActivity
      description: |-
        The supported view keys for fetching account details.
      type: string
    AccountFetchDetails:
      properties:
        address:
          type: string
        username:
          type: string
        fetchSequence:
          description: If true, we will fetch the sequence from the blockchain.
          type: boolean
        fetchBalance:
          description: If true, we will fetch the $BADGE balance from the blockchain.
          type: boolean
        noExternalCalls:
          description: If true, we will avoid external API calls.
          type: boolean
        viewsToFetch:
          items:
            properties:
              viewId:
                description: >-
                  Unique view ID. Used for pagination. All fetches w/ same ID
                  should be made with same criteria.
                type: string
              viewType:
                $ref: '#/components/schemas/AccountViewKey'
                description: The base view type to fetch.
              specificCollections:
                items:
                  $ref: '#/components/schemas/iBatchBadgeDetails'
                description: >-
                  If defined, we will filter the view to only include the
                  specified collections.
                type: array
              specificLists:
                items:
                  type: string
                description: >-
                  If defined, we will filter the view to only include the
                  specified lists.
                type: array
              oldestFirst:
                description: Oldest first. By default, we fetch newest
                type: boolean
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
            required:
              - viewId
              - viewType
              - bookmark
            additionalProperties: false
            type: object
          description: An array of views to fetch
          type: array
      additionalProperties: false
      description: >-
        This defines the options for fetching additional account details.


        A view is a way of fetching additional details about an account, and
        these will be queryable in the response via the `views` property.


        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the account.

        - `latestAnnouncements` - Fetches the latest announcements for the
        account.

        - `reviews` - Fetches the latest reviews for the account.

        - `badgesCollected` - Fetches the badges collected by the account
        sequentially in random order.

      type: object
    GetAccountsRouteRequestBody:
      properties:
        accountsToFetch:
          items:
            $ref: '#/components/schemas/AccountFetchDetails'
          type: array
      required:
        - accountsToFetch
      additionalProperties: false
      type: object
    iGetAccountsRouteSuccessResponse:
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
          type: array
      required:
        - accounts
      additionalProperties: false
      type: object
    GetFollowDetailsRouteRequestBody:
      properties:
        cosmosAddress:
          type: string
        followingBookmark:
          type: string
        followersBookmark:
          type: string
        protocol:
          type: string
        activityBookmark:
          type: string
      required:
        - cosmosAddress
      additionalProperties: false
      type: object
    iGetFollowDetailsRouteSuccessResponse:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        followingCount:
          description: The number of users that the user is following
          $ref: '#components/schemas/NumberType'
        followersCount:
          description: The number of users that are following the user
          $ref: '#components/schemas/NumberType'
        followers:
          items:
            type: string
          description: The followers of the user
          type: array
        following:
          items:
            type: string
          description: The following of the user
          type: array
        followingCollectionId:
          description: The collection ID of the following collection
          $ref: '#components/schemas/NumberType'
        followersPagination:
          $ref: '#/components/schemas/PaginationInfo'
        followingPagination:
          $ref: '#/components/schemas/PaginationInfo'
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          type: array
        activityPagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
        - followersPagination
        - followingPagination
        - activity
        - activityPagination
      additionalProperties: false
      description: |-
        Fields for the MongoDB database document
      type: object
    FilterBadgesInCollectionRequestBody:
      properties:
        collectionId:
          description: The collection ID to filter
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: >-
            Limit to specific badge IDs. Leave undefined to not filter by badge
            ID.
          type: array
        categories:
          items:
            type: string
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        tags:
          items:
            type: string
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        mostViewed:
          enum:
            - daily
            - allTime
            - weekly
            - monthly
            - yearly
          description: >-
            mostViewed is a special view that sorts by most viewed badges. May
            be incompatible with other filters.
          type: string
        bookmark:
          description: Pagination bookmark. Leave undefined or "" for first request.
          type: string
        attributes:
          items:
            properties:
              name:
                type: string
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - name
              - value
            additionalProperties: false
            type: object
          description: Attribute queries
          type: array
      required:
        - collectionId
      additionalProperties: false
      type: object
    iFilterBadgesInCollectionSuccessResponse:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - badgeIds
        - pagination
      additionalProperties: false
      type: object
    PaginationInfo:
      properties:
        bookmark:
          type: string
        hasMore:
          type: boolean
      required:
        - bookmark
        - hasMore
      additionalProperties: false
      description: |-
        Type for pagination information.
      type: object
    GetOwnersForBadgeRouteRequestBody:
      properties:
        bookmark:
          description: >-
            The pagination bookmark for where to start the request. Bookmarks
            are obtained via the previous response. "" for first request.
          type: string
      additionalProperties: false
      type: object
    iGetOwnersForBadgeRouteSuccessResponse:
      properties:
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: Represents a list of owners balance details.
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: Represents pagination information.
      required:
        - owners
        - pagination
      additionalProperties: false
      type: object
    GetBadgeBalanceByAddressRouteRequestBody:
      additionalProperties: false
      type: object
    iGetBadgeBalanceByAddressRouteSuccessResponse:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                type: string
              block:
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            type: object
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.


        Fields for the MongoDB database document

      type: object
    GetBadgeActivityRouteRequestBody:
      properties:
        bookmark:
          description: >-
            An optional bookmark for pagination. Bookmarks are obtained via the
            previous response. "" for first request.
          type: string
      additionalProperties: false
      type: object
    iGetBadgeActivityRouteSuccessResponse:
      properties:
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: Array of transfer activity information.
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: Pagination information.
      required:
        - activity
        - pagination
      additionalProperties: false
      type: object
    MetadataFetchOptions:
      properties:
        doNotFetchCollectionMetadata:
          description: If true, collection metadata will not be fetched.
          type: boolean
        metadataIds:
          anyOf:
            - type: string
            - items:
                type: number
              type: array
            - items:
                $ref: '#/components/schemas/iUintRange'
              type: array
          description: >-
            If present, the metadata corresponding to the specified metadata IDs
            will be fetched.

            Metadata IDs are helpful when determining UNQIUE URIs to be fetched.


            If badges 1-10000 all share the same URI, they will have the same
            single metadata ID.

            If badge 1 has a different URI than badges 2-10000, badge 1 will
            have a different metadata ID than the rest/


            We scan in increasing order of badge IDs, so metadata ID 1 will be
            for badge 1-X, metadata ID 2 will be for badge X+1-Y, etc.


            ID 0 = Collection metadata fetch

            ID 1 = First badge metadata fetch

            ID 2 = Second badge metadata fetch (if present)

            And so on

            Learn more in documentation.
        uris:
          items:
            type: string
          description: >-
            If present, the metadata corresponding to the specified URIs will be
            fetched.
          type: array
        badgeIds:
          anyOf:
            - type: string
            - items:
                type: number
              type: array
            - items:
                $ref: '#/components/schemas/iUintRange'
              type: array
          description: >-
            If present, the metadata corresponding to the specified badge IDs
            will be fetched.
      additionalProperties: false
      description: |-
        Defines the options for fetching metadata.
      type: object
    CollectionViewKey:
      enum:
        - transferActivity
        - reviews
        - owners
        - amountTrackers
        - challengeTrackers
      description: |-
        Supported view keys for fetching additional collection details.
      type: string
    GetAdditionalCollectionDetailsRequestBody:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
      additionalProperties: false
      description: >-
        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.

      type: object
    GetMetadataForCollectionRequestBody:
      properties:
        metadataToFetch:
          $ref: '#/components/schemas/MetadataFetchOptions'
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
      additionalProperties: false
      type: object
    GetCollectionBatchRouteRequestBody:
      properties:
        collectionsToFetch:
          items:
            allOf:
              - properties:
                  collectionId:
                    description: The ID of the collection to fetch.
                    $ref: '#components/schemas/NumberType'
                required:
                  - collectionId
                additionalProperties: false
                type: object
              - $ref: '#/components/schemas/GetMetadataForCollectionRequestBody'
              - $ref: '#/components/schemas/GetAdditionalCollectionDetailsRequestBody'
          type: array
      required:
        - collectionsToFetch
      additionalProperties: false
      type: object
    iGetCollectionBatchRouteSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
          type: array
      required:
        - collections
      additionalProperties: false
      type: object
    GetCollectionByIdRouteRequestBody:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
        metadataToFetch:
          $ref: '#/components/schemas/MetadataFetchOptions'
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
      additionalProperties: false
      description: >-

        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.

      type: object
    iGetCollectionByIdRouteSuccessResponse:
      properties:
        collection:
          $ref: '#/components/schemas/iBitBadgesCollection'
      required:
        - collection
      additionalProperties: false
      type: object
    RefreshMetadataRouteRequestBody:
      additionalProperties: false
      type: object
    iRefreshMetadataRouteSuccessResponse:
      additionalProperties: false
      type: object
    RefreshStatusRouteRequestBody:
      additionalProperties: false
      type: object
    iRefreshStatusRouteSuccessResponse:
      properties:
        inQueue:
          description: Boolean indicating if the collection is currently in the queue.
          type: boolean
        errorDocs:
          items:
            $ref: '#/components/schemas/iQueueDoc'
          description: Array of error documents corresponding to the collection.
          type: array
        refreshDoc:
          $ref: '#/components/schemas/iRefreshDoc'
          description: The status information corresponding to the collection.
      required:
        - inQueue
        - errorDocs
        - refreshDoc
      additionalProperties: false
      type: object
    GetProtocolsRouteRequestBody:
      properties:
        names:
          items:
            type: string
          type: array
      required:
        - names
      additionalProperties: false
      type: object
    iGetProtocolsRouteSuccessResponse:
      properties:
        protocols:
          items:
            $ref: '#/components/schemas/iProtocol'
          type: array
      required:
        - protocols
      additionalProperties: false
      type: object
    iProtocol:
      properties:
        name:
          description: The name of the protocol.
          type: string
        uri:
          description: The URI of the protocol.
          type: string
        customData:
          description: The custom data of the protocol.
          type: string
        createdBy:
          description: The cosmos address of the user who created the protocol.
          type: string
        isFrozen:
          description: Whether the protocol is frozen or not.
          type: boolean
      required:
        - name
        - uri
        - customData
        - createdBy
        - isFrozen
      additionalProperties: false
      type: object
    GetCollectionForProtocolRouteRequestBody:
      properties:
        name:
          type: string
        address:
          type: string
      required:
        - name
        - address
      additionalProperties: false
      type: object
    iGetCollectionForProtocolRouteSuccessResponse:
      properties:
        collectionId:
          $ref: '#components/schemas/NumberType'
      required:
        - collectionId
      additionalProperties: false
      type: object
    GetStatusRouteRequestBody:
      additionalProperties: false
      type: object
    iGetStatusRouteSuccessResponse:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
          description: Includes status details about the indexer / blockchain.
      required:
        - status
      additionalProperties: false
      type: object
    GetSearchRouteRequestBody:
      properties:
        noCollections:
          description: If true, we will skip all collection queries.
          type: boolean
        noAccounts:
          description: If true, we will skip all account queries.
          type: boolean
        noAddressLists:
          description: If true, we will skip all address list queries.
          type: boolean
        noBadges:
          description: If true, we will skip all badge queries.
          type: boolean
        specificCollectionId:
          description: If true, we will limit collection results to a single collection.
          $ref: '#components/schemas/NumberType'
      additionalProperties: false
      type: object
    iGetSearchRouteSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
          type: array
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
          type: array
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
          type: array
        badges:
          items:
            properties:
              collection:
                $ref: '#/components/schemas/iBitBadgesCollection'
              badgeIds:
                items:
                  $ref: '#/components/schemas/iUintRange'
                type: array
            required:
              - collection
              - badgeIds
            additionalProperties: false
            type: object
          type: array
      required:
        - collections
        - accounts
        - addressLists
        - badges
      additionalProperties: false
      type: object
    CodesAndPasswords:
      properties:
        cid:
          description: The IPFS CID of the merkle challenge.
          type: string
        codes:
          items:
            type: string
          type: array
        password:
          type: string
      required:
        - cid
        - codes
        - password
      additionalProperties: false
      description: >-
        Type to allow specifying codes and passwords for a merkle challenge.


        We only support storing codes and passwords for merkle challenges
        created by BitBadges via IPFS.

        The IPFS CID of the merkle challenge is used to identify the merkle
        challenge.


        Note that we only support storing a set of codes and passwords once per
        unique CID.

      type: object
    GetClaimsRouteRequestBody:
      properties:
        claimIds:
          items:
            type: string
          type: array
        listId:
          type: string
      required:
        - claimIds
      additionalProperties: false
      type: object
    iGetClaimsRouteSuccessResponse:
      properties:
        claims:
          items:
            properties:
              claimId:
                type: string
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
              plugins:
                items: {}
                type: array
              manualDistribution:
                type: boolean
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
          type: array
      required:
        - claims
      additionalProperties: false
      type: object
    CheckAndCompleteClaimRouteRequestBody:
      properties:
        prevCodesOnly:
          type: boolean
      additionalProperties: {}
      type: object
    iCheckAndCompleteClaimRouteSuccessResponse:
      properties:
        code:
          type: string
        prevCodes:
          items:
            type: string
          type: array
      additionalProperties: false
      type: object
    DeleteReviewRouteRequestBody:
      properties:
        reviewId:
          description: The review ID to delete.
          type: string
      required:
        - reviewId
      additionalProperties: false
      type: object
    iDeleteReviewRouteSuccessResponse:
      additionalProperties: false
      type: object
    AddReviewForCollectionRouteRequestBody:
      properties:
        review:
          description: The review text (1 to 2048 characters).
          type: string
        stars:
          description: The star rating (1 to 5).
          $ref: '#components/schemas/NumberType'
      required:
        - review
        - stars
      additionalProperties: false
      type: object
    iAddReviewForCollectionRouteSuccessResponse:
      additionalProperties: false
      type: object
    AddReviewForUserRouteRequestBody:
      properties:
        review:
          description: The review text (1 to 2048 characters).
          type: string
        stars:
          description: The number of stars (1 to 5) for the review.
          $ref: '#components/schemas/NumberType'
      required:
        - review
        - stars
      additionalProperties: false
      type: object
    iAddReviewForUserRouteSuccessResponse:
      additionalProperties: false
      type: object
    UpdateAccountInfoRouteRequestBody:
      properties:
        discord:
          description: The Discord username.
          type: string
        twitter:
          description: The Twitter username.
          type: string
        github:
          description: The GitHub username.
          type: string
        telegram:
          description: The Telegram username.
          type: string
        seenActivity:
          description: The last seen activity timestamp.
          $ref: '#components/schemas/NumberType'
        readme:
          description: The README details.
          type: string
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          description: The badges to hide and not view for this profile's portfolio
          type: array
        hiddenLists:
          items:
            type: string
          description: The lists to hide and not view for this profile's portfolio
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: >-
            An array of custom pages on the user's portolio. Used to customize,
            sort, and group badges / lists into pages.
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watchlist of badges / lists
          type: object
        profilePicUrl:
          description: The profile picture URL.
          type: string
        username:
          description: The username.
          type: string
        profilePicImageFile:
          description: The profile picture image file. We will then upload to our CDN.
        notifications:
          properties:
            email:
              type: string
            antiPhishingCode:
              type: string
            preferences:
              additionalProperties: false
              type: object
          additionalProperties: false
          description: The notification preferences for the user.
          type: object
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: Approved sign in methods
          type: object
      additionalProperties: false
      type: object
    iUpdateAccountInfoRouteSuccessResponse:
      additionalProperties: false
      type: object
    AddBalancesToOffChainStorageRouteRequestBody:
      properties:
        balances:
          $ref: '#/components/schemas/iOffChainBalancesMap'
          description: A map of Cosmos addresses or list IDs -> Balance[].
        offChainClaims:
          items:
            properties:
              claimId:
                type: string
              plugins:
                items: {}
                type: array
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
          description: The claim details
          type: array
        method:
          enum:
            - ipfs
            - centralized
          description: The method for storing balances (ipfs or centralized).
          type: string
        collectionId:
          description: The collection ID.
          $ref: '#components/schemas/NumberType'
      required:
        - method
        - collectionId
      additionalProperties: false
      type: object
    iAddBalancesToOffChainStorageRouteSuccessResponse:
      properties:
        uri:
          description: The URI of the stored data.
          type: string
        result:
          properties:
            cid:
              type: string
          additionalProperties: false
          description: The result object with CID.
          type: object
      required:
        - result
      additionalProperties: false
      type: object
    AddMetadataToIpfsRouteRequestBody:
      properties:
        collectionMetadata:
          $ref: '#/components/schemas/iMetadata'
          description: The collection metadata to add to IPFS
        badgeMetadata:
          anyOf:
            - items:
                $ref: '#/components/schemas/iBadgeMetadataDetails'
              type: array
            - items:
                $ref: '#/components/schemas/iMetadata'
              type: array
          description: The badge metadata to add to IPFS
      additionalProperties: false
      type: object
    iAddMetadataToIpfsRouteSuccessResponse:
      properties:
        collectionMetadataResult:
          properties:
            cid:
              type: string
          required:
            - cid
          additionalProperties: false
          description: The result for collection metadata.
          type: object
        badgeMetadataResults:
          items:
            properties:
              cid:
                type: string
            required:
              - cid
            additionalProperties: false
            type: object
          description: An array of badge metadata results, if applicable.
          type: array
      required:
        - badgeMetadataResults
      additionalProperties: false
      type: object
    AddApprovalDetailsToOffChainStorageRouteRequestBody:
      properties:
        name:
          description: The name of the approval.
          type: string
        description:
          description: The description of the approval.
          type: string
        challengeDetails:
          $ref: '#/components/schemas/iChallengeDetails'
          description: The challenge details.
        offChainClaims:
          items:
            properties:
              plugins:
                items: {}
                description: The plugins for the approval.
                type: array
              claimId:
                type: string
              manualDistribution:
                type: boolean
            required:
              - plugins
              - claimId
            additionalProperties: false
            type: object
          type: array
      required:
        - name
        - description
      additionalProperties: false
      type: object
    iAddApprovalDetailsToOffChainStorageRouteSuccessResponse:
      properties:
        result:
          properties:
            cid:
              type: string
          required:
            - cid
          additionalProperties: false
          description: The result with CID for IPFS.
          type: object
      required:
        - result
      additionalProperties: false
      type: object
    GetSignInChallengeRouteRequestBody:
      properties:
        chain:
          description: The blockchain to be signed in with.
        address:
          description: The user's blockchain address (their native L1 address).
          type: string
        hours:
          description: The number of hours to be signed in for.
          $ref: '#components/schemas/NumberType'
      required:
        - chain
        - address
      additionalProperties: false
      type: object
    iGetSignInChallengeRouteSuccessResponse:
      properties:
        nonce:
          description: The nonce for the challenge.
          type: string
        params:
          description: The challenge parameters.
          $ref: '#/components/schemas/BlockinChallengeParams'
        message:
          description: The Blockin challenge message to sign.
          type: string
      required:
        - nonce
        - params
        - message
      additionalProperties: false
      type: object

    VerifySignInRouteRequestBody:
      properties:
        message:
          description: The original Blockin message
          type: string
        signature:
          description: The signature of the Blockin message
          type: string
        publicKey:
          description: Required for some chains. The public key of the signer.
          type: string
      required:
        - message
        - signature
      additionalProperties: false
      type: object
    iVerifySignInRouteSuccessResponse:
      additionalProperties: false
      type: object
    CheckSignInStatusRequestBody:
      additionalProperties: false
      type: object
    iCheckSignInStatusRequestSuccessResponse:
      properties:
        signedIn:
          description: Indicates whether the user is signed in.
          type: boolean
        message:
          description: The Blockin message that was signed.
          type: string
        discord:
          properties:
            username:
              type: string
            discriminator:
              type: string
            id:
              type: string
          required:
            - username
            - discriminator
            - id
          additionalProperties: false
          description: Signed in with Discord username and discriminator?
          type: object
        twitter:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Twitter username?
          type: object
      required:
        - signedIn
        - message
      additionalProperties: false
      type: object
    SignOutRequestBody:
      properties:
        signOutDiscord:
          type: boolean
        signOutTwitter:
          type: boolean
        signOutBlockin:
          type: boolean
      required:
        - signOutDiscord
        - signOutTwitter
        - signOutBlockin
      additionalProperties: false
      type: object
    iSignOutSuccessResponse:
      additionalProperties: false
      type: object
    GetBrowseCollectionsRouteRequestBody:
      additionalProperties: false
      type: object
    iGetBrowseCollectionsRouteSuccessResponse:
      properties:
        collections:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesCollection'
            type: array
          type: object
        addressLists:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesAddressList'
            type: array
          type: object
        profiles:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesUserInfo'
            type: array
          type: object
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          type: array
        badges:
          additionalProperties:
            items:
              properties:
                collection:
                  $ref: '#/components/schemas/iBitBadgesCollection'
                badgeIds:
                  items:
                    $ref: '#/components/schemas/iUintRange'
                  type: array
              required:
                - collection
                - badgeIds
              additionalProperties: false
              type: object
            type: array
          type: object
      required:
        - collections
        - addressLists
        - profiles
        - activity
        - badges
      additionalProperties: false
      type: object
    BroadcastTxRouteRequestBody:
      type: object
      additionalProperties: false
    iBroadcastTxRouteSuccessResponse:
      properties:
        tx_response:
          properties:
            code:
              type: number
            codespace:
              type: string
            data:
              type: string
            events:
              items:
                properties:
                  type:
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        index:
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
              type: array
            gas_wanted:
              type: string
            gas_used:
              type: string
            height:
              type: string
            Doc:
              type: string
            logs:
              items:
                properties:
                  events:
                    items:
                      properties:
                        type:
                          type: string
                        attributes:
                          items:
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                              index:
                                type: boolean
                            required:
                              - key
                              - value
                              - index
                            additionalProperties: false
                            type: object
                          type: array
                      required:
                        - type
                        - attributes
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - events
                additionalProperties: false
                type: object
              type: array
            raw_log:
              type: string
            timestamp:
              type: string
            tx:
              nullable: true
              type: object
            txhash:
              type: string
          required:
            - code
            - codespace
            - data
            - events
            - gas_wanted
            - gas_used
            - height
            - Doc
            - logs
            - raw_log
            - timestamp
            - tx
            - txhash
          additionalProperties: false
          description: |-
            The response from the blockchain for the broadcasted tx.
            See Cosmos SDK documentation for what each field means.
          type: object
      required:
        - tx_response
      additionalProperties: false
      type: object
    SimulateTxRouteRequestBody:
      type: object
      additionalProperties: false

    iSimulateTxRouteSuccessResponse:
      properties:
        gas_info:
          properties:
            gas_used:
              type: string
            gas_wanted:
              type: string
          required:
            - gas_used
            - gas_wanted
          additionalProperties: false
          description: How much gas was used in the simulation.
          type: object
        result:
          properties:
            data:
              type: string
            log:
              type: string
            events:
              items:
                properties:
                  type:
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        index:
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
              type: array
          required:
            - data
            - log
            - events
          additionalProperties: false
          description: The result of the simulation.
          type: object
      required:
        - gas_info
        - result
      additionalProperties: false
      type: object
    FetchMetadataDirectlyRouteRequestBody:
      properties:
        uris:
          items:
            type: string
          type: array
      required:
        - uris
      additionalProperties: false
      type: object
    iFetchMetadataDirectlyRouteSuccessResponse:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/iMetadata'
          type: array
      required:
        - metadata
      additionalProperties: false
      type: object
    GetTokensFromFaucetRouteRequestBody:
      additionalProperties: false
      type: object
    iGetTokensFromFaucetRouteSuccessResponse:
      additionalProperties: false
      type: object
    SendClaimAlertsRouteRequestBody:
      properties:
        claimAlerts:
          items:
            properties:
              collectionId:
                $ref: '#components/schemas/NumberType'
              message:
                type: string
              recipientAddress:
                type: string
            required:
              - collectionId
              - recipientAddress
            additionalProperties: false
            type: object
          type: array
      required:
        - claimAlerts
      additionalProperties: false
      type: object
    iSendClaimAlertsRouteSuccessResponse:
      additionalProperties: false
      type: object
    CosmosAccountResponse:
      properties:
        account_number:
          type: number
        sequence:
          type: number
        pub_key:
          properties:
            key:
              type: string
          required:
            - key
          additionalProperties: false
          type: object
        address:
          type: string
      required:
        - account_number
        - sequence
        - pub_key
        - address
      additionalProperties: false
      type: object
    GenericBlockinVerifyRouteRequestBody:
      properties:
        message:
          description: The original Blockin message
          type: string
        signature:
          description: The signature of the Blockin message
          type: string
        publicKey:
          description: Required for some chains. The public key of the signer.
          type: string
        options:
          description: Additional options for verifying the challenge.
      required:
        - message
        - signature
      additionalProperties: false
      description: >-
        Generic route to verify any Blockin request. Does not sign you in with
        the API. Used for custom Blockin integrations.
      type: object
    iGenericBlockinVerifyRouteSuccessResponse:
      additionalProperties: false
      type: object
    CreateBlockinAuthCodeRouteRequestBody:
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string
        message:
          type: string
        signature:
          type: string
        publicKey:
          type: string
      required:
        - name
        - description
        - image
        - message
        - signature
      additionalProperties: false
      type: object
    iCreateBlockinAuthCodeRouteSuccessResponse:
      additionalProperties: false
      type: object
    GetBlockinAuthCodeRouteRequestBody:
      properties:
        signature:
          type: string
        options:
          $ref: '#/components/schemas/VerifyChallengeOptions'
      required:
        - signature
      additionalProperties: false
      type: object
    iGetBlockinAuthCodeRouteSuccessResponse:
      properties:
        message:
          description: The corresponding message that was signed to obtain the signature.
          type: string
        params:
          description: The converted Blockin params fort the message
          $ref: '#/components/schemas/BlockinChallengeParams'
        verificationResponse:
          properties:
            success:
              description: >-
                Returns whether the current (message, signature) pair is valid
                and verified (i.e. signature is valid and any assets are owned).
              type: boolean
            errorMessage:
              description: Returns the response message returned from Blockin verification.
              type: string
          required:
            - success
          additionalProperties: false
          description: Verification response
          type: object
      required:
        - message
        - params
        - verificationResponse
      additionalProperties: false
      type: object
    DeleteBlockinAuthCodeRouteRequestBody:
      properties:
        signature:
          type: string
      required:
        - signature
      additionalProperties: false
      type: object
    iDeleteBlockinAuthCodeRouteSuccessResponse:
      additionalProperties: false
      type: object
    GenerateAppleWalletPassRouteRequestBody:
      properties:
        name:
          type: string
        description:
          type: string
        message:
          type: string
        signature:
          type: string
      required:
        - name
        - description
        - message
        - signature
      additionalProperties: false
      type: object
    iGenerateAppleWalletPassRouteSuccessResponse:
      properties:
        type:
          type: string
        data:
          type: string
      required:
        - type
        - data
      additionalProperties: false
      type: object
    GetClaimAlertsForCollectionRouteRequestBody:
      properties:
        collectionId:
          $ref: '#components/schemas/NumberType'
        bookmark:
          type: string
      required:
        - collectionId
        - bookmark
      additionalProperties: false
      type: object
    iGetClaimAlertsForCollectionRouteSuccessResponse:
      properties:
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - claimAlerts
        - pagination
      additionalProperties: false
      type: object
    iOffChainBalancesMap:
      additionalProperties:
        items:
          $ref: '#/components/schemas/iBalance'
        type: array
      type: object
    iTransferWithIncrements:
      properties:
        from:
          description: The address to transfer from.
          type: string
        toAddresses:
          items:
            type: string
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.
          type: boolean
        toAddressesLength:
          description: >-
            The number of addresses to send the badges to. This takes priority
            over toAddresses.length (used when you don't know exact addresses
            (i.e. you know number of codes)).
          $ref: '#components/schemas/NumberType'
        incrementBadgeIdsBy:
          description: The number to increment the badgeIDs by for each transfer.
          $ref: '#components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: The number to increment the ownershipTimes by for each transfer.
          $ref: '#components/schemas/NumberType'
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
    iBatchBadgeDetails:
      properties:
        collectionId:
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
      required:
        - collectionId
        - badgeIds
      additionalProperties: false
      type: object
    LeavesDetails:
      properties:
        leaves:
          items:
            type: string
          type: array
        isHashed:
          type: boolean
        preimages:
          items:
            type: string
          type: array
        seedCode:
          type: string
      required:
        - leaves
        - isHashed
      additionalProperties: false
      description: >-
        LeavesDetails represents details about the leaves of a claims tree.

        This is used as helpers for storing leaves and for UI purposes.


        This is used to check if an entered claim value is valid. If the leaves
        are hashed, then the value entered by the user will be hashed before
        being checked against the provided leaf values.

        If the leaves are not hashed, then the value entered by the user will be
        checked directly against the provided leaf values.


        IMPORTANT: The leaf values here are to be publicly stored on IPFS, so
        they should not contain any sensitive information (i.e. codes,
        passwords, etc.)

        Only use this with the non-hashed option when the values do not contain
        any sensitive information (i.e. a public whitelist of addresses).
    iChallengeDetails:
      properties:
        leavesDetails:
          $ref: '#/components/schemas/LeavesDetails'
          description: The leaves of the Merkle tree with accompanying details
        tree:
          description: The Merkle tree
        treeOptions:
          description: The Merkle tree options for how to build it
        numLeaves:
          description: >-
            The number of leaves in the Merkle tree. This takes priority over
            leaves.length if defined (used for buffer time between leaf
            generation and leaf length select)
          $ref: '#components/schemas/NumberType'
        currCode:
          description: >-
            The current code being used for the challenge. Used behind the
            scenes
          $ref: '#components/schemas/NumberType'
      required:
        - leavesDetails
      additionalProperties: false
      type: object
    iApprovalInfoDetails:
      properties:
        name:
          description: The name of the claim
          type: string
        description:
          description: >-
            The description of the claim. This describes how to earn and claim
            the badge.
          type: string
        challengeDetails:
          $ref: '#/components/schemas/iChallengeDetails'
          description: The challenge details of the claim / approval
        offChainClaims:
          items:
            properties:
              plugins:
                items: {}
                description: The plugins of the claim / approval
                type: array
              claimId:
                type: string
              manualDistribution:
                type: boolean
            required:
              - plugins
              - claimId
            additionalProperties: false
            type: object
          type: array
      required:
        - name
        - description
      additionalProperties: false
      type: object
    iCosmosCoin:
      properties:
        amount:
          description: The amount of the coin.
          $ref: '#components/schemas/NumberType'
        denom:
          description: The denomination of the coin.
          type: string
      required:
        - amount
        - denom
      additionalProperties: false
      type: object
    EIP712Type:
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type
      additionalProperties: false
      type: object
    JSONObject:
      additionalProperties: {}
      type: object
    FlattenPayloadResponse:
      properties:
        payload:
          $ref: '#/components/schemas/JSONObject'
        numMessages:
          type: number
      required:
        - payload
        - numMessages
      additionalProperties: false
      type: object
    TxContext:
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        sender:
          $ref: '#/components/schemas/Sender'
        fee:
          $ref: '#/components/schemas/Fee'
        memo:
          type: string
      required:
        - chain
        - sender
        - fee
        - memo
      additionalProperties: false
      description: |-
        TxContext is the transaction context for a SignDoc that is independent
        from the transaction payload.
      type: object
    EIP712ToSign:
      properties:
        types:
          type: object
        primaryType:
          type: string
        domain:
          properties:
            name:
              type: string
            version:
              type: string
            chainId:
              type: number
            verifyingContract:
              type: string
            salt:
              type: string
          required:
            - name
            - version
            - chainId
            - verifyingContract
            - salt
          additionalProperties: false
          type: object
        message:
          type: object
      required:
        - types
        - primaryType
        - domain
        - message
      additionalProperties: false
      description: >-
        EI712ToSign represents a signable EIP-712 payload that can be signed
        using MetaMask or Keplr.

        @remarks Evmos uses the EIP-712 protocol to wrap Cosmos SDK Transactions
        for Ethereum signing clients.

        EIP-712 payload signatures can be used interchangeably with standard
        Cosmos SDK signatures.

        Learn more about the  ://eips.ethereum.org/EIPS/eip-712 | EIP-712
        Standard

      type: object
    Fee:
      properties:
        amount:
          type: string
        denom:
          type: string
        gas:
          type: string
      required:
        - amount
        - denom
        - gas
      additionalProperties: false
      description: >-
        Fee represents a Cosmos SDK transaction fee object.

        @remarks Learn more about fees in Evmos from the
         ://docs.cosmos.network/main/basics/gas-fees | Cosmos SDK Fee Docs 
        and the  ://docs.evmos.org/protocol/concepts/gas-and-fees | Evmos Gas
        and Fee Docs

      type: object
    Sender:
      properties:
        accountAddress:
          type: string
        sequence:
          type: number
        accountNumber:
          type: number
        pubkey:
          type: string
      required:
        - accountAddress
        - sequence
        - accountNumber
        - pubkey
      additionalProperties: false
      description: >-
        Sender represents a Cosmos SDK Transaction signer.

        @remarks A sender object is used to populate the Cosmos SDK's SignerInfo
        field,

        which is used to declare transaction signers.

      type: object
    Chain:
      properties:
        chainId:
          type: number
        cosmosChainId:
          type: string
        chain:
          type: string
      required:
        - chainId
        - cosmosChainId
        - chain
      additionalProperties: false
      description: >-
        Chain represents the base chain's chainID.

        @remarks chainId corresponds to a numerical Ethereum ChainID (e.g. 9001)

        cosmosChainId corresponds to a Cosmos SDK string ChainID (e.g.
        'evmos_9001-2'

      type: object
    iUserPermissions:
      properties:
        canUpdateOutgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApprovalPermission'
          description: The list of permissions for updating approved outgoing transfers.
          type: array
        canUpdateIncomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApprovalPermission'
          description: The list of permissions for updating approved incoming transfers.
          type: array
        canUpdateAutoApproveSelfInitiatedOutgoingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: >-
            The permissions for updating auto-approving self-initiated outgoing
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all outgoing transfers that are
            self-initiated.
          type: array
        canUpdateAutoApproveSelfInitiatedIncomingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: >-
            The permissions for updating auto-approving self-initiated incoming
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all incoming transfers that are
            self-initiated.
          type: array
      required:
        - canUpdateOutgoingApprovals
        - canUpdateIncomingApprovals
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      type: object
    iUserOutgoingApprovalPermission:
      properties:
        toListId:
          description: The list ID of the to addresses of the approved outgoing transfers.
          type: string
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved outgoing
            transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved outgoing transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs of the approved outgoing transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved outgoing transfers.
          type: array
        approvalId:
          description: >-
            The approval ID of the approved outgoing transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the approved outgoing transfers.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the approved outgoing transfers.
          type: array
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
      required:
        - toListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
        - toList
        - initiatedByList
      additionalProperties: false
      type: object
    iUserIncomingApprovalPermission:
      properties:
        fromListId:
          description: >-
            The list ID of the from addresses of the approved incoming
            transfers.
          type: string
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved incoming
            transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved incoming transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs of the approved incoming transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved incoming transfers.
          type: array
        approvalId:
          description: >-
            The approval ID of the approved incoming transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the approved incoming transfers.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the approved incoming transfers.
          type: array
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
      required:
        - fromListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
        - fromList
        - initiatedByList
      additionalProperties: false
      type: object
    iCollectionPermissions:
      properties:
        canDeleteCollection:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: The permissions for deleting the collection.
          type: array
        canArchiveCollection:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for archiving the collection.
          type: array
        canUpdateOffChainBalancesMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the off-chain balances metadata.
          type: array
        canUpdateStandards:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the standards.
          type: array
        canUpdateCustomData:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the custom data.
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the manager.
          type: array
        canUpdateCollectionMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the collection metadata.
          type: array
        canCreateMoreBadges:
          items:
            $ref: '#/components/schemas/iBalancesActionPermission'
          description: The permissions for creating more badges.
          type: array
        canUpdateBadgeMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
          description: The permissions for updating the badge metadata.
          type: array
        canUpdateCollectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApprovalPermission'
          description: The permissions for updating the collection approved transfers.
          type: array
      required:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateBadgeMetadata
        - canUpdateCollectionApprovals
      additionalProperties: false
      type: object
    iActionPermission:
      properties:
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
      required:
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iTimedUpdatePermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The timeline times that the permission applies to.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
      required:
        - timelineTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iBalancesActionPermission:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs that the permission applies to.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the permission.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
      required:
        - badgeIds
        - ownershipTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iTimedUpdateWithBadgeIdsPermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The timeline times that the permission applies to.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs that the permission applies to.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
      required:
        - timelineTimes
        - badgeIds
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iCollectionApprovalPermission:
      properties:
        fromListId:
          description: The list ID of the from addresses of the approved transfers.
          type: string
        toListId:
          description: The list ID of the to addresses of the approved transfers.
          type: string
        initiatedByListId:
          description: The list ID of the initiatedBy addresses of the approved transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs of the approved transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved transfers.
          type: array
        approvalId:
          description: >-
            The approval ID of the approved transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of this permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of this permission.
          type: array
      required:
        - fromListId
        - toListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iCollectionApprovalPermissionWithDetails:
      properties:
        fromListId:
          description: The list ID of the from addresses of the approved transfers.
          type: string
        toListId:
          description: The list ID of the to addresses of the approved transfers.
          type: string
        initiatedByListId:
          description: The list ID of the initiatedBy addresses of the approved transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs of the approved transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved transfers.
          type: array
        approvalId:
          description: >-
            The approval ID of the approved transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of this permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of this permission.
          type: array
        toList:
          $ref: '#/components/schemas/iAddressList'
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
      required:
        - fromListId
        - toListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
        - toList
        - fromList
        - initiatedByList
      additionalProperties: false
      type: object
    iCollectionPermissionsWithDetails:
      properties:
        canDeleteCollection:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: The permissions for deleting the collection.
          type: array
        canArchiveCollection:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for archiving the collection.
          type: array
        canUpdateOffChainBalancesMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the off-chain balances metadata.
          type: array
        canUpdateStandards:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the standards.
          type: array
        canUpdateCustomData:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the custom data.
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the manager.
          type: array
        canUpdateCollectionMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the collection metadata.
          type: array
        canCreateMoreBadges:
          items:
            $ref: '#/components/schemas/iBalancesActionPermission'
          description: The permissions for creating more badges.
          type: array
        canUpdateBadgeMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
          description: The permissions for updating the badge metadata.
          type: array
        canUpdateCollectionApprovals:
          allOf:
            - items:
                $ref: '#/components/schemas/iCollectionApprovalPermission'
              description: The permissions for updating the collection approved transfers.
              type: array
            - items:
                $ref: '#/components/schemas/iCollectionApprovalPermissionWithDetails'
              type: array
      required:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateBadgeMetadata
        - canUpdateCollectionApprovals
      additionalProperties: false
      type: object
    iUintRange:
      properties:
        start:
          description: The start of the range.
          $ref: '#components/schemas/NumberType'
        end:
          description: The end of the range, inclusive.
          $ref: '#components/schemas/NumberType'
      required:
        - start
        - end
      additionalProperties: false
      type: object
      example:
        start: '1'
        end: '10'
    iBadgeMetadata:
      properties:
        uri:
          description: The URI where to fetch the badge metadata from.
          type: string
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs corresponding to the URI.
          type: array
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - badgeIds
        - customData
      additionalProperties: false
      type: object
    iCollectionMetadata:
      properties:
        uri:
          description: The URI where to fetch the collection metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iOffChainBalancesMetadata:
      properties:
        uri:
          description: The URI where to fetch the off-chain balances metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iMustOwnBadges:
      properties:
        collectionId:
          description: The collection ID of the badges to own.
          $ref: '#components/schemas/NumberType'
        amountRange:
          $ref: '#/components/schemas/iUintRange'
          description: >-
            The min/max acceptable amount of badges that must be owned (can be
            any values, including 0-0).
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The range of the times that the badges must be owned.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The range of the badge IDs that must be owned.
          type: array
        overrideWithCurrentTime:
          description: Whether or not to override the ownershipTimes with the current time.
          type: boolean
        mustSatisfyForAllAssets:
          description: >-
            Whether or not the user must own all the specified badges. If false,
            we will accept if they meet criteria for at least one badge.
          type: boolean
      required:
        - collectionId
        - amountRange
        - ownershipTimes
        - badgeIds
        - overrideWithCurrentTime
        - mustSatisfyForAllAssets
      additionalProperties: false
      type: object
    iBalance:
      properties:
        amount:
          description: The amount or balance of the owned badge.
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs corresponding to the balance.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times that the badge is owned from.
          type: array
      required:
        - amount
        - badgeIds
        - ownershipTimes
      additionalProperties: false
      type: object
    iAddressList:
      properties:
        listId:
          description: The ID of the address list.
          type: string
        addresses:
          items:
            type: string
          description: The addresses of the address list.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          type: string
        aliasAddress:
          description: The alias cosmos address of the address list.
          type: string
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
      additionalProperties: false
      type: object
    iTransfer:
      properties:
        from:
          description: The address to transfer from.
          type: string
        toAddresses:
          items:
            type: string
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.
          type: boolean
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
    iApprovalIdentifierDetails:
      properties:
        approvalId:
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          description: >-
            The address of the approval to check. If approvalLevel is
            "collection", this is blank "".
          type: string
      required:
        - approvalId
        - approvalLevel
        - approverAddress
      additionalProperties: false
      type: object
    iAmountTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#components/schemas/NumberType'
        amountTrackerId:
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          description: The address of the approval to check.
          type: string
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          type: string
      required:
        - collectionId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
      additionalProperties: false
      type: object
    iMerkleChallenge:
      properties:
        root:
          description: The root of the merkle tree.
          type: string
        expectedProofLength:
          description: The expected proof length of the merkle proof.
          $ref: '#components/schemas/NumberType'
        useCreatorAddressAsLeaf:
          description: >-
            Whether or not to override any leaf value and use the creator
            address as the leaf. Used for whitelist trees.
          type: boolean
        maxUsesPerLeaf:
          description: >-
            Whether or not to enforce max uses per leaf. Used to prevent replay
            attacks.
          $ref: '#components/schemas/NumberType'
        uri:
          description: The URI where to fetch the merkle challenge metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
      required:
        - root
        - expectedProofLength
        - useCreatorAddressAsLeaf
        - maxUsesPerLeaf
        - uri
        - customData
      additionalProperties: false
      type: object
    iMerklePathItem:
      properties:
        aunt:
          description: The aunt of the merkle path item.
          type: string
        onRight:
          description: Indicates whether the aunt node is on the right side of the path.
          type: boolean
      required:
        - aunt
        - onRight
      additionalProperties: false
      type: object
    iMerkleProof:
      properties:
        aunts:
          items:
            $ref: '#/components/schemas/iMerklePathItem'
          description: The aunts of the merkle proof.
          type: array
        leaf:
          description: >-
            The leaf of the merkle proof. If useCreatorAddressAsLeaf is true,
            this will be populated with the creator Cosmos address.
          type: string
      required:
        - aunts
        - leaf
      additionalProperties: false
      type: object
    iTimelineItem:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
      required:
        - timelineTimes
      additionalProperties: false
      type: object
    iManagerTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        manager:
          description: The manager of the collection.
          type: string
      required:
        - timelineTimes
        - manager
      additionalProperties: false
      type: object
    iCollectionMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        collectionMetadata:
          $ref: '#/components/schemas/iCollectionMetadata'
          description: The collection metadata.
      required:
        - timelineTimes
        - collectionMetadata
      additionalProperties: false
      type: object
    iBadgeMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        badgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadata'
          description: The badge metadata.
          type: array
      required:
        - timelineTimes
        - badgeMetadata
      additionalProperties: false
      type: object
    iOffChainBalancesMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        offChainBalancesMetadata:
          $ref: '#/components/schemas/iOffChainBalancesMetadata'
          description: The off-chain balances metadata.
      required:
        - timelineTimes
        - offChainBalancesMetadata
      additionalProperties: false
      type: object
    iCustomDataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        customData:
          description: Arbitrary custom data.
          type: string
      required:
        - timelineTimes
        - customData
      additionalProperties: false
      type: object
    iStandardsTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        standards:
          items:
            type: string
          description: The standards.
          type: array
      required:
        - timelineTimes
        - standards
      additionalProperties: false
      type: object
    iIsArchivedTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        isArchived:
          description: Whether the collection is archived.
          type: boolean
      required:
        - timelineTimes
        - isArchived
      additionalProperties: false
      type: object
    iUserOutgoingApproval:
      properties:
        toListId:
          type: string
        initiatedByListId:
          type: string
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
        approvalId:
          type: string
        amountTrackerId:
          type: string
        challengeTrackerId:
          type: string
        uri:
          type: string
        customData:
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iOutgoingApprovalCriteria'
      required:
        - toListId
        - initiatedByListId
        - toList
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
      additionalProperties: false
      type: object
    iOutgoingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
          description: The list of must own badges to be approved.
          type: array
        merkleChallenge:
          $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          description: The predetermined balances for each transfer.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          description: The max num transfers for this approval.
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
      additionalProperties: false
      type: object
    iPredeterminedBalances:
      properties:
        manualBalances:
          items:
            $ref: '#/components/schemas/iManualBalances'
          description: >-
            Manually define the balances for each transfer. Cannot be used with
            incrementedBalances. Order number corresponds to the index of the
            balance in the array.
          type: array
        incrementedBalances:
          $ref: '#/components/schemas/iIncrementedBalances'
          description: >-
            Define a starting balance and increment the badge IDs and owned
            times by a certain amount after each transfer. Cannot be used with
            manualBalances. Order number corresponds to number of times we
            increment.
        orderCalculationMethod:
          $ref: '#/components/schemas/iPredeterminedOrderCalculationMethod'
          description: The order calculation method.
      required:
        - manualBalances
        - incrementedBalances
        - orderCalculationMethod
      additionalProperties: false
      type: object
    iManualBalances:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The list of balances for each transfer. Order number corresponds to
            the index of the balance in the array.
          type: array
      required:
        - balances
      additionalProperties: false
      type: object
    iIncrementedBalances:
      properties:
        startBalances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The starting balances for each transfer. Order number corresponds to
            the number of times we increment.
          type: array
        incrementBadgeIdsBy:
          description: The amount to increment the badge IDs by after each transfer.
          $ref: '#components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: The amount to increment the owned times by after each transfer.
          $ref: '#components/schemas/NumberType'
      required:
        - startBalances
        - incrementBadgeIdsBy
        - incrementOwnershipTimesBy
      additionalProperties: false
      type: object
    iPredeterminedOrderCalculationMethod:
      properties:
        useOverallNumTransfers:
          description: >-
            Use the overall number of transfers this approval has been used with
            as the order number. Ex: If this approval has been used 2 times by
            ANY address, then the order number for the next transfer will be 3.
          type: boolean
        usePerToAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each to
            address as the order number. Ex: If this approval has been used 2
            times by to address A, then the order number for the next transfer
            by to address A will be 3.
          type: boolean
        usePerFromAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each from
            address as the order number. Ex: If this approval has been used 2
            times by from address A, then the order number for the next transfer
            by from address A will be 3.
          type: boolean
        usePerInitiatedByAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each
            initiated by address as the order number. Ex: If this approval has
            been used 2 times by initiated by address A, then the order number
            for the next transfer by initiated by address A will be 3.
          type: boolean
        useMerkleChallengeLeafIndex:
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: boolean
      required:
        - useOverallNumTransfers
        - usePerToAddressNumTransfers
        - usePerFromAddressNumTransfers
        - usePerInitiatedByAddressNumTransfers
        - useMerkleChallengeLeafIndex
      additionalProperties: false
      type: object
    iApprovalAmounts:
      properties:
        overallApprovalAmount:
          description: >-
            The overall maximum amount approved for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#components/schemas/NumberType'
        perToAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each to address. Running tally that includes all transfers from each
            unique to address that match this approval.
          $ref: '#components/schemas/NumberType'
        perFromAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each from address. Running tally that includes all transfers from
            each unique from address that match this approval.
          $ref: '#components/schemas/NumberType'
        perInitiatedByAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each initiated by address. Running tally that includes all transfers
            from each unique initiated by address that match this approval.
          $ref: '#components/schemas/NumberType'
      required:
        - overallApprovalAmount
        - perToAddressApprovalAmount
        - perFromAddressApprovalAmount
        - perInitiatedByAddressApprovalAmount
      additionalProperties: false
      type: object
    iMaxNumTransfers:
      properties:
        overallMaxNumTransfers:
          description: >-
            The overall maximum number of transfers for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#components/schemas/NumberType'
        perToAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each to address. Running tally that includes all transfers from
            each unique to address that match this approval.
          $ref: '#components/schemas/NumberType'
        perFromAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each from address. Running tally that includes all transfers
            from each unique from address that match this approval.
          $ref: '#components/schemas/NumberType'
        perInitiatedByAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each initiated by address. Running tally that includes all
            transfers from each unique initiated by address that match this
            approval.
          $ref: '#components/schemas/NumberType'
      required:
        - overallMaxNumTransfers
        - perToAddressMaxNumTransfers
        - perFromAddressMaxNumTransfers
        - perInitiatedByAddressMaxNumTransfers
      additionalProperties: false
      type: object
    iUserIncomingApproval:
      properties:
        fromListId:
          description: The list ID for the user(s) who is sending the badges.
          type: string
        initiatedByListId:
          description: The list ID for the user(s) who initiate the transfer.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the transfer transaction.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs to be transferred.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The ownership times of the badges being transferred.
          type: array
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
        challengeTrackerId:
          description: >-
            The ID of the challenge tracker. This is the key used to track used
            leaves for challenges.
          type: string
        uri:
          description: The URI of the approval.
          type: string
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iIncomingApprovalCriteria'
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
      required:
        - fromListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - fromList
        - initiatedByList
      additionalProperties: false
      type: object
    iIncomingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
          description: The list of must own badges to be approved.
          type: array
        merkleChallenge:
          $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          description: The predetermined balances for each transfer using this approval.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          description: The max num transfers for this approval.
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
      additionalProperties: false
      type: object
    iCollectionApproval:
      properties:
        toListId:
          description: The list ID for the user(s) who is receiving the badges.
          type: string
        fromListId:
          description: The list ID for the user(s) who is sending the badges.
          type: string
        initiatedByListId:
          description: The list ID for the user(s) who initiate the transfer.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the transfer transaction.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs to be transferred.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The ownership times of the badges being transferred.
          type: array
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
        challengeTrackerId:
          description: >-
            The ID of the challenge tracker. This is the key used to track used
            leaves for challenges.
          type: string
        uri:
          description: The URI of the approval.
          type: string
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iApprovalCriteria'
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
        details:
          $ref: '#/components/schemas/iApprovalInfoDetails'
        toList:
          $ref: '#/components/schemas/iAddressList'
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
      required:
        - toListId
        - fromListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - toList
        - fromList
        - initiatedByList
      additionalProperties: false
      type: object
    iApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
          description: The list of must own badges to be approved.
          type: array
        merkleChallenge:
          $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          description: The predetermined balances for each transfer.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          description: The max num transfers for this approval.
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
        overridesFromOutgoingApprovals:
          description: >-
            Whether this approval overrides the from address's approved outgoing
            transfers.
          type: boolean
        overridesToIncomingApprovals:
          description: >-
            Whether this approval overrides the to address's approved incoming
            transfers.
          type: boolean
      additionalProperties: false
      type: object
    iUserBalanceStore:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      description: >-
        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.

      type: object
