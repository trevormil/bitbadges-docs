openapi: '3.1.0'
info:
  title: BitBadges API
  version: '0.1'
servers:
  - url: https://api.bitbadges.io/api/v0
paths:
  /status:
    post:
      operationId: getStatus
      summary: Get Status
      description: |
        Gets the current status details about the blockchain / indexer (gas, block height, etc).
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetStatusRouteSuccessResponse'
          description: Returns the current status of the blockchain / indexer

        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /search/{searchValue}:
    post:
      operationId: searchByValue
      summary: Search
      description: |
        Searches for collections, badges, accounts, and address lists based on the provided search value.
      parameters:
        - name: searchValue
          in: path
          description: The value to search for.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSearchRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSearchRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/batch:
    post:
      operationId: getCollectionsBatch
      summary: Get Collections
      description: Retrieves badge collections and associated details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCollectionBatchRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionBatchRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /collection/{collectionId}/{badgeId}/owners:
    post:
      operationId: getOwnersForBadge
      summary: Get Specific Badge Owners
      description: Retrieves the owners for a specific badge in a collection.
      parameters:
        - name: collectionId
          in: path
          description: The numeric collection ID.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The numeric badge ID to retrieve owners for.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOwnersForBadgeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetOwnersForBadgeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/balance/{cosmosAddress}:
    post:
      operationId: getBadgeBalanceByAddress
      summary: Get Balance by Address
      description: Retrieves the balance of a specific collection for a specific address.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: cosmosAddress
          in: path
          description: The Cosmos address for which the badge balance is to be retrieved.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeBalanceByAddressRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeBalanceByAddressRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/{badgeId}/activity:
    post:
      operationId: getBadgeActivity
      summary: Retrieve activity for a badge
      description: Retrieves the activity for a specific badge in a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID of the badge for which activity is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeActivityRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeActivityRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/refresh:
    post:
      operationId: refreshMetadata
      summary: Trigger metadata refresh for a collection
      description: |
        Triggers a metadata refresh for a specific collection. BitBadges API uses a refresh queue system for fetching anything off-chain.
        This will refetch any details for the collection (such as metadata, balances, approval details, etc). Note it will reject if recently refreshed.
        Uses a cooldown of 5 minutes.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection to trigger metadata refresh.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshMetadataRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshMetadataRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /claims/{claimId}/{cosmosAddress}:
    post:
      operationId: checkAndCompleteClaim
      summary: Check and complete claim
      description: |
        Completes a claim for a user. This will check if the claim is valid and that all criteria is satisfied. If so, we perform the claim action.
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: cosmosAddress
          in: path
          description: The Cosmos address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckAndCompleteClaimRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckAndCompleteClaimRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /deleteReview/{reviewId}:
    post:
      operationId: deleteReview
      summary: Delete a review
      description: Deletes a review.
      parameters:
        - name: reviewId
          in: path
          description: The ID of the review to be deleted.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteReviewRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteReviewRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /collection/{collectionId}/addReview:
    post:
      operationId: addReviewForCollection
      summary: Add a review for a collection
      description: Adds a new review for a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection for which the review is being added.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewForCollectionRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddReviewForCollectionRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /user/batch:
    post:
      operationId: getAccounts
      summary: Get accounts and details
      description: Retrieves accounts and accompanying details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /user/{addressOrUsername}/addReview:
    post:
      operationId: addReviewForUser
      summary: Add a review for a user
      description: Adds a review for a user.
      parameters:
        - name: addressOrUsername
          in: path
          description: The address or username of the user for whom the review is being added.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewForUserRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddReviewForUserRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /user/updateAccount:
    post:
      operationId: updateAccountInfo
      summary: Update user account information
      description: Updates the profile/account information for a user. Only the provided fields will be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInfoRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAccountInfoRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /addBalancesToOffChainStorage:
    post:
      operationId: addBalancesToOffChainStorage
      summary: Add balance map to off-chain storage
      description: Adds a balance map to off-chain storage. Mode can either be 'ipfs' for storing on IPFS or 'centralized' for storing on DigitalOcean.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBalancesToOffChainStorageRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddBalancesToOffChainStorageRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /addMetadataToIpfs:
    post:
      operationId: addMetadataToIpfs
      summary: Add metadata to IPFS
      description: Adds metadata to IPFS.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMetadataToIpfsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddMetadataToIpfsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /addApprovalDetailsToOffChainStorage:
    post:
      operationId: addApprovalDetailsToOffChainStorage
      summary: Add approval details to off-chain storage
      description: Adds approval details to off-chain storage.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddApprovalDetailsToOffChainStorageRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddApprovalDetailsToOffChainStorageRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /auth/getChallenge:
    post:
      operationId: getSignInChallenge
      summary: Get Blockin sign-in challenge
      description: Gets the Blockin sign-in challenge to be signed for authentication. The returned blockinMessage is the message to be signed by the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSignInChallengeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSignInChallengeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/verify:
    post:
      operationId: verifySignIn
      summary: Verify user sign-in
      description: Verifies the user-signed challenge and grants them a valid session if everything checks out.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySignInRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iVerifySignInRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/status:
    post:
      operationId: checkIfSignedIn
      summary: Check user sign-in status
      description: Checks if the user is signed in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckSignInStatusRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckSignInStatusRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/logout:
    post:
      operationId: signOut
      summary: Sign out user
      description: Signs the user out.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSignOutSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /browse:
    post:
      operationId: getBrowseCollections
      summary: Get browse collections
      description: Gets details for a browse/explore page.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBrowseCollectionsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBrowseCollectionsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /broadcast:
    post:
      operationId: broadcastTx
      summary: Broadcast transaction
      description: Broadcasts a transaction to the blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BroadcastTxRouteRequestBody'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBroadcastTxRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /simulate:
    post:
      operationId: simulateTx
      summary: Simulate transaction
      description: Simulates a transaction on the blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SimulateTxRouteRequestBody'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateTxRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /metadata:
    post:
      operationId: fetchMetadataDirectly
      summary: Fetch metadata directly from IPFS
      description: Fetches arbitrary metadata directly from IPFS. This is useful for fetching metadata that is not stored on-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchMetadataDirectlyRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFetchMetadataDirectlyRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - frontendOnly: []
  /addressList/update:
    post:
      operationId: updateAddressLists
      summary: Update address lists
      description: Updatess address lists stored by BitBadges centralized servers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userIsOwner: []
        - userSignedIn: []
  /addressList/create:
    post:
      operationId: createAddressLists
      summary: Creates address lists
      description: Creates address lists stored by BitBadges centralized servers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userIsOwner: []
        - userSignedIn: []
  /addressList:
    post:
      operationId: getAddressLists
      summary: Get address lists
      description: Gets address lists. Can be on-chain or off-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /addressList/delete:
    post:
      operationId: deleteAddressLists
      summary: Delete address lists
      description: Deletes address lists. Must be created off-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userIsOwner: []
        - userSignedIn: []
  /authCode:
    post:
      operationId: getAuthCode
      summary: Get Blockin authentication code
      description: Gets a Blockin authentication code. This is used for signing in with Blockin at in-person events. Anyone with the signature is able to fetch the preimage message.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /authCode/create:
    post:
      operationId: createAuthCode
      summary: Create Blockin authentication code
      description: Creates a Blockin authentication code. This is used for signing in with Blockin at in-person events.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /authCode/delete:
    post:
      operationId: deleteAuthCode
      summary: Delete Blockin authentication code
      description: Deletes a Blockin authentication code. This is used for signing in with Blockin at in-person events.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /auth/verifyGeneric:
    post:
      operationId: verifySignInGeneric
      summary: Verify Blockin sign-in requests (generic)
      description: A generic route for verifying Blockin sign-in requests. Used as a helper if implementing Blockin on your own.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericBlockinVerifyRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenericBlockinVerifyRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /sendClaimAlerts:
    post:
      operationId: sendClaimAlert
      summary: Sends claim alert notifications
      description: Sends claim alert notifications out.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendClaimAlertsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSendClaimAlertsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /getFollowDetails:
    post:
      operationId: getFollowDetails
      summary: Gets follow details for a user
      description: Gets the follow details for a user with the BitBadges follow protocol.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFollowDetailsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetFollowDetailsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /getClaimAlerts:
    post:
      operationId: getClaimAlerts
      summary: Gets claim alerts for a collection
      description: Gets claim alerts for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimAlertsForCollectionRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAlertsForCollectionRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
        - userSignedIn: []
        - userIsManager: []
  /getRefreshStatus:
    post:
      operationId: getRefreshStatus
      summary: Gets the refresh status for a collection
      description: Gets the refresh status for a collection. Used to track if any errors occur during a refresh, or if it is in the queue or not.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NumberType'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshStatusRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /maps:
    post:
      operationId: getMaps
      summary: Get maps
      description: Gets maps for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMapsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /secret:
    post:
      operationId: getSecret
      summary: Get secret
      description: Gets a secret for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSecretRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSecretRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /secret/create:
    post:
      operationId: createSecret
      summary: Create secret
      description: Creates a secret for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateSecretRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /secret/update:
    post:
      operationId: updateSecret
      summary: Update secret
      description: Updates a secret for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSecretRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateSecretRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /secret/delete:
    post:
      operationId: deleteSecret
      summary: Delete secret
      description: Deletes a secret for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSecretRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteSecretRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []

  /filterBadgesInCollection:
    post:
      operationId: filterBadgesInCollection
      summary: Filter badges in a collection based on multiple filter values
      description: Filter badges in a collection based on multiple filter values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterBadgesInCollectionRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFilterBadgesInCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /appleWalletPass:
    post:
      operationId: generateAppleWalletPass
      summary: Generate an Apple Wallet pass
      description: |
        Generate an Apple Wallet pass based on the provided request body. 
        ```tsx
         <a
              onClick={async () => {
                const res = await BitBadgesApi.generateAppleWalletPass({
                  name: authCode.name,
                  description: authCode.description,
                  signature: authCode.signature,
                  message: createChallenge(authCode.params)
                });
                const pass = Buffer.from(res.data);

                const blob = new Blob([pass], { type: 'application/vnd.apple.pkpass' });
                const url = window.URL.createObjectURL(blob);
                if (url) {
                  const link = document.createElement('a');
                  link.href = url;
                  link.download = 'bitbadges.pkpass';
                  link.click();
                }
              }}>
              <img src="/images/add_to_apple_wallet.svg" style={{ width: 150 }} />
            </a>
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAppleWalletPassRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateAppleWalletPassRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /claims:
    post:
      operationId: getClaims
      summary: Retrieve claims
      description: Retrieve claims based on the provided request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
        - userMaybeSignedIn: []
components:
  responses:
    ErrorResponse:
      description: An error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestResponse:
      description: Bad Request - Invalid configuration or request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedResponse:
      description: Unauthorized - Does not meet authnetication requirements. This can be due to an invalid API key, CORS origin, or session cookie.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: Requires a BitBadges API key for requests
      x-type: string
    frontendOnly:
      type: apiKey
      in: header
      name: Origin
      description: Can only be called by the official BitBadges frontend. Not for developer use.
    userSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in with a valid session.
    userMaybeSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in for certain requests, but not all.
    userIsManager:
      type: http
      scheme: cookie
      description: User must be signed in and have manager permissions.
    userIsOwner:
      type: http
      scheme: cookie
      description: User must be signed in and have owner permissions.
  schemas:
    NumberType:
      anyOf:
        - type: string
        - type: number
      example: '1'
      description: String numbers are always returned to avoid precision loss. You may pass in request bodies as numbers or strings. See SDK docs for NumberType conversions.
    # -------------------------------------------------------------COPIED FROM JS SCRIPT-------------------------------------------------------------
    SupportedChain:
      enum:
        - Bitcoin
        - Ethereum
        - Cosmos
        - Solana
        - Unknown
      type: string
      description: ''
    AssetDetails:
      properties:
        chain:
          type: string
          description: ''
        collectionId:
          $ref: '#/components/schemas/NumberType'
          description: ''
        assetIds:
          items:
            anyOf:
              - type: string
                description: ''
              - $ref: '#/components/schemas/iUintRange'
                description: ''
            description: ''
          type: array
          description: ''
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          type: array
          description: ''
        mustOwnAmounts:
          $ref: '#/components/schemas/iUintRange'
          description: ''
        additionalCriteria:
          type: string
          description: ''
        description: ''
      required:
        - chain
        - collectionId
        - assetIds
        - ownershipTimes
        - mustOwnAmounts
      additionalProperties: false
      type: object
      description: ''
    AndGroup:
      properties:
        $and:
          items:
            $ref: '#/components/schemas/AssetConditionGroup'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - $and
      additionalProperties: false
      type: object
      description: ''
    OrGroup:
      properties:
        $or:
          items:
            $ref: '#/components/schemas/AssetConditionGroup'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - $or
      additionalProperties: false
      type: object
      description: ''
    AssetConditionGroup:
      anyOf:
        - $ref: '#/components/schemas/AndGroup'
          description: ''
        - $ref: '#/components/schemas/OrGroup'
          description: ''
        - $ref: '#/components/schemas/OwnershipRequirements'
          description: ''
      description: ''
    OwnershipRequirements:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/AssetDetails'
            description: ''
          type: array
          description: ''
        options:
          properties:
            numMatchesForVerification:
              $ref: '#/components/schemas/NumberType'
              description: ''
            description: ''
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - assets
      additionalProperties: false
      type: object
      description: ''
    ChallengeParams:
      properties:
        domain:
          type: string
          description: ''
        statement:
          type: string
          description: ''
        address:
          type: string
          description: ''
        uri:
          type: string
          description: ''
        nonce:
          type: string
          description: ''
        version:
          type: string
          description: ''
        chainId:
          type: string
          description: ''
        issuedAt:
          type: string
          description: ''
        expirationDate:
          type: string
          description: ''
        notBefore:
          type: string
          description: ''
        resources:
          items:
            type: string
            description: ''
          type: array
          description: ''
        assetOwnershipRequirements:
          $ref: '#/components/schemas/AssetConditionGroup'
          description: ''
        description: ''
      required:
        - domain
        - statement
        - address
        - uri
        - nonce
      additionalProperties: false
      type: object
      description: ''
    VerifyChallengeOptions:
      properties:
        expectedChallengeParams:
          properties:
            domain:
              type: string
              description: ''
            statement:
              type: string
              description: ''
            address:
              type: string
              description: ''
            uri:
              type: string
              description: ''
            nonce:
              type: string
              description: ''
            version:
              type: string
              description: ''
            chainId:
              type: string
              description: ''
            issuedAt:
              type: string
              description: ''
            expirationDate:
              type: string
              description: ''
            notBefore:
              type: string
              description: ''
            resources:
              items:
                type: string
                description: ''
              type: array
              description: ''
            assetOwnershipRequirements:
              $ref: '#/components/schemas/AssetConditionGroup'
              description: ''
            description: ''
          additionalProperties: false
          description: >-
            Optionally define the expected details to check. If the challenge
            was edited and the details

            do not match, the challenge will fail verification.
          type: object
        balancesSnapshot:
          description: >-
            For verification of assets, instead of dynamically fetching the
            assets, you can specify a snapshot of the assets.


            This is useful if you have a snapshot, balances will not change, or
            you are verifying in an offline manner.
          type: object
        skipTimestampVerification:
          description: >-
            If true, we do not check timestamps (expirationDate / notBefore).
            This is useful if you are verifying a challenge that is expected to
            be verified at a future time.
          type: boolean
        skipAssetVerification:
          description: >-
            If true, we do not check asset ownership. This is useful if you are
            verifying a challenge that is expected to be verified at a future
            time.
          type: boolean
        earliestIssuedAt:
          description: >-
            The earliest issued At ISO date string that is valid. For example,
            if you want to verify a challenge that was issued within the last
            minute, you can specify this to be 1 minute ago.
          type: string
        issuedAtTimeWindowMs:
          description: >-
            If set, we will verify the issuedAt is within this amount of ms ago
            (i.e. issuedAt >= Date.now() - issuedAtTimeWindowMs)
          type: number
        skipSignatureVerification:
          description: >-
            If true, we do not check the signature. You can pass in an undefined
            ChainDriver
          type: boolean
        description: ''
      additionalProperties: false
      type: object
      description: ''
    Doc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        description: ''
      required:
        - _docId
      additionalProperties: false
      type: object
      description: ''
    ErrorResponse:
      properties:
        error:
          description: >-
            Serialized error object for debugging purposes. Technical users can
            use this to debug issues.
        errorMessage:
          description: >-
            UX-friendly error message that can be displayed to the user. Always
            present if error.
          type: string
        unauthorized:
          description: Authentication error. Present if the user is not authenticated.
          type: boolean
        description: ''
      required:
        - errorMessage
      additionalProperties: false
      description: >-
        If an error occurs, the response will be an ErrorResponse.


        400 - Bad Request (e.g. invalid request body)

        401 - Unauthorized (e.g. invalid session cookie; must sign in with
        Blockin)

        500 - Internal Server Error
      type: object
    PaginationInfo:
      properties:
        bookmark:
          type: string
          description: ''
        hasMore:
          type: boolean
          description: ''
        description: ''
      required:
        - bookmark
        - hasMore
      additionalProperties: false
      description: Type for pagination information.
      type: object
    iUpdateHistory:
      properties:
        txHash:
          type: string
          description: ''
        block:
          $ref: '#/components/schemas/NumberType'
          description: ''
        blockTimestamp:
          $ref: '#/components/schemas/NumberType'
          description: ''
        timestamp:
          $ref: '#/components/schemas/NumberType'
          description: ''
        description: ''
      required:
        - txHash
        - block
        - blockTimestamp
        - timestamp
      additionalProperties: false
      type: object
      description: ''
    ErrorDoc:
      properties:
        _docId:
          type: string
          description: ''
        _id:
          type: string
          description: ''
        error:
          type: string
          description: ''
        function:
          type: string
          description: ''
        description: ''
      required:
        - _docId
        - error
        - function
      additionalProperties: false
      type: object
      description: ''
    iSocialConnections:
      properties:
        discord:
          properties:
            username:
              type: string
              description: ''
            id:
              type: string
              description: ''
            discriminator:
              type: string
              description: ''
            lastUpdated:
              $ref: '#/components/schemas/NumberType'
              description: ''
            description: ''
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
          description: ''
        twitter:
          properties:
            username:
              type: string
              description: ''
            id:
              type: string
              description: ''
            lastUpdated:
              $ref: '#/components/schemas/NumberType'
              description: ''
            description: ''
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
          description: ''
        google:
          properties:
            username:
              type: string
              description: ''
            id:
              type: string
              description: ''
            lastUpdated:
              $ref: '#/components/schemas/NumberType'
              description: ''
            description: ''
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
          description: ''
        github:
          properties:
            username:
              type: string
              description: ''
            id:
              type: string
              description: ''
            lastUpdated:
              $ref: '#/components/schemas/NumberType'
              description: ''
            description: ''
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
          description: ''
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iNotificationPreferences:
      properties:
        email:
          type: string
          description: ''
        emailVerification:
          $ref: '#/components/schemas/iEmailVerificationStatus'
          description: ''
        preferences:
          properties:
            listActivity:
              type: boolean
              description: ''
            transferActivity:
              type: boolean
              description: ''
            claimAlerts:
              type: boolean
              description: ''
            description: ''
          additionalProperties: false
          type: object
          description: ''
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iEmailVerificationStatus:
      properties:
        verified:
          description: Whether or not the email has been verified.
          type: boolean
        token:
          description: >-
            The email verification token. This is used for verification and
            unsubscription.
          type: string
        expiry:
          description: The expiry of the token for verification purposes.
          $ref: '#/components/schemas/NumberType'
        antiPhishingCode:
          description: >-
            A unique code that we will send with all emails to verify that
            BitBadges is the one sending the email.
          type: string
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity. UNIX milliseconds.
          $ref: '#/components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        description: ''
      required:
        - _docId
        - timestamp
        - block
      additionalProperties: false
      description: ''
      type: object
    iReviewDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity. UNIX milliseconds.
          $ref: '#/components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        review:
          description: The review text (max 2048 characters).
          type: string
        stars:
          description: The number of stars given (1-5).
          $ref: '#/components/schemas/NumberType'
        from:
          description: The Cosmos address of the user who gave the review.
          type: string
        collectionId:
          description: >-
            The collection ID of the collection that was reviewed. Only
            applicable to collection reviews.
          $ref: '#/components/schemas/NumberType'
        reviewedAddress:
          description: >-
            The Cosmos address of the user who the review is for. Only
            applicable to user reviews.
          type: string
        description: ''
      required:
        - _docId
        - timestamp
        - block
        - review
        - stars
        - from
      additionalProperties: false
      description: ''
      type: object
    iTransferActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity. UNIX milliseconds.
          $ref: '#/components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        to:
          items:
            type: string
            description: ''
          description: The list of recipients in Cosmos address format.
          type: array
        from:
          description: The sender's Cosmos address.
          type: string
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: The list of balances and badge IDs that were transferred.
          type: array
        collectionId:
          description: The collection ID for the badges that was transferred.
          $ref: '#/components/schemas/NumberType'
        memo:
          description: The memo of the transfer.
          type: string
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: Which approval to use to precalculate the balances?
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
            description: ''
          description: >-
            The prioritized approvals of the transfer. This is used to check
            certain approvals before others to ensure intended behavior.
          type: array
        onlyCheckPrioritizedApprovals:
          description: >-
            Whether or not to only check prioritized approvals? If false, we
            will still check all approvals but prioritize the prioritized
            approvals.
          type: boolean
        initiatedBy:
          description: >-
            The Cosmos address of the user who initiated the transfer
            transaction.
          type: string
        txHash:
          description: The transaction hash of the activity.
          type: string
        description: ''
      required:
        - _docId
        - timestamp
        - block
        - to
        - from
        - balances
        - collectionId
        - initiatedBy
      additionalProperties: false
      description: ''
      type: object
    iListActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity. UNIX milliseconds.
          $ref: '#/components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        listId:
          description: The list ID.
          type: string
        addedToList:
          description: Whether or not the address was added to the list or removed.
          type: boolean
        addresses:
          items:
            type: string
            description: ''
          description: The list of addresses that were added or removed from the list.
          type: array
        txHash:
          description: The transaction hash of the activity.
          type: string
        description: ''
      required:
        - _docId
        - timestamp
        - block
        - listId
      additionalProperties: false
      description: ''
      type: object
    iClaimAlertDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity. UNIX milliseconds.
          $ref: '#/components/schemas/NumberType'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        from:
          description: The sender
          type: string
        code:
          description: The code of the claim alert.
          type: string
        cosmosAddresses:
          items:
            type: string
            description: ''
          description: The cosmos addresses of the users that have been alerted.
          type: array
        collectionId:
          description: The collection ID of the claim alert.
          $ref: '#/components/schemas/NumberType'
        message:
          description: The message of the claim alert.
          type: string
        description: ''
      required:
        - _docId
        - timestamp
        - block
        - from
        - cosmosAddresses
        - collectionId
      additionalProperties: false
      description: ''
      type: object
    iCollectionDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
            description: ''
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
            description: ''
          description: The badge metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Non-Public
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Non-Public, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
            description: ''
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
            description: ''
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          description: The manager timeline
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
            description: ''
          description: The collection approved transfers timeline
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
            description: ''
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
            description: ''
          description: The is archived timeline
          type: array
        createdBy:
          description: The cosmos address of the user who created this collection
          type: string
        createdBlock:
          description: The block number when this collection was created
          $ref: '#/components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          description: The update history of this collection
          type: array
        aliasAddress:
          description: The alias cosmos address for the collection
          type: string
        description: ''
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
      additionalProperties: false
      description: ''
      type: object
    iAccountDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        publicKey:
          description: The public key of the account
          type: string
        accountNumber:
          description: The account number of the account
          $ref: '#/components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        cosmosAddress:
          description: The Cosmos address of the account
          type: string
        ethAddress:
          description: The Eth address of the account
          type: string
        solAddress:
          description: The Solana address of the account
          type: string
        btcAddress:
          description: The Bitcoin address of the account
          type: string
        sequence:
          description: The sequence of the account
          $ref: '#/components/schemas/NumberType'
        balance:
          $ref: '#/components/schemas/iCosmosCoin'
          description: The balance of the account
        description: ''
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - cosmosAddress
        - ethAddress
        - solAddress
        - btcAddress
      additionalProperties: false
      description: ''
      type: object
    iCustomLink:
      properties:
        url:
          type: string
          description: ''
        image:
          type: string
          description: ''
        description: ''
      required:
        - title
        - url
        - image
      additionalProperties: false
      description: CustomLinks are custom links that can be added to a profile.
      type: object
    iCustomPage:
      properties:
        description:
          type: string
          description: ''
        items:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            description: ''
          type: array
          description: ''
      required:
        - title
        - description
        - items
      additionalProperties: false
      type: object
      description: ''
    iCustomListPage:
      properties:
        description:
          type: string
          description: ''
        items:
          items:
            type: string
            description: ''
          type: array
          description: ''
      required:
        - title
        - description
        - items
      additionalProperties: false
      description: >-
        CustomListPage is a custom list page that can be added to a profile. The
        items are valid list IDs.
      type: object
    iProfileDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#/components/schemas/NumberType'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
            description: ''
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            description: ''
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
            description: ''
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                description: ''
              type: array
              description: ''
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - badges
            - lists
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                description: ''
              type: array
              description: ''
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          $ref: '#/components/schemas/SupportedChain'
          description: The latest chain the user signed in with
        solAddress:
          description: >-
            The Solana address of the profile, if applicable (bc we need it to
            convert)
          type: string
        notifications:
          $ref: '#/components/schemas/iNotificationPreferences'
          description: The notifications of the account
        socialConnections:
          $ref: '#/components/schemas/iSocialConnections'
          description: Social connections stored for the account
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                  description: ''
                discriminator:
                  type: string
                  description: ''
                id:
                  type: string
                  description: ''
                description: ''
              required:
                - username
                - id
              additionalProperties: false
              type: object
              description: ''
            description: ''
          additionalProperties: false
          description: Approved ways to sign in (rather than Blockin)
          type: object
        description: ''
      required:
        - _docId
      additionalProperties: false
      description: ''
      type: object
    iQueueDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        uri:
          description: >-
            The URI of the metadata to be fetched. If {id} is present, it will
            be replaced with each individual ID in badgeIds
          type: string
        collectionId:
          description: The collection ID of the metadata to be fetched
          $ref: '#/components/schemas/NumberType'
        loadBalanceId:
          description: >-
            The load balance ID of the metadata to be fetched. Only the node
            with the same load balance ID will fetch this metadata
          $ref: '#/components/schemas/NumberType'
        refreshRequestTime:
          description: >-
            The timestamp of when this metadata was requested to be refreshed
            (milliseconds since epoch)
          $ref: '#/components/schemas/NumberType'
        numRetries:
          description: >-
            The number of times this metadata has been tried to be fetched but
            failed
          $ref: '#/components/schemas/NumberType'
        lastFetchedAt:
          description: >-
            The timestamp of when this metadata was last fetched (milliseconds
            since epoch)
          $ref: '#/components/schemas/NumberType'
        error:
          description: The error message if this metadata failed to be fetched
          type: string
        deletedAt:
          description: >-
            The timestamp of when this document was deleted (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        nextFetchTime:
          description: >-
            The timestamp of when this document should be fetched next
            (milliseconds since epoch)
          $ref: '#/components/schemas/NumberType'
        emailMessage:
          type: string
          description: ''
        recipientAddress:
          type: string
          description: ''
        activityDocId:
          type: string
          description: ''
        notificationType:
          type: string
          description: ''
        description: ''
      required:
        - _docId
        - uri
        - collectionId
        - loadBalanceId
        - refreshRequestTime
        - numRetries
      additionalProperties: false
      description: ''
      type: object
    iIndexerStatus:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
          description: ''
        description: ''
      required:
        - status
      additionalProperties: false
      type: object
      description: ''
    iLatestBlockStatus:
      properties:
        height:
          description: The height of the latest block
          $ref: '#/components/schemas/NumberType'
        txIndex:
          description: The transaction index of the latest block
          $ref: '#/components/schemas/NumberType'
        timestamp:
          description: The timestamp of the latest block (milliseconds since epoch)
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - height
        - txIndex
        - timestamp
      additionalProperties: false
      type: object
      description: ''
    iStatusDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        block:
          $ref: '#/components/schemas/iLatestBlockStatus'
          description: The latest synced block status (i.e. height, txIndex, timestamp)
        nextCollectionId:
          description: The next collection ID to be used
          $ref: '#/components/schemas/NumberType'
        gasPrice:
          description: The current gas price based on the average of the lastXGasAmounts
          type: number
        lastXGasAmounts:
          items:
            $ref: '#/components/schemas/NumberType'
            description: ''
          description: The last X gas prices
          type: array
        lastXGasLimits:
          items:
            $ref: '#/components/schemas/NumberType'
            description: ''
          description: The last X gas limits
          type: array
        description: ''
      required:
        - _docId
        - block
        - nextCollectionId
        - gasPrice
        - lastXGasAmounts
        - lastXGasLimits
      additionalProperties: false
      description: ''
      type: object
    iAddressListEditKey:
      properties:
        key:
          description: The key that can be used to edit the address list
          type: string
        expirationDate:
          description: The expiration date of the key (milliseconds since epoch)
          $ref: '#/components/schemas/NumberType'
        mustSignIn:
          description: True if the user can only add their signed in address to the list
          type: boolean
        description: ''
      required:
        - key
        - expirationDate
      additionalProperties: false
      type: object
      description: ''
    iAddressListDoc:
      properties:
        listId:
          description: The ID of the address list.
          type: string
        addresses:
          items:
            type: string
            description: ''
          description: The addresses of the address list.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          type: string
        aliasAddress:
          description: The alias cosmos address of the address list.
          type: string
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          description: The update history of this list
          type: array
        createdBlock:
          description: The block number when this list was created
          $ref: '#/components/schemas/NumberType'
        lastUpdated:
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        nsfw:
          properties:
            reason:
              type: string
              description: ''
            description: ''
          required:
            - reason
          additionalProperties: false
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              type: string
              description: ''
            description: ''
          required:
            - reason
          additionalProperties: false
          description: The reported reason if this list is reported
          type: object
        private:
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
        description: ''
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
      additionalProperties: false
      description: ''
      type: object
    iBalanceDoc:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
            description: ''
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
            description: ''
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#/components/schemas/NumberType'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#/components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          description: The update history of this balance
          type: array
        description: ''
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    ClaimIntegrationPluginType:
      enum:
        - password
        - numUses
        - discord
        - codes
        - github
        - google
        - twitter
        - transferTimes
        - requiresProofOfAddress
        - whitelist
        - mustOwnBadges
        - api
        - email
      type: string
      description: ''
    iClaimBuilderDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        cid:
          description: The CID of the password document
          type: string
        createdBy:
          description: The cosmos address of the user who created this password
          type: string
        docClaimed:
          description: True if the password document is claimed by the collection
          type: boolean
        collectionId:
          description: The collection ID of the password document
          $ref: '#/components/schemas/NumberType'
        plugins:
          items: {}
          description: Dynamic checks to run in the form of plugins
          type: array
        manualDistribution:
          description: >-
            If true, the claim codes are to be distributed manually. This doc
            will only be used for storage purposes.
          type: boolean
        state:
          additionalProperties: {}
          description: The current state of each plugin
          type: object
        action:
          properties:
            codes:
              items:
                type: string
                description: ''
              type: array
              description: ''
            seedCode:
              type: string
              description: ''
            balancesToSet:
              $ref: '#/components/schemas/iIncrementedBalances'
              description: ''
            listId:
              type: string
              description: ''
            description: ''
          additionalProperties: false
          description: Details for the action to perform if the criteria is correct
          type: object
        description: ''
      required:
        - _docId
        - cid
        - createdBy
        - docClaimed
        - collectionId
        - plugins
        - state
        - action
      additionalProperties: false
      description: ''
      type: object
    iApprovalTrackerDoc:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#/components/schemas/NumberType'
        approvalId:
          description: The approval ID
          type: string
        amountTrackerId:
          description: The amount tracker ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          description: The address of the approval to check.
          type: string
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          type: string
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        numTransfers:
          description: The number of transfers. Is an incrementing tally.
          $ref: '#/components/schemas/NumberType'
        amounts:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: A tally of the amounts transferred for this approval.
          type: array
        description: ''
      required:
        - collectionId
        - approvalId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
        - _docId
        - numTransfers
        - amounts
      additionalProperties: false
      description: ''
      type: object
    iChallengeTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        approvalId:
          description: The approval ID
          type: string
        challengeTrackerId:
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
        description: ''
      required:
        - collectionId
        - approvalId
        - challengeTrackerId
        - challengeLevel
        - approverAddress
      additionalProperties: false
      type: object
      description: ''
    iMerkleChallengeDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        challengeTrackerId:
          description: The challenge ID
          type: string
        approvalId:
          description: The approval ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
        usedLeafIndices:
          items:
            $ref: '#/components/schemas/NumberType'
            description: ''
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
        description: ''
      required:
        - _docId
        - collectionId
        - challengeTrackerId
        - approvalId
        - challengeLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      description: ''
      type: object
    iMerklechallengeTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        challengeTrackerId:
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
        usedLeafIndices:
          items:
            $ref: '#/components/schemas/NumberType'
            description: ''
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
        description: ''
      required:
        - collectionId
        - challengeTrackerId
        - challengeLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      type: object
      description: ''
    iFetchDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        content:
          anyOf:
            - $ref: '#/components/schemas/iMetadata'
              description: ''
            - $ref: '#/components/schemas/iApprovalInfoDetails'
              description: ''
            - $ref: '#/components/schemas/iOffChainBalancesMap'
              description: ''
            - $ref: '#/components/schemas/iChallengeDetails'
              description: ''
          description: >-
            The content of the fetch document. Note that we store balances in
            BALANCES_DB and not here to avoid double storage.
        fetchedAt:
          description: The time the document was fetched
          $ref: '#/components/schemas/NumberType'
        fetchedAtBlock:
          description: The block the document was fetched
          $ref: '#/components/schemas/NumberType'
        db:
          enum:
            - ApprovalInfo
            - Metadata
            - Balances
            - ChallengeInfo
          description: The type of content fetched. This is used for querying purposes
          type: string
        isPermanent:
          description: >-
            True if the document is permanent (i.e. fetched from a permanent URI
            like IPFS)
          type: boolean
        description: ''
      required:
        - _docId
        - fetchedAt
        - fetchedAtBlock
        - db
        - isPermanent
      additionalProperties: false
      description: ''
      type: object
    iRefreshDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        refreshRequestTime:
          description: The time the refresh was requested (Unix timestamp in milliseconds)
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - _docId
        - collectionId
        - refreshRequestTime
      additionalProperties: false
      description: ''
      type: object
    iAirdropDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        airdropped:
          description: True if the airdrop has been completed
          type: boolean
        timestamp:
          description: >-
            The timestamp of when the airdrop was completed (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        hash:
          description: The hash of the airdrop transaction
          type: string
        description: ''
      required:
        - _docId
        - airdropped
        - timestamp
      additionalProperties: false
      description: ''
      type: object
    iIPFSTotalsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        bytesUploaded:
          description: The total bytes uploaded
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - _docId
        - bytesUploaded
      additionalProperties: false
      description: ''
      type: object
    iComplianceDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        badges:
          properties:
            nsfw:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
                description: ''
              type: array
              description: ''
            reported:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
          description: ''
        addressLists:
          properties:
            nsfw:
              items:
                properties:
                  listId:
                    type: string
                    description: ''
                  reason:
                    type: string
                    description: ''
                  description: ''
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
                description: ''
              type: array
              description: ''
            reported:
              items:
                properties:
                  listId:
                    type: string
                    description: ''
                  reason:
                    type: string
                    description: ''
                  description: ''
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
          description: ''
        accounts:
          properties:
            nsfw:
              items:
                properties:
                  cosmosAddress:
                    type: string
                    description: ''
                  reason:
                    type: string
                    description: ''
                  description: ''
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                type: object
                description: ''
              type: array
              description: ''
            reported:
              items:
                properties:
                  cosmosAddress:
                    type: string
                    description: ''
                  reason:
                    type: string
                    description: ''
                  description: ''
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                type: object
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - _docId
        - badges
        - addressLists
        - accounts
      additionalProperties: false
      description: ''
      type: object
    iBlockinAuthSignatureDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        signature:
          type: string
          description: ''
        publicKey:
          type: string
          description: ''
        name:
          type: string
          description: ''
        description:
          type: string
          description: ''
        image:
          type: string
          description: ''
        cosmosAddress:
          type: string
          description: ''
        params:
          $ref: '#/components/schemas/ChallengeParams'
          description: ''
        secretsProofs:
          items:
            $ref: '#/components/schemas/iSecretsProof'
            description: ''
          type: array
          description: ''
        createdAt:
          $ref: '#/components/schemas/NumberType'
          description: ''
        deletedAt:
          $ref: '#/components/schemas/NumberType'
          description: ''
      required:
        - _docId
        - signature
        - name
        - description
        - image
        - cosmosAddress
        - params
        - secretsProofs
        - createdAt
      additionalProperties: false
      description: ''
      type: object
    iSecretDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        createdBy:
          type: string
          description: ''
        messageFormat:
          enum:
            - plaintext
            - json
          type: string
          description: ''
        proofOfIssuance:
          properties:
            message:
              type: string
              description: ''
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        secretId:
          type: string
          description: ''
        type:
          type: string
          description: ''
        scheme:
          enum:
            - bbs
            - standard
          type: string
          description: ''
        secretMessages:
          items:
            type: string
            description: ''
          type: array
          description: ''
        dataIntegrityProof:
          properties:
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        name:
          type: string
          description: ''
        image:
          type: string
          description: ''
        description:
          type: string
          description: ''
        viewers:
          items:
            type: string
            description: ''
          type: array
          description: ''
        anchors:
          items:
            properties:
              txHash:
                type: string
                description: ''
              message:
                type: string
                description: ''
              description: ''
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          type: array
          description: ''
      required:
        - _docId
        - createdBy
        - messageFormat
        - proofOfIssuance
        - secretId
        - type
        - scheme
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
        - viewers
        - anchors
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iFollowDetailsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        followingCount:
          description: The number of users that the user is following
          $ref: '#/components/schemas/NumberType'
        followersCount:
          description: The number of users that are following the user
          $ref: '#/components/schemas/NumberType'
        followers:
          items:
            type: string
            description: ''
          description: The followers of the user
          type: array
        following:
          items:
            type: string
            description: ''
          description: The following of the user
          type: array
        followingCollectionId:
          description: The collection ID of the following collection
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
      additionalProperties: false
      description: ''
      type: object
    iMapDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        creator:
          type: string
          description: ''
        mapId:
          type: string
          description: ''
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
          description: ''
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          type: array
          description: ''
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
          description: ''
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
          description: ''
        defaultValue:
          type: string
          description: ''
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
          description: ''
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
            description: ''
          type: array
          description: ''
        values:
          additionalProperties:
            $ref: '#/components/schemas/iValueStore'
            description: ''
          type: object
          description: ''
        metadata:
          $ref: '#/components/schemas/iMetadata'
          description: ''
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - _docId
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
        - values
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iBadgeMetadataDetails:
      properties:
        metadataId:
          description: >-
            The metadata ID for the fetched URI. Metadata IDs map an ID to each
            unique URI. See BitBadges Docs for more information.
          $ref: '#/components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs that correspond to the metadata
          type: array
        metadata:
          $ref: '#/components/schemas/iMetadata'
          description: The metadata fetched by the URI
        uri:
          description: The URI that the metadata was fetched from
          type: string
        customData:
          description: Custom data
          type: string
        toUpdate:
          description: >-
            Flag to denote if the metadata is new and should be updated. Used
            internally.
          type: boolean
        description: ''
      required:
        - badgeIds
        - metadata
      additionalProperties: false
      type: object
      description: ''
    iMetadata:
      properties:
        name:
          description: The name of the badge or badge collection.
          type: string
        description:
          description: The description of the badge or badge collection.
          type: string
        image:
          description: The image of the badge or badge collection.
          type: string
        video:
          description: >-
            The video of the badge or badge collection. If a standard video is
            used, this should be a link to the video. We will use image as the
            poster image. If a youtube video is used, we embed it as an iframe.
          type: string
        creator:
          description: The creator of the badge or badge collection.
          type: string
        color:
          description: The color of the badge or badge collection.
          type: string
        category:
          description: >-
            The category of the badge or badge collection (e.g. "Education",
            "Attendance").
          type: string
        externalUrl:
          description: The external URL of the badge or badge collection.
          type: string
        tags:
          items:
            type: string
            description: ''
          description: The tags of the badge or badge collection
          type: array
        socials:
          additionalProperties:
            type: string
            description: ''
          description: The socials of the badge or badge collection
          type: object
        offChainTransferabilityInfo:
          properties:
            host:
              type: string
              description: ''
            assignMethod:
              type: string
              description: ''
            description: ''
          required:
            - host
            - assignMethod
          additionalProperties: false
          description: The off-chain transferability info of the badge or badge collection
          type: object
        attributes:
          items:
            properties:
              type:
                enum:
                  - date
                  - url
                type: string
                description: ''
              name:
                type: string
                description: ''
              value:
                anyOf:
                  - type: string
                    description: ''
                  - type: number
                    description: ''
                  - type: boolean
                    description: ''
                description: ''
              description: ''
            required:
              - name
              - value
            additionalProperties: false
            type: object
            description: ''
          description: The attributes of the badge or badge collection
          type: array
        fetchedAtBlock:
          description: The block the metadata was fetched at.
          $ref: '#/components/schemas/NumberType'
        fetchedAt:
          description: The time the metadata was fetched.
          $ref: '#/components/schemas/NumberType'
        _isUpdating:
          description: Whether the metadata is currently being updated.
          type: boolean
      required:
        - name
        - description
        - image
      additionalProperties: false
      type: object
      description: ''
    iBitBadgesAddressList:
      properties:
        listId:
          description: The ID of the address list.
          type: string
        addresses:
          items:
            type: string
            description: ''
          description: The addresses of the address list.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          type: string
        aliasAddress:
          description: The alias cosmos address of the address list.
          type: string
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          description: The update history of this list
          type: array
        createdBlock:
          description: The block number when this list was created
          $ref: '#/components/schemas/NumberType'
        lastUpdated:
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        nsfw:
          properties:
            reason:
              type: string
              description: ''
            description: ''
          required:
            - reason
          additionalProperties: false
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              type: string
              description: ''
            description: ''
          required:
            - reason
          additionalProperties: false
          description: The reported reason if this list is reported
          type: object
        private:
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
        metadata:
          $ref: '#/components/schemas/iMetadata'
          description: The metadata of the address list.
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
            description: ''
          description: The activity of the address list.
          type: array
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                  description: ''
                type: array
                description: ''
              type:
                type: string
                description: ''
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
                description: ''
              description: ''
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
            description: ''
          description: The views of the address list.
          type: object
        claims:
          items:
            properties:
              claimId:
                type: string
                description: ''
              plugins:
                items: {}
                type: array
                description: ''
              description: ''
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
        - listsActivity
        - views
        - claims
      additionalProperties: false
      description: ''
      type: object
    GetAddressListsRouteRequestBody:
      properties:
        listsToFetch:
          items:
            properties:
              listId:
                type: string
                description: ''
              viewsToFetch:
                items:
                  properties:
                    viewId:
                      type: string
                      description: ''
                    viewType:
                      enum:
                        - listActivity
                      type: string
                      description: ''
                    bookmark:
                      type: string
                      description: ''
                    description: ''
                  required:
                    - viewId
                    - viewType
                    - bookmark
                  additionalProperties: false
                  type: object
                  description: ''
                type: array
                description: ''
              fetchPrivateParams:
                type: boolean
                description: ''
              description: ''
            required:
              - listId
            additionalProperties: false
            type: object
            description: ''
          description: >-
            The lists and accompanyin details to fetch. Supports on-chain,
            off-chain, and reserved lists.
          type: array
        description: ''
      required:
        - listsToFetch
      additionalProperties: false
      type: object
      description: ''
    iGetAddressListsRouteSuccessResponse:
      properties:
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - addressLists
      additionalProperties: false
      type: object
      description: ''
    UpdateAddressListsRouteRequestBody:
      properties:
        addressLists:
          items:
            allOf:
              - $ref: '#/components/schemas/iAddressList'
                description: ''
              - properties:
                  private:
                    type: boolean
                    description: ''
                  claims:
                    items:
                      properties:
                        claimId:
                          type: string
                          description: ''
                        plugins:
                          items: {}
                          type: array
                          description: ''
                        description: ''
                      required:
                        - claimId
                        - plugins
                      additionalProperties: false
                      type: object
                      description: ''
                    type: array
                    description: ''
                  viewableWithLink:
                    type: boolean
                    description: ''
                  description: ''
                required:
                  - claims
                additionalProperties: false
                type: object
                description: ''
            description: ''
          description: |-
            New address lists to update.
            Requester must be creator of the lists.
            Only applicable to off-chain balances.
          type: array
        description: ''
      required:
        - addressLists
      additionalProperties: false
      type: object
      description: ''
    iUpdateAddressListsRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    CreateAddressListsRouteRequestBody:
      properties:
        addressLists:
          items:
            allOf:
              - $ref: '#/components/schemas/iAddressList'
                description: ''
              - properties:
                  private:
                    type: boolean
                    description: ''
                  claims:
                    items:
                      properties:
                        claimId:
                          type: string
                          description: ''
                        plugins:
                          items: {}
                          type: array
                          description: ''
                        description: ''
                      required:
                        - claimId
                        - plugins
                      additionalProperties: false
                      type: object
                      description: ''
                    type: array
                    description: ''
                  viewableWithLink:
                    type: boolean
                    description: ''
                  description: ''
                required:
                  - claims
                additionalProperties: false
                type: object
                description: ''
            description: ''
          description: |-
            New address lists to update.
            Requester must be creator of the lists.
            Only applicable to off-chain balances.
          type: array
        description: ''
      required:
        - addressLists
      additionalProperties: false
      type: object
      description: ''
    iCreateAddressListsRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    DeleteAddressListsRouteRequestBody:
      properties:
        listIds:
          items:
            type: string
            description: ''
          description: The list IDs to delete.
          type: array
        description: ''
      required:
        - listIds
      additionalProperties: false
      type: object
      description: ''
    iDeleteAddressListsRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    iBitBadgesUserInfo:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        publicKey:
          description: The public key of the account
          type: string
        accountNumber:
          description: The account number of the account
          $ref: '#/components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        cosmosAddress:
          description: The Cosmos address of the account
          type: string
        ethAddress:
          description: The Eth address of the account
          type: string
        btcAddress:
          description: The Bitcoin address of the account
          type: string
        sequence:
          description: The sequence of the account
          $ref: '#/components/schemas/NumberType'
        balance:
          $ref: '#/components/schemas/iCosmosCoin'
          description: The balance of the account
        fetchedProfile:
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#/components/schemas/NumberType'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
            description: ''
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            description: ''
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
            description: ''
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                description: ''
              type: array
              description: ''
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - badges
            - lists
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                description: ''
              type: array
              description: ''
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          $ref: '#/components/schemas/SupportedChain'
          description: The latest chain the user signed in with
        notifications:
          $ref: '#/components/schemas/iNotificationPreferences'
          description: The notifications of the account
        socialConnections:
          $ref: '#/components/schemas/iSocialConnections'
          description: Social connections stored for the account
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                  description: ''
                discriminator:
                  type: string
                  description: ''
                id:
                  type: string
                  description: ''
                description: ''
              required:
                - username
                - id
              additionalProperties: false
              type: object
              description: ''
            description: ''
          additionalProperties: false
          description: Approved ways to sign in (rather than Blockin)
          type: object
        resolvedName:
          description: The resolved name of the account (e.g. ENS name).
          type: string
        avatar:
          description: The avatar of the account.
          type: string
        solAddress:
          description: The Solana address of the account.
          type: string
        chain:
          $ref: '#/components/schemas/SupportedChain'
          description: The chain of the account.
        airdropped:
          description: Indicates whether the account has claimed their airdrop.
          type: boolean
        collected:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
            description: ''
          description: >-
            A list of badges that the account has collected. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            description: ''
          description: >-
            A list of transfer activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
            description: ''
          description: >-
            A list of list activity items for the account. Paginated and fetched
            as needed. To be used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
            description: ''
          description: >-
            A list of review activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
            description: ''
          description: >-
            A list of merkle challenge activity items for the account. Paginated
            and fetched as needed. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
            description: ''
          description: >-
            A list of approvals tracker activity items for the account.
            Paginated and fetched as needed. To be used in conjunction with
            views.
          type: array
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
            description: ''
          description: >-
            A list of address lists for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
            description: ''
          description: >-
            A list of claim alerts for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        authCodes:
          items:
            $ref: '#/components/schemas/iBlockinAuthSignatureDoc'
            description: ''
          description: >-
            A list of auth codes for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        secrets:
          items:
            $ref: '#/components/schemas/iSecretDoc'
            description: ''
          description: >-
            A list of user secrets for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        reservedMap:
          $ref: '#/components/schemas/iMapDoc'
          description: >-
            The reserved map for the account. This is created and managed
            on-chain through the x/maps module.
        address:
          description: The native address of the account
          type: string
        nsfw:
          additionalProperties:
            type: string
            description: ''
          description: Indicates whether the account is NSFW.
          type: object
        reported:
          additionalProperties:
            type: string
            description: ''
          description: Indicates whether the account has been reported.
          type: object
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                  description: ''
                type: array
                description: ''
              type:
                type: string
                description: ''
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
                description: ''
              description: ''
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
            description: ''
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        alias:
          properties:
            collectionId:
              $ref: '#/components/schemas/NumberType'
              description: ''
            listId:
              type: string
              description: ''
            description: ''
          additionalProperties: false
          description: The alias for the account.
          type: object
        description: ''
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - cosmosAddress
        - ethAddress
        - btcAddress
        - solAddress
        - chain
        - collected
        - activity
        - listsActivity
        - reviews
        - merkleChallenges
        - approvalTrackers
        - addressLists
        - claimAlerts
        - authCodes
        - secrets
        - address
        - views
      additionalProperties: false
      description: ''
      type: object
    AccountViewKey:
      enum:
        - createdLists
        - privateLists
        - authCodes
        - transferActivity
        - reviews
        - badgesCollected
        - claimAlerts
        - allLists
        - whitelists
        - blacklists
        - createdBadges
        - managingBadges
        - listsActivity
        - createdSecrets
        - receivedSecrets
      description: The supported view keys for fetching account details.
      type: string
    AccountFetchDetails:
      properties:
        address:
          type: string
          description: ''
        username:
          type: string
          description: ''
        fetchSequence:
          description: If true, we will fetch the sequence from the blockchain.
          type: boolean
        fetchBalance:
          description: If true, we will fetch the $BADGE balance from the blockchain.
          type: boolean
        noExternalCalls:
          description: If true, we will avoid external API calls.
          type: boolean
        viewsToFetch:
          items:
            properties:
              viewId:
                description: >-
                  Unique view ID. Used for pagination. All fetches w/ same ID
                  should be made with same criteria.
                type: string
              viewType:
                $ref: '#/components/schemas/AccountViewKey'
                description: The base view type to fetch.
              specificCollections:
                items:
                  $ref: '#/components/schemas/iBatchBadgeDetails'
                  description: ''
                description: >-
                  If defined, we will filter the view to only include the
                  specified collections.
                type: array
              specificLists:
                items:
                  type: string
                  description: ''
                description: >-
                  If defined, we will filter the view to only include the
                  specified lists.
                type: array
              oldestFirst:
                description: Oldest first. By default, we fetch newest
                type: boolean
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              description: ''
            required:
              - viewId
              - viewType
              - bookmark
            additionalProperties: false
            type: object
            description: ''
          description: An array of views to fetch
          type: array
        description: ''
      additionalProperties: false
      description: >-
        This defines the options for fetching additional account details.


        A view is a way of fetching additional details about an account, and
        these will be queryable in the response via the `views` property.


        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the account.

        - `latestAnnouncements` - Fetches the latest announcements for the
        account.

        - `reviews` - Fetches the latest reviews for the account.

        - `badgesCollected` - Fetches the badges collected by the account
        sequentially in random order.
      type: object
    GetAccountsRouteRequestBody:
      properties:
        accountsToFetch:
          items:
            $ref: '#/components/schemas/AccountFetchDetails'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - accountsToFetch
      additionalProperties: false
      type: object
      description: ''
    iGetAccountsRouteSuccessResponse:
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - accounts
      additionalProperties: false
      type: object
      description: ''
    GetFollowDetailsRouteRequestBody:
      properties:
        cosmosAddress:
          type: string
          description: ''
        followingBookmark:
          type: string
          description: ''
        followersBookmark:
          type: string
          description: ''
        protocol:
          type: string
          description: ''
        activityBookmark:
          type: string
          description: ''
        description: ''
      required:
        - cosmosAddress
      additionalProperties: false
      type: object
      description: ''
    iGetFollowDetailsRouteSuccessResponse:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        followingCount:
          description: The number of users that the user is following
          $ref: '#/components/schemas/NumberType'
        followersCount:
          description: The number of users that are following the user
          $ref: '#/components/schemas/NumberType'
        followers:
          items:
            type: string
            description: ''
          description: The followers of the user
          type: array
        following:
          items:
            type: string
            description: ''
          description: The following of the user
          type: array
        followingCollectionId:
          description: The collection ID of the following collection
          $ref: '#/components/schemas/NumberType'
        followersPagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: ''
        followingPagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: ''
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            description: ''
          type: array
          description: ''
        activityPagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: ''
        description: ''
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
        - followersPagination
        - followingPagination
        - activity
        - activityPagination
      additionalProperties: false
      description: ''
      type: object
    FilterBadgesInCollectionRequestBody:
      properties:
        collectionId:
          description: The collection ID to filter
          $ref: '#/components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: >-
            Limit to specific badge IDs. Leave undefined to not filter by badge
            ID.
          type: array
        categories:
          items:
            type: string
            description: ''
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        tags:
          items:
            type: string
            description: ''
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        mostViewed:
          enum:
            - daily
            - allTime
            - weekly
            - monthly
            - yearly
          description: >-
            mostViewed is a special view that sorts by most viewed badges. May
            be incompatible with other filters.
          type: string
        bookmark:
          description: Pagination bookmark. Leave undefined or "" for first request.
          type: string
        attributes:
          items:
            properties:
              name:
                type: string
                description: ''
              value:
                anyOf:
                  - type: string
                    description: ''
                  - type: number
                    description: ''
                  - type: boolean
                    description: ''
                description: ''
              description: ''
            required:
              - name
              - value
            additionalProperties: false
            type: object
            description: ''
          description: Attribute queries
          type: array
        description: ''
      required:
        - collectionId
      additionalProperties: false
      type: object
      description: ''
    iFilterBadgesInCollectionSuccessResponse:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          type: array
          description: ''
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: ''
        description: ''
      required:
        - badgeIds
        - pagination
      additionalProperties: false
      type: object
      description: ''
    GetOwnersForBadgeRouteRequestBody:
      properties:
        bookmark:
          description: >-
            The pagination bookmark for where to start the request. Bookmarks
            are obtained via the previous response. "" for first request.
          type: string
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iGetOwnersForBadgeRouteSuccessResponse:
      properties:
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
            description: ''
          description: Represents a list of owners balance details.
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: Represents pagination information.
        description: ''
      required:
        - owners
        - pagination
      additionalProperties: false
      type: object
      description: ''
    GetBadgeBalanceByAddressRouteRequestBody:
      additionalProperties: false
      type: object
      description: ''
    iGetBadgeBalanceByAddressRouteSuccessResponse:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
            description: ''
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
            description: ''
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        cosmosAddress:
          description: The Cosmos address of the user
          type: string
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#/components/schemas/NumberType'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#/components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          description: The update history of this balance
          type: array
        description: ''
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    GetBadgeActivityRouteRequestBody:
      properties:
        bookmark:
          description: >-
            An optional bookmark for pagination. Bookmarks are obtained via the
            previous response. "" for first request.
          type: string
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iGetBadgeActivityRouteSuccessResponse:
      properties:
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            description: ''
          description: Array of transfer activity information.
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: Pagination information.
        description: ''
      required:
        - activity
        - pagination
      additionalProperties: false
      type: object
      description: ''
    MetadataFetchOptions:
      properties:
        doNotFetchCollectionMetadata:
          description: If true, collection metadata will not be fetched.
          type: boolean
        metadataIds:
          anyOf:
            - type: string
              description: ''
            - items:
                type: number
                description: ''
              type: array
              description: ''
            - items:
                $ref: '#/components/schemas/iUintRange'
                description: ''
              type: array
              description: ''
          description: >-
            If present, the metadata corresponding to the specified metadata IDs
            will be fetched.

            Metadata IDs are helpful when determining UNQIUE URIs to be fetched.


            If badges 1-10000 all share the same URI, they will have the same
            single metadata ID.

            If badge 1 has a different URI than badges 2-10000, badge 1 will
            have a different metadata ID than the rest/


            We scan in increasing order of badge IDs, so metadata ID 1 will be
            for badge 1-X, metadata ID 2 will be for badge X+1-Y, etc.


            ID 0 = Collection metadata fetch

            ID 1 = First badge metadata fetch

            ID 2 = Second badge metadata fetch (if present)

            And so on

            Learn more in documentation.
        uris:
          items:
            type: string
            description: ''
          description: >-
            If present, the metadata corresponding to the specified URIs will be
            fetched.
          type: array
        badgeIds:
          anyOf:
            - type: string
              description: ''
            - items:
                type: number
                description: ''
              type: array
              description: ''
            - items:
                $ref: '#/components/schemas/iUintRange'
                description: ''
              type: array
              description: ''
          description: >-
            If present, the metadata corresponding to the specified badge IDs
            will be fetched.
        description: ''
      additionalProperties: false
      description: Defines the options for fetching metadata.
      type: object
    CollectionViewKey:
      enum:
        - transferActivity
        - reviews
        - owners
        - amountTrackers
        - challengeTrackers
      description: Supported view keys for fetching additional collection details.
      type: string
    GetAdditionalCollectionDetailsRequestBody:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
              description: ''
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
            description: ''
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
            description: ''
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
            description: ''
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
        description: ''
      additionalProperties: false
      description: >-
        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.
      type: object
    GetMetadataForCollectionRequestBody:
      properties:
        metadataToFetch:
          $ref: '#/components/schemas/MetadataFetchOptions'
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
        description: ''
      additionalProperties: false
      type: object
      description: ''
    GetCollectionBatchRouteRequestBody:
      properties:
        collectionsToFetch:
          items:
            allOf:
              - properties:
                  collectionId:
                    description: The ID of the collection to fetch.
                    $ref: '#/components/schemas/NumberType'
                  description: ''
                required:
                  - collectionId
                additionalProperties: false
                type: object
                description: ''
              - $ref: '#/components/schemas/GetMetadataForCollectionRequestBody'
                description: ''
              - $ref: '#/components/schemas/GetAdditionalCollectionDetailsRequestBody'
                description: ''
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - collectionsToFetch
      additionalProperties: false
      type: object
      description: ''
    iGetCollectionBatchRouteSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - collections
      additionalProperties: false
      type: object
      description: ''
    GetCollectionByIdRouteRequestBody:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
              description: ''
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
            description: ''
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
            description: ''
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
            description: ''
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
        metadataToFetch:
          $ref: '#/components/schemas/MetadataFetchOptions'
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
        description: ''
      additionalProperties: false
      description: >-

        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.
      type: object
    iGetCollectionByIdRouteSuccessResponse:
      properties:
        collection:
          $ref: '#/components/schemas/iBitBadgesCollection'
          description: ''
        description: ''
      required:
        - collection
      additionalProperties: false
      type: object
      description: ''
    RefreshMetadataRouteRequestBody:
      additionalProperties: false
      type: object
      description: ''
    iRefreshMetadataRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    RefreshStatusRouteRequestBody:
      additionalProperties: false
      type: object
      description: ''
    iRefreshStatusRouteSuccessResponse:
      properties:
        inQueue:
          description: Boolean indicating if the collection is currently in the queue.
          type: boolean
        errorDocs:
          items:
            $ref: '#/components/schemas/iQueueDoc'
            description: ''
          description: Array of error documents corresponding to the collection.
          type: array
        refreshDoc:
          $ref: '#/components/schemas/iRefreshDoc'
          description: The status information corresponding to the collection.
        description: ''
      required:
        - inQueue
        - errorDocs
        - refreshDoc
      additionalProperties: false
      type: object
      description: ''
    BlockinAssetConditionGroup:
      $ref: '#/components/schemas/OwnershipRequirements'
      description: ''
    GetStatusRouteRequestBody:
      additionalProperties: false
      type: object
      description: ''
    iGetStatusRouteSuccessResponse:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
          description: Includes status details about the indexer / blockchain.
        description: ''
      required:
        - status
      additionalProperties: false
      type: object
      description: ''
    GetSearchRouteRequestBody:
      properties:
        noCollections:
          description: If true, we will skip all collection queries.
          type: boolean
        noAccounts:
          description: If true, we will skip all account queries.
          type: boolean
        noAddressLists:
          description: If true, we will skip all address list queries.
          type: boolean
        noBadges:
          description: If true, we will skip all badge queries.
          type: boolean
        specificCollectionId:
          description: If true, we will limit collection results to a single collection.
          $ref: '#/components/schemas/NumberType'
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iGetSearchRouteSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
            description: ''
          type: array
          description: ''
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
            description: ''
          type: array
          description: ''
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
            description: ''
          type: array
          description: ''
        badges:
          items:
            properties:
              collection:
                $ref: '#/components/schemas/iBitBadgesCollection'
                description: ''
              badgeIds:
                items:
                  $ref: '#/components/schemas/iUintRange'
                  description: ''
                type: array
                description: ''
              description: ''
            required:
              - collection
              - badgeIds
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - collections
        - accounts
        - addressLists
        - badges
      additionalProperties: false
      type: object
      description: ''
    CodesAndPasswords:
      properties:
        cid:
          description: The IPFS CID of the merkle challenge.
          type: string
        codes:
          items:
            type: string
            description: ''
          type: array
          description: ''
        password:
          type: string
          description: ''
        description: ''
      required:
        - cid
        - codes
        - password
      additionalProperties: false
      description: >-
        Type to allow specifying codes and passwords for a merkle challenge.


        We only support storing codes and passwords for merkle challenges
        created by BitBadges via IPFS.

        The IPFS CID of the merkle challenge is used to identify the merkle
        challenge.


        Note that we only support storing a set of codes and passwords once per
        unique CID.
      type: object
    GetClaimsRouteRequestBody:
      properties:
        claimIds:
          items:
            type: string
            description: ''
          type: array
          description: ''
        listId:
          type: string
          description: ''
        description: ''
      required:
        - claimIds
      additionalProperties: false
      type: object
      description: ''
    iGetClaimsRouteSuccessResponse:
      properties:
        claims:
          items:
            properties:
              claimId:
                type: string
                description: ''
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
                description: ''
              plugins:
                items: {}
                type: array
                description: ''
              manualDistribution:
                type: boolean
                description: ''
              description: ''
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - claims
      additionalProperties: false
      type: object
      description: ''
    CheckAndCompleteClaimRouteRequestBody:
      properties:
        prevCodesOnly:
          type: boolean
          description: ''
        description: ''
      additionalProperties: {}
      type: object
      description: ''
    iCheckAndCompleteClaimRouteSuccessResponse:
      properties:
        code:
          type: string
          description: ''
        prevCodes:
          items:
            type: string
            description: ''
          type: array
          description: ''
        description: ''
      additionalProperties: false
      type: object
      description: ''
    DeleteReviewRouteRequestBody:
      properties:
        reviewId:
          description: The review ID to delete.
          type: string
        description: ''
      required:
        - reviewId
      additionalProperties: false
      type: object
      description: ''
    iDeleteReviewRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    AddReviewForCollectionRouteRequestBody:
      properties:
        review:
          description: The review text (1 to 2048 characters).
          type: string
        stars:
          description: The star rating (1 to 5).
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - review
        - stars
      additionalProperties: false
      type: object
      description: ''
    iAddReviewForCollectionRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    AddReviewForUserRouteRequestBody:
      properties:
        review:
          description: The review text (1 to 2048 characters).
          type: string
        stars:
          description: The number of stars (1 to 5) for the review.
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - review
        - stars
      additionalProperties: false
      type: object
      description: ''
    iAddReviewForUserRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    UpdateAccountInfoRouteRequestBody:
      properties:
        discord:
          description: The Discord username.
          type: string
        twitter:
          description: The Twitter username.
          type: string
        github:
          description: The GitHub username.
          type: string
        telegram:
          description: The Telegram username.
          type: string
        seenActivity:
          description: The last seen activity timestamp.
          $ref: '#/components/schemas/NumberType'
        readme:
          description: The README details.
          type: string
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            description: ''
          description: The badges to hide and not view for this profile's portfolio
          type: array
        hiddenLists:
          items:
            type: string
            description: ''
          description: The lists to hide and not view for this profile's portfolio
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                description: ''
              type: array
              description: ''
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - badges
            - lists
          additionalProperties: false
          description: >-
            An array of custom pages on the user's portolio. Used to customize,
            sort, and group badges / lists into pages.
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                description: ''
              type: array
              description: ''
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watchlist of badges / lists
          type: object
        profilePicUrl:
          description: The profile picture URL.
          type: string
        username:
          description: The username.
          type: string
        profilePicImageFile:
          description: The profile picture image file. We will then upload to our CDN.
        notifications:
          properties:
            email:
              type: string
              description: ''
            antiPhishingCode:
              type: string
              description: ''
            preferences:
              additionalProperties: false
              type: object
              description: ''
            description: ''
          additionalProperties: false
          description: The notification preferences for the user.
          type: object
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                  description: ''
                discriminator:
                  type: string
                  description: ''
                id:
                  type: string
                  description: ''
                description: ''
              required:
                - username
                - id
              additionalProperties: false
              type: object
              description: ''
            description: ''
          additionalProperties: false
          description: Approved sign in methods
          type: object
        socialConntections:
          $ref: '#/components/schemas/iSocialConnections'
          description: ''
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iUpdateAccountInfoRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    AddBalancesToOffChainStorageRouteRequestBody:
      properties:
        balances:
          $ref: '#/components/schemas/iOffChainBalancesMap'
          description: A map of Cosmos addresses or list IDs -> Balance[].
        claims:
          items:
            properties:
              claimId:
                type: string
                description: ''
              plugins:
                items: {}
                type: array
                description: ''
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
                description: ''
              description: ''
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
            description: ''
          description: The claim details
          type: array
        method:
          enum:
            - ipfs
            - centralized
          description: The method for storing balances (ipfs or centralized).
          type: string
        collectionId:
          description: The collection ID.
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - method
        - collectionId
      additionalProperties: false
      type: object
      description: ''
    iAddBalancesToOffChainStorageRouteSuccessResponse:
      properties:
        uri:
          description: The URI of the stored data.
          type: string
        result:
          properties:
            cid:
              type: string
              description: ''
            description: ''
          additionalProperties: false
          description: The result object with CID.
          type: object
        description: ''
      required:
        - result
      additionalProperties: false
      type: object
      description: ''
    AddMetadataToIpfsRouteRequestBody:
      properties:
        collectionMetadata:
          $ref: '#/components/schemas/iMetadata'
          description: The collection metadata to add to IPFS
        badgeMetadata:
          anyOf:
            - items:
                $ref: '#/components/schemas/iBadgeMetadataDetails'
                description: ''
              type: array
              description: ''
            - items:
                $ref: '#/components/schemas/iMetadata'
                description: ''
              type: array
              description: ''
          description: The badge metadata to add to IPFS
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iAddMetadataToIpfsRouteSuccessResponse:
      properties:
        collectionMetadataResult:
          properties:
            cid:
              type: string
              description: ''
            description: ''
          required:
            - cid
          additionalProperties: false
          description: The result for collection metadata.
          type: object
        badgeMetadataResults:
          items:
            properties:
              cid:
                type: string
                description: ''
              description: ''
            required:
              - cid
            additionalProperties: false
            type: object
            description: ''
          description: An array of badge metadata results, if applicable.
          type: array
        description: ''
      required:
        - badgeMetadataResults
      additionalProperties: false
      type: object
      description: ''
    AddApprovalDetailsToOffChainStorageRouteRequestBody:
      properties:
        name:
          description: The name of the approval.
          type: string
        description:
          description: The description of the approval.
          type: string
        challengeDetails:
          $ref: '#/components/schemas/iChallengeDetails'
          description: The challenge details.
        claims:
          items:
            properties:
              plugins:
                items: {}
                description: The plugins for the approval.
                type: array
              claimId:
                type: string
                description: ''
              manualDistribution:
                type: boolean
                description: ''
              description: ''
            required:
              - plugins
              - claimId
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
      required:
        - name
        - description
      additionalProperties: false
      type: object
      description: ''
    iAddApprovalDetailsToOffChainStorageRouteSuccessResponse:
      properties:
        result:
          properties:
            cid:
              type: string
              description: ''
            description: ''
          required:
            - cid
          additionalProperties: false
          description: The result with CID for IPFS.
          type: object
        challengeResult:
          properties:
            cid:
              type: string
              description: ''
            description: ''
          required:
            - cid
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - result
      additionalProperties: false
      type: object
      description: ''
    GetSignInChallengeRouteRequestBody:
      properties:
        chain:
          $ref: '#/components/schemas/SupportedChain'
          description: The blockchain to be signed in with.
        address:
          description: The user's blockchain address (their native L1 address).
          type: string
        hours:
          description: The number of hours to be signed in for.
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - chain
        - address
      additionalProperties: false
      type: object
      description: ''
    iGetSignInChallengeRouteSuccessResponse:
      properties:
        nonce:
          description: The nonce for the challenge.
          type: string
        params:
          $ref: '#/components/schemas/ChallengeParams'
          description: The challenge parameters.
        message:
          description: The Blockin challenge message to sign.
          type: string
        description: ''
      required:
        - nonce
        - params
        - message
      additionalProperties: false
      type: object
      description: ''
    VerifySignInRouteRequestBody:
      properties:
        message:
          description: The original Blockin message
          type: string
        signature:
          description: The signature of the Blockin message
          type: string
        publicKey:
          description: Required for some chains. The public key of the signer.
          type: string
        description: ''
      required:
        - message
        - signature
      additionalProperties: false
      type: object
      description: ''
    iVerifySignInRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    CheckSignInStatusRequestBody:
      additionalProperties: false
      type: object
      description: ''
    iCheckSignInStatusRequestSuccessResponse:
      properties:
        signedIn:
          description: Indicates whether the user is signed in.
          type: boolean
        message:
          description: The Blockin message that was signed.
          type: string
        discord:
          properties:
            username:
              type: string
              description: ''
            discriminator:
              type: string
              description: ''
            id:
              type: string
              description: ''
            description: ''
          required:
            - username
            - discriminator
            - id
          additionalProperties: false
          description: Signed in with Discord username and discriminator?
          type: object
        twitter:
          properties:
            id:
              type: string
              description: ''
            username:
              type: string
              description: ''
            description: ''
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Twitter username?
          type: object
        github:
          properties:
            id:
              type: string
              description: ''
            username:
              type: string
              description: ''
            description: ''
          required:
            - id
            - username
          additionalProperties: false
          type: object
          description: ''
        google:
          properties:
            id:
              type: string
              description: ''
            username:
              type: string
              description: ''
            description: ''
          required:
            - id
            - username
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - signedIn
        - message
      additionalProperties: false
      type: object
      description: ''
    SignOutRequestBody:
      properties:
        signOutDiscord:
          type: boolean
          description: ''
        signOutTwitter:
          type: boolean
          description: ''
        signOutBlockin:
          type: boolean
          description: ''
        signOutGoogle:
          type: boolean
          description: ''
        signOutGithub:
          type: boolean
          description: ''
        description: ''
      required:
        - signOutDiscord
        - signOutTwitter
        - signOutBlockin
        - signOutGoogle
        - signOutGithub
      additionalProperties: false
      type: object
      description: ''
    iSignOutSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    GetBrowseCollectionsRouteRequestBody:
      additionalProperties: false
      type: object
      description: ''
    iGetBrowseCollectionsRouteSuccessResponse:
      properties:
        collections:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesCollection'
              description: ''
            type: array
            description: ''
          type: object
          description: ''
        addressLists:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesAddressList'
              description: ''
            type: array
            description: ''
          type: object
          description: ''
        profiles:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesUserInfo'
              description: ''
            type: array
            description: ''
          type: object
          description: ''
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            description: ''
          type: array
          description: ''
        badges:
          additionalProperties:
            items:
              properties:
                collection:
                  $ref: '#/components/schemas/iBitBadgesCollection'
                  description: ''
                badgeIds:
                  items:
                    $ref: '#/components/schemas/iUintRange'
                    description: ''
                  type: array
                  description: ''
                description: ''
              required:
                - collection
                - badgeIds
              additionalProperties: false
              type: object
              description: ''
            type: array
            description: ''
          type: object
          description: ''
        description: ''
      required:
        - collections
        - addressLists
        - profiles
        - activity
        - badges
      additionalProperties: false
      type: object
      description: ''
    BroadcastTxRouteRequestBody:
      $ref: '#/components/schemas/BroadcastPostBody'
      description: ''
    iBroadcastTxRouteSuccessResponse:
      properties:
        tx_response:
          properties:
            code:
              type: number
              description: ''
            codespace:
              type: string
              description: ''
            data:
              type: string
              description: ''
            events:
              items:
                properties:
                  type:
                    type: string
                    description: ''
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                          description: ''
                        value:
                          type: string
                          description: ''
                        index:
                          type: boolean
                          description: ''
                        description: ''
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                      description: ''
                    type: array
                    description: ''
                  description: ''
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
                description: ''
              type: array
              description: ''
            gas_wanted:
              type: string
              description: ''
            gas_used:
              type: string
              description: ''
            height:
              type: string
              description: ''
            Doc:
              type: string
              description: ''
            logs:
              items:
                properties:
                  events:
                    items:
                      properties:
                        type:
                          type: string
                          description: ''
                        attributes:
                          items:
                            properties:
                              key:
                                type: string
                                description: ''
                              value:
                                type: string
                                description: ''
                              index:
                                type: boolean
                                description: ''
                              description: ''
                            required:
                              - key
                              - value
                              - index
                            additionalProperties: false
                            type: object
                            description: ''
                          type: array
                          description: ''
                        description: ''
                      required:
                        - type
                        - attributes
                      additionalProperties: false
                      type: object
                      description: ''
                    type: array
                    description: ''
                  description: ''
                required:
                  - events
                additionalProperties: false
                type: object
                description: ''
              type: array
              description: ''
            raw_log:
              type: string
              description: ''
            timestamp:
              type: string
              description: ''
            tx:
              nullable: true
              type: object
              description: ''
            txhash:
              type: string
              description: ''
            description: ''
          required:
            - code
            - codespace
            - data
            - events
            - gas_wanted
            - gas_used
            - height
            - Doc
            - logs
            - raw_log
            - timestamp
            - tx
            - txhash
          additionalProperties: false
          description: |-
            The response from the blockchain for the broadcasted tx.
            See Cosmos SDK documentation for what each field means.
          type: object
        description: ''
      required:
        - tx_response
      additionalProperties: false
      type: object
      description: ''
    SimulateTxRouteRequestBody:
      $ref: '#/components/schemas/BroadcastPostBody'
      description: ''
    iSimulateTxRouteSuccessResponse:
      properties:
        gas_info:
          properties:
            gas_used:
              type: string
              description: ''
            gas_wanted:
              type: string
              description: ''
            description: ''
          required:
            - gas_used
            - gas_wanted
          additionalProperties: false
          description: How much gas was used in the simulation.
          type: object
        result:
          properties:
            data:
              type: string
              description: ''
            log:
              type: string
              description: ''
            events:
              items:
                properties:
                  type:
                    type: string
                    description: ''
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                          description: ''
                        value:
                          type: string
                          description: ''
                        index:
                          type: boolean
                          description: ''
                        description: ''
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                      description: ''
                    type: array
                    description: ''
                  description: ''
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
                description: ''
              type: array
              description: ''
            description: ''
          required:
            - data
            - log
            - events
          additionalProperties: false
          description: The result of the simulation.
          type: object
        description: ''
      required:
        - gas_info
        - result
      additionalProperties: false
      type: object
      description: ''
    FetchMetadataDirectlyRouteRequestBody:
      properties:
        uris:
          items:
            type: string
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - uris
      additionalProperties: false
      type: object
      description: ''
    iFetchMetadataDirectlyRouteSuccessResponse:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/iMetadata'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - metadata
      additionalProperties: false
      type: object
      description: ''
    GetTokensFromFaucetRouteRequestBody:
      additionalProperties: false
      type: object
      description: ''
    iGetTokensFromFaucetRouteSuccessResponse: null
    SendClaimAlertsRouteRequestBody:
      properties:
        claimAlerts:
          items:
            properties:
              collectionId:
                $ref: '#/components/schemas/NumberType'
                description: ''
              message:
                type: string
                description: ''
              cosmosAddresses:
                items:
                  type: string
                  description: ''
                type: array
                description: ''
              description: ''
            required:
              - collectionId
              - cosmosAddresses
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - claimAlerts
      additionalProperties: false
      type: object
      description: ''
    iSendClaimAlertsRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    CosmosAccountResponse:
      properties:
        account_number:
          type: number
          description: ''
        sequence:
          type: number
          description: ''
        pub_key:
          properties:
            key:
              type: string
              description: ''
            description: ''
          required:
            - key
          additionalProperties: false
          type: object
          description: ''
        address:
          type: string
          description: ''
        description: ''
      required:
        - account_number
        - sequence
        - pub_key
        - address
      additionalProperties: false
      description: >-
        information returned by the REST API getAccount route.


        Note this should be converted into AccountDoc or BitBadgesUserInfo
        before being returned by the BitBadges API for consistency.
      type: object
    GenericBlockinVerifyRouteRequestBody:
      properties:
        message:
          description: The original Blockin message
          type: string
        signature:
          description: The signature of the Blockin message
          type: string
        publicKey:
          description: Required for some chains. The public key of the signer.
          type: string
        options:
          $ref: '#/components/schemas/VerifyChallengeOptions'
          description: Additional options for verifying the challenge.
        description: ''
      required:
        - message
        - signature
      additionalProperties: false
      description: >-
        Generic route to verify any Blockin request. Does not sign you in with
        the API. Used for custom Blockin integrations.
      type: object
    iGenericBlockinVerifyRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    CreateSecretRouteRequestBody:
      properties:
        proofOfIssuance:
          properties:
            message:
              type: string
              description: ''
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        messageFormat:
          enum:
            - plaintext
            - json
          type: string
          description: ''
        scheme:
          enum:
            - bbs
            - standard
          type: string
          description: ''
        type:
          type: string
          description: ''
        secretMessages:
          items:
            type: string
            description: ''
          type: array
          description: ''
        dataIntegrityProof:
          properties:
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        name:
          type: string
          description: ''
        image:
          type: string
          description: ''
        description:
          type: string
          description: ''
      required:
        - proofOfIssuance
        - messageFormat
        - scheme
        - type
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
      additionalProperties: false
      type: object
      description: ''
    iCreateSecretRouteSuccessResponse:
      properties:
        secretId:
          type: string
          description: ''
        description: ''
      required:
        - secretId
      additionalProperties: false
      type: object
      description: ''
    GetSecretRouteRequestBody:
      properties:
        secretId:
          type: string
          description: ''
        description: ''
      required:
        - secretId
      additionalProperties: false
      type: object
      description: ''
    iGetSecretRouteSuccessResponse:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        createdBy:
          type: string
          description: ''
        messageFormat:
          enum:
            - plaintext
            - json
          type: string
          description: ''
        proofOfIssuance:
          properties:
            message:
              type: string
              description: ''
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        secretId:
          type: string
          description: ''
        type:
          type: string
          description: ''
        scheme:
          enum:
            - bbs
            - standard
          type: string
          description: ''
        secretMessages:
          items:
            type: string
            description: ''
          type: array
          description: ''
        dataIntegrityProof:
          properties:
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        name:
          type: string
          description: ''
        image:
          type: string
          description: ''
        description:
          type: string
          description: ''
        viewers:
          items:
            type: string
            description: ''
          type: array
          description: ''
        anchors:
          items:
            properties:
              txHash:
                type: string
                description: ''
              message:
                type: string
                description: ''
              description: ''
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          type: array
          description: ''
      required:
        - _docId
        - createdBy
        - messageFormat
        - proofOfIssuance
        - secretId
        - type
        - scheme
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
        - viewers
        - anchors
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    DeleteSecretRouteRequestBody:
      properties:
        secretId:
          type: string
          description: ''
        description: ''
      required:
        - secretId
      additionalProperties: false
      type: object
      description: ''
    iDeleteSecretRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    UpdateSecretRouteRequestBody:
      properties:
        secretId:
          type: string
          description: ''
        viewersToSet:
          items:
            properties:
              cosmosAddress:
                type: string
                description: ''
              delete:
                type: boolean
                description: ''
              description: ''
            required:
              - cosmosAddress
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        anchorsToAdd:
          items:
            properties:
              txHash:
                type: string
                description: ''
              message:
                type: string
                description: ''
              description: ''
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
        proofOfIssuance:
          properties:
            message:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            signature:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - message
            - signer
            - signature
          additionalProperties: false
          type: object
          description: ''
        scheme:
          enum:
            - bbs
            - standard
          type: string
          description: ''
        messageFormat:
          enum:
            - plaintext
            - json
          type: string
          description: ''
        type:
          type: string
          description: ''
        secretMessages:
          items:
            type: string
            description: ''
          type: array
          description: ''
        dataIntegrityProof:
          properties:
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        name:
          type: string
          description: ''
        image:
          type: string
          description: ''
        description:
          type: string
          description: ''
      required:
        - secretId
      additionalProperties: false
      type: object
      description: ''
    iUpdateSecretRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    CreateBlockinAuthCodeRouteRequestBody:
      properties:
        name:
          type: string
          description: ''
        description:
          type: string
          description: ''
        image:
          type: string
          description: ''
        message:
          type: string
          description: ''
        signature:
          type: string
          description: ''
        publicKey:
          type: string
          description: ''
        secretsProofs:
          items:
            $ref: '#/components/schemas/iSecretsProof'
            description: ''
          type: array
          description: ''
      required:
        - name
        - description
        - image
        - message
        - signature
      additionalProperties: false
      type: object
      description: ''
    iCreateBlockinAuthCodeRouteSuccessResponse:
      properties:
        id:
          description: Secret ID only to be given to queriers
          type: string
        description: ''
      required:
        - id
      additionalProperties: false
      type: object
      description: ''
    GetBlockinAuthCodeRouteRequestBody:
      properties:
        id:
          type: string
          description: ''
        options:
          $ref: '#/components/schemas/VerifyChallengeOptions'
          description: ''
        description: ''
      required:
        - id
      additionalProperties: false
      type: object
      description: ''
    iGetBlockinAuthCodeRouteSuccessResponse:
      properties:
        message:
          description: The corresponding message that was signed to obtain the signature.
          type: string
        signature:
          description: The signature of the message.
          type: string
        params:
          $ref: '#/components/schemas/ChallengeParams'
          description: The converted Blockin params fort the message
        cosmosAddress:
          description: >-
            The converted Cosmos address of params.address. This can be used as
            the

            unique identifier for the user (e.g. avoid duplicate sign ins from
            equivalent 0x and cosmos1 addresses).
          type: string
        verificationResponse:
          properties:
            success:
              description: >-
                Returns whether the current (message, signature) pair is valid
                and verified (i.e. signature is valid and any assets are owned).
              type: boolean
            errorMessage:
              description: Returns the response message returned from Blockin verification.
              type: string
            description: ''
          required:
            - success
          additionalProperties: false
          description: Verification response
          type: object
        secretsProofs:
          items:
            $ref: '#/components/schemas/iSecretsProof'
            description: ''
          description: Derived data integrity proofs for any secrets requested.
          type: array
        description: ''
      required:
        - message
        - signature
        - params
        - cosmosAddress
        - verificationResponse
        - secretsProofs
      additionalProperties: false
      type: object
      description: ''
    DeleteBlockinAuthCodeRouteRequestBody:
      properties:
        id:
          type: string
          description: ''
        description: ''
      required:
        - id
      additionalProperties: false
      type: object
      description: ''
    iDeleteBlockinAuthCodeRouteSuccessResponse:
      additionalProperties: false
      type: object
      description: ''
    GenerateAppleWalletPassRouteRequestBody:
      properties:
        name:
          type: string
          description: ''
        description:
          type: string
          description: ''
        message:
          type: string
          description: ''
        signature:
          type: string
          description: ''
      required:
        - name
        - description
        - message
        - signature
      additionalProperties: false
      type: object
      description: ''
    iGenerateAppleWalletPassRouteSuccessResponse:
      properties:
        type:
          type: string
          description: ''
        data:
          type: string
          description: ''
        description: ''
      required:
        - type
        - data
      additionalProperties: false
      type: object
      description: ''
    GetClaimAlertsForCollectionRouteRequestBody:
      properties:
        collectionId:
          $ref: '#/components/schemas/NumberType'
          description: ''
        bookmark:
          type: string
          description: ''
        description: ''
      required:
        - collectionId
        - bookmark
      additionalProperties: false
      type: object
      description: ''
    iGetClaimAlertsForCollectionRouteSuccessResponse:
      properties:
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
            description: ''
          type: array
          description: ''
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          description: ''
        description: ''
      required:
        - claimAlerts
        - pagination
      additionalProperties: false
      type: object
      description: ''
    GetExternalCallRouteRequestBody:
      properties:
        uri:
          type: string
          description: ''
        key:
          type: string
          description: ''
        description: ''
      required:
        - uri
        - key
      additionalProperties: false
      type: object
      description: ''
    iGetExternalCallRouteSuccessResponse:
      properties:
        key:
          type: string
          description: ''
        timestamp:
          type: number
          description: ''
        description: ''
      required:
        - key
        - timestamp
      additionalProperties: false
      type: object
      description: ''
    GetMapsRouteRequestBody:
      properties:
        mapIds:
          items:
            type: string
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - mapIds
      additionalProperties: false
      type: object
      description: ''
    iMapWithValues:
      properties:
        creator:
          type: string
          description: ''
        mapId:
          type: string
          description: ''
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
          description: ''
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          type: array
          description: ''
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
          description: ''
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
          description: ''
        defaultValue:
          type: string
          description: ''
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
          description: ''
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
            description: ''
          type: array
          description: ''
        values:
          additionalProperties:
            $ref: '#/components/schemas/iValueStore'
            description: ''
          type: object
          description: ''
        metadata:
          $ref: '#/components/schemas/iMetadata'
          description: ''
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
        - values
        - updateHistory
      additionalProperties: false
      type: object
      description: ''
    iGetMapsRouteSuccessResponse:
      properties:
        maps:
          items:
            $ref: '#/components/schemas/iMapWithValues'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - maps
      additionalProperties: false
      type: object
      description: ''
    iBitBadgesCollection:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
            description: ''
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
            description: ''
          description: The badge metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Non-Public
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Non-Public, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
            description: ''
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
            description: ''
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          description: The manager timeline
          type: array
        collectionApprovals:
          allOf:
            - items:
                $ref: '#/components/schemas/iCollectionApproval'
                description: ''
              description: The collection approved transfers timeline
              type: array
            - items:
                $ref: '#/components/schemas/iCollectionApproval'
                description: ''
              description: >-
                The collection approvals for this collection, with off-chain
                metadata populated.
              type: array
          description: ''
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
            description: ''
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
            description: ''
          description: The is archived timeline
          type: array
        createdBy:
          description: The cosmos address of the user who created this collection
          type: string
        createdBlock:
          description: The block number when this collection was created
          $ref: '#/components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/NumberType'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          description: The update history of this collection
          type: array
        aliasAddress:
          description: The alias cosmos address for the collection
          type: string
        collectionPermissions:
          $ref: '#/components/schemas/iCollectionPermissions'
          description: >-
            The collection permissions for this collection, with off-chain
            metadata populated.
        cachedCollectionMetadata:
          $ref: '#/components/schemas/iMetadata'
          description: >-
            The fetched collection metadata for this collection. Will only be
            fetched if requested. It is your responsibility to join this data.
        cachedBadgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadataDetails'
            description: ''
          description: >-
            The fetched badge metadata for this collection. Will only be fetched
            if requested. It is your responsibility to join this data.
          type: array
        defaultBalances:
          $ref: '#/components/schemas/iUserBalanceStore'
          description: >-
            The default balances for users upon genesis, with off-chain metadata
            populated.
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            description: ''
          description: >-
            The fetched activity for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
            description: ''
          description: >-
            The fetched reviews for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
            description: ''
          description: >-
            The fetched owners of this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
            description: ''
          description: >-
            The fetched merkle challenges for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
            description: ''
          description: >-
            The fetched approval trackers for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        nsfw:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
                description: ''
              type: array
              description: ''
            reason:
              type: string
              description: ''
            description: ''
          required:
            - badgeIds
            - reason
          additionalProperties: false
          description: The badge IDs in this collection that are marked as NSFW.
          type: object
        reported:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
                description: ''
              type: array
              description: ''
            reason:
              type: string
              description: ''
            description: ''
          required:
            - badgeIds
            - reason
          additionalProperties: false
          description: The badge IDs in this collection that have been reported.
          type: object
        reservedMap:
          $ref: '#/components/schemas/iMapDoc'
          description: >-
            The reserved map for the account. This is created and managed
            on-chain through the x/maps module.
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                  description: ''
                type: array
                description: ''
              type:
                type: string
                description: ''
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
                description: ''
              description: ''
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
            description: ''
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        claims:
          items:
            properties:
              claimId:
                type: string
                description: ''
              plugins:
                items: {}
                type: array
                description: ''
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
                description: ''
              manualDistribution:
                type: boolean
                description: ''
              description: ''
            required:
              - claimId
              - plugins
              - balancesToSet
            additionalProperties: false
            type: object
            description: ''
          description: >-
            Details about any off-chain claims for this collection. Only
            applicable when outsourced to BitBadges.
          type: array
        description: ''
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
        - collectionPermissions
        - cachedBadgeMetadata
        - defaultBalances
        - activity
        - reviews
        - owners
        - merkleChallenges
        - approvalTrackers
        - views
        - claims
      additionalProperties: false
      description: ''
      type: object
    iOffChainBalancesMap:
      additionalProperties:
        items:
          $ref: '#/components/schemas/iBalance'
          description: ''
        type: array
        description: ''
      description: Used by the frontend for dynamically fetching data from the DB as needed
      type: object
    iTransferWithIncrements:
      properties:
        from:
          description: The address to transfer from.
          type: string
        toAddresses:
          items:
            type: string
            description: ''
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
            description: ''
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
            description: ''
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.
          type: boolean
        zkProofSolutions:
          items:
            $ref: '#/components/schemas/iZkProofSolution'
            description: ''
          description: The zk proof solutions for approvals.
          type: array
        toAddressesLength:
          description: >-
            The number of addresses to send the badges to. This takes priority
            over toAddresses.length (used when you don't know exact addresses
            (i.e. you know number of codes)).
          $ref: '#/components/schemas/NumberType'
        incrementBadgeIdsBy:
          description: The number to increment the badgeIDs by for each transfer.
          $ref: '#/components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: The number to increment the ownershipTimes by for each transfer.
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
      description: ''
    iBatchBadgeDetails:
      properties:
        collectionId:
          $ref: '#/components/schemas/NumberType'
          description: ''
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - collectionId
        - badgeIds
      additionalProperties: false
      type: object
      description: ''
    iChallengeDetails:
      properties:
        leaves:
          items:
            type: string
            description: ''
          description: >-
            The leaves of the Merkle tree. Leaves should be considered public.
            Use preimages for the secrets + isHashed. For whitelist trees, these
            can be the plaintext Cosmos addresses.
          type: array
        isHashed:
          description: True if the leaves are hashed. Hash(preimage[i]) = leaves[i]
          type: boolean
        preimages:
          items:
            type: string
            description: ''
          description: >-
            The preimages of the leaves (only used if isHashed = true).
            Oftentimes, this is used for secret codes so should not be present
            when user-facing.
          type: array
        seedCode:
          description: Seed code for generating the leaves
          type: string
        tree:
          description: The Merkle tree
        treeOptions:
          description: The Merkle tree options for how to build it
        numLeaves:
          description: >-
            The number of leaves in the Merkle tree. This takes priority over
            leaves.length if defined (used for buffer time between leaf
            generation and leaf length select)
          $ref: '#/components/schemas/NumberType'
        currCode:
          description: >-
            The current code being used for the challenge. Used behind the
            scenes
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - leaves
        - isHashed
      additionalProperties: false
      examples:
        - >-
          Codes

          1. Generate N codes privately

          2. Hash each code

          3. Store the hashed codes publicly on IPFS via this struct

          4. When a user enters a code, we hash it and check if it matches any
          of the hashed codes. This way, the codes are never stored publicly on
          IPFS and only known by the generator of the codes.
        - >-
          Whitelist

          For storing a public whitelist of addresses (with
          useCreatorAddressAsLeaf = true), hashing complicates everything
          because the whitelist can be stored publicly.

          1. Generate N whitelist addresses

          2. Store the addresses publicly on IPFS via this struct

          3. When a user enters an address, we check if it matches any of the
          addresses.
      type: object
      description: ''
    iChallengeInfoDetails:
      properties:
        challengeDetails:
          $ref: '#/components/schemas/iChallengeDetails'
          description: The challenge details of the claim / approval
        claim:
          properties:
            plugins:
              items: {}
              description: The plugins of the claim / approval
              type: array
            claimId:
              type: string
              description: ''
            manualDistribution:
              type: boolean
              description: ''
            description: ''
          required:
            - plugins
            - claimId
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - challengeDetails
      additionalProperties: false
      type: object
      description: ''
    iApprovalInfoDetails:
      properties:
        name:
          description: The name of the claim
          type: string
        description:
          description: >-
            The description of the claim. This describes how to earn and claim
            the badge.
          type: string
      required:
        - name
        - description
      additionalProperties: false
      type: object
      description: ''
    iCosmosCoin:
      properties:
        amount:
          description: The amount of the coin.
          $ref: '#/components/schemas/NumberType'
        denom:
          description: The denomination of the coin.
          type: string
        description: ''
      required:
        - amount
        - denom
      additionalProperties: false
      type: object
      description: ''
    PermissionNameString:
      enum:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateBadgeMetadata
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateCollectionApprovals
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
      type: string
      description: ''
    Validator:
      properties:
        commission:
          properties:
            commission_rates:
              properties:
                max_change_rate:
                  type: string
                  description: ''
                max_rate:
                  type: string
                  description: ''
                rate:
                  type: string
                  description: ''
                description: ''
              required:
                - max_change_rate
                - max_rate
                - rate
              additionalProperties: false
              type: object
              description: ''
            update_time:
              type: string
              description: ''
            description: ''
          required:
            - commission_rates
            - update_time
          additionalProperties: false
          type: object
          description: ''
        consensus_pubkey:
          properties:
            "'@type'":
              type: string
              description: ''
            key:
              type: string
              description: ''
            description: ''
          required:
            - "'@type'"
            - key
          additionalProperties: false
          type: object
          description: ''
        delegator_shares:
          type: string
          description: ''
        description:
          properties:
            details:
              type: string
              description: ''
            identity:
              type: string
              description: ''
            moniker:
              type: string
              description: ''
            security_contact:
              type: string
              description: ''
            website:
              type: string
              description: ''
            description: ''
          required:
            - details
            - identity
            - moniker
            - security_contact
            - website
          additionalProperties: false
          type: object
          description: ''
        jailed:
          type: boolean
          description: ''
        min_self_delegation:
          type: string
          description: ''
        operator_address:
          type: string
          description: ''
        status:
          type: string
          description: ''
        tokens:
          type: string
          description: ''
        unbonding_height:
          type: string
          description: ''
        unbonding_time:
          type: string
          description: ''
      required:
        - commission
        - consensus_pubkey
        - delegator_shares
        - description
        - jailed
        - min_self_delegation
        - operator_address
        - status
        - tokens
        - unbonding_height
        - unbonding_time
      additionalProperties: false
      type: object
      description: ''
    GetValidatorsResponse:
      properties:
        validators:
          items:
            $ref: '#/components/schemas/Validator'
            description: ''
          type: array
          description: ''
        pagination:
          properties:
            next_key:
              type: string
              description: ''
            total:
              type: number
              description: ''
            description: ''
          required:
            - next_key
            - total
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - validators
        - pagination
      additionalProperties: false
      type: object
      description: ''
    UndelegationResponse:
      properties:
        delegator_address:
          type: string
          description: ''
        validator_address:
          type: string
          description: ''
        entries:
          items:
            - properties:
                creation_height:
                  type: string
                  description: ''
                completion_time:
                  type: string
                  description: ''
                initial_balance:
                  type: string
                  description: ''
                balance:
                  type: string
                  description: ''
                description: ''
              required:
                - creation_height
                - completion_time
                - initial_balance
                - balance
              additionalProperties: false
              type: object
              description: ''
          additionalItems: false
          minItems: 1
          type: array
          description: ''
        description: ''
      required:
        - delegator_address
        - validator_address
        - entries
      additionalProperties: false
      type: object
      description: ''
    GetUndelegationsResponse:
      properties:
        unbonding_responses:
          items:
            $ref: '#/components/schemas/UndelegationResponse'
            description: ''
          type: array
          description: ''
        pagination:
          properties:
            next_key:
              type: string
              description: ''
            total:
              type: string
              description: ''
            description: ''
          required:
            - next_key
            - total
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - unbonding_responses
        - pagination
      additionalProperties: false
      type: object
      description: ''
    CounterParty:
      properties:
        port_id:
          type: string
          description: ''
        channel_id:
          type: string
          description: ''
        description: ''
      required:
        - port_id
        - channel_id
      additionalProperties: false
      type: object
      description: ''
    Channel:
      properties:
        state:
          type: string
          description: ''
        ordering:
          type: string
          description: ''
        counterparty:
          $ref: '#/components/schemas/CounterParty'
          description: ''
        connection_hops:
          items:
            type: string
            description: ''
          type: array
          description: ''
        version:
          type: string
          description: ''
        port_id:
          type: string
          description: ''
        channel_id:
          type: string
          description: ''
        description: ''
      required:
        - state
        - ordering
        - counterparty
        - connection_hops
        - version
        - port_id
        - channel_id
      additionalProperties: false
      type: object
      description: ''
    ChannelsResponse:
      properties:
        channels:
          items:
            $ref: '#/components/schemas/Channel'
            description: ''
          type: array
          description: ''
        pagination:
          properties:
            next_key:
              type: string
              description: ''
            total:
              type: string
              description: ''
            description: ''
          required:
            - total
          additionalProperties: false
          type: object
          description: ''
        height:
          properties:
            revision_number:
              type: string
              description: ''
            revision_height:
              type: string
              description: ''
            description: ''
          required:
            - revision_number
            - revision_height
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - channels
        - pagination
        - height
      additionalProperties: false
      type: object
      description: ''
    TallyResponse:
      properties:
        tally:
          properties:
            'yes':
              type: string
              description: ''
            abstain:
              type: string
              description: ''
            'no':
              type: string
              description: ''
            no_with_veto:
              type: string
              description: ''
            description: ''
          required:
            - 'yes'
            - abstain
            - 'no'
            - no_with_veto
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - tally
      additionalProperties: false
      type: object
      description: ''
    AccountResponse:
      properties:
        account:
          properties:
            "'@type'":
              type: string
              description: ''
            base_account:
              properties:
                address:
                  type: string
                  description: ''
                pub_key:
                  properties:
                    "'@type'":
                      type: string
                      description: ''
                    key:
                      type: string
                      description: ''
                    description: ''
                  required:
                    - "'@type'"
                    - key
                  additionalProperties: false
                  type: object
                  description: ''
                account_number:
                  type: string
                  description: ''
                sequence:
                  type: string
                  description: ''
                description: ''
              required:
                - address
                - account_number
                - sequence
              additionalProperties: false
              type: object
              description: ''
            description: ''
          required:
            - "'@type'"
            - base_account
          additionalProperties: false
          type: object
          description: ''
        description: ''
      required:
        - account
      additionalProperties: false
      type: object
      description: ''
    BroadcastPostBody:
      properties:
        tx_bytes: {}
        mode:
          type: string
          description: ''
        description: ''
      required:
        - tx_bytes
        - mode
      additionalProperties: false
      type: object
      description: ''
    TxContext:
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
          description: ''
        sender:
          $ref: '#/components/schemas/Sender'
          description: ''
        fee:
          $ref: '#/components/schemas/Fee'
          description: ''
        memo:
          type: string
          description: ''
        description: ''
      required:
        - chain
        - sender
        - fee
        - memo
      additionalProperties: false
      description: |-
        TxContext is the transaction context for a SignDoc that is independent
        from the transaction payload.
      type: object
    EIP712ToSign:
      properties:
        types:
          type: object
          description: ''
        primaryType:
          type: string
          description: ''
        domain:
          properties:
            name:
              type: string
              description: ''
            version:
              type: string
              description: ''
            chainId:
              type: number
              description: ''
            verifyingContract:
              type: string
              description: ''
            salt:
              type: string
              description: ''
            description: ''
          required:
            - name
            - version
            - chainId
            - verifyingContract
            - salt
          additionalProperties: false
          type: object
          description: ''
        message:
          type: object
          description: ''
        description: ''
      required:
        - types
        - primaryType
        - domain
        - message
      additionalProperties: false
      description: >-
        EI712ToSign represents a signable EIP-712 payload that can be signed
        using MetaMask or Keplr.
      type: object
    Fee:
      properties:
        amount:
          type: string
          description: ''
        denom:
          type: string
          description: ''
        gas:
          type: string
          description: ''
        description: ''
      required:
        - amount
        - denom
        - gas
      additionalProperties: false
      description: Fee represents a Cosmos SDK transaction fee object.
      type: object
    Sender:
      properties:
        accountAddress:
          type: string
          description: ''
        sequence:
          type: number
          description: ''
        accountNumber:
          type: number
          description: ''
        pubkey:
          type: string
          description: ''
        description: ''
      required:
        - accountAddress
        - sequence
        - accountNumber
        - pubkey
      additionalProperties: false
      description: >-
        Sender represents a Cosmos SDK Transaction signer.

        @remarks A sender object is used to populate the Cosmos SDK's SignerInfo
        field,

        which is used to declare transaction signers.
      type: object
    Chain:
      properties:
        chainId:
          type: number
          description: ''
        cosmosChainId:
          type: string
          description: ''
        chain:
          $ref: '#/components/schemas/SupportedChain'
          description: ''
        description: ''
      required:
        - chainId
        - cosmosChainId
        - chain
      additionalProperties: false
      description: >-
        Chain represents the base chain's chainID.

        @remarks chainId corresponds to a numerical Ethereum ChainID (e.g. 9001)

        cosmosChainId corresponds to a Cosmos SDK string ChainID (e.g.
        'bitbadges_1-1')
      type: object
    iMsgInstantiateContractCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        codeId:
          description: The code ID of the contract to instantiate.
          type: string
        label:
          description: The human-readable label of the contract.
          type: string
        funds:
          description: The amount of funds to send to the contract on instantiation.
          type: string
        description: ''
      required:
        - sender
        - codeId
        - label
        - funds
      additionalProperties: false
      type: object
      description: ''
    iMsgStoreCodeCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        hexWasmByteCode:
          description: >-
            The contract byte code in hexadecimal format. See BitBadges CosmWASM
            tutorial for more details.
          type: string
        description: ''
      required:
        - sender
        - hexWasmByteCode
      additionalProperties: false
      type: object
      description: ''
    iMsgExecuteContractCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        contract:
          description: The contract address to execute.
          type: string
        msg:
          description: The message to pass to the contract. Must be a valid JSON string.
          type: string
        funds:
          description: The funds to send to the contract. Must be a valid JSON string.
          type: string
        description: ''
      required:
        - sender
        - contract
        - msg
        - funds
      additionalProperties: false
      type: object
      description: ''
    iValueStore:
      properties:
        key:
          type: string
          description: ''
        value:
          type: string
          description: ''
        lastSetBy:
          type: string
          description: ''
        description: ''
      required:
        - key
        - value
        - lastSetBy
      additionalProperties: false
      type: object
      description: ''
    iMapUpdateCriteria:
      properties:
        managerOnly:
          type: boolean
          description: ''
        collectionId:
          $ref: '#/components/schemas/NumberType'
          description: ''
        creatorOnly:
          type: boolean
          description: ''
        firstComeFirstServe:
          type: boolean
          description: ''
        description: ''
      required:
        - managerOnly
        - collectionId
        - creatorOnly
        - firstComeFirstServe
      additionalProperties: false
      type: object
      description: ''
    iValueOptions:
      properties:
        noDuplicates:
          type: boolean
          description: ''
        permanentOnceSet:
          type: boolean
          description: ''
        expectUint:
          type: boolean
          description: ''
        expectBoolean:
          type: boolean
          description: ''
        expectAddress:
          type: boolean
          description: ''
        expectUri:
          type: boolean
          description: ''
        description: ''
      required:
        - noDuplicates
        - permanentOnceSet
        - expectUint
        - expectBoolean
        - expectAddress
        - expectUri
      additionalProperties: false
      type: object
      description: ''
    iMapPermissions:
      properties:
        canUpdateMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          type: array
          description: ''
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          type: array
          description: ''
        canDeleteMap:
          items:
            $ref: '#/components/schemas/iActionPermission'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - canUpdateMetadata
        - canUpdateManager
        - canDeleteMap
      additionalProperties: false
      type: object
      description: ''
    iMap:
      properties:
        creator:
          type: string
          description: ''
        mapId:
          type: string
          description: ''
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
          description: ''
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          type: array
          description: ''
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
          description: ''
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
          description: ''
        defaultValue:
          type: string
          description: ''
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
          description: ''
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
            description: ''
          type: array
          description: ''
        description: ''
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
      additionalProperties: false
      type: object
      description: ''
    iMapMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          type: array
          description: ''
        metadata:
          $ref: '#/components/schemas/iCollectionMetadata'
          description: ''
        description: ''
      required:
        - timelineTimes
        - metadata
      additionalProperties: false
      type: object
      description: ''
    iMsgCreateMap:
      properties:
        creator:
          type: string
          description: ''
        mapId:
          type: string
          description: ''
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
          description: ''
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          type: array
          description: ''
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
          description: ''
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
          description: ''
        defaultValue:
          type: string
          description: ''
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
            description: ''
          type: array
          description: ''
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
          description: ''
        description: ''
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - metadataTimeline
        - permissions
      additionalProperties: false
      type: object
      description: ''
    iMsgUpdateMap:
      properties:
        creator:
          type: string
          description: ''
        mapId:
          type: string
          description: ''
        updateManagerTimeline:
          type: boolean
          description: ''
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          type: array
          description: ''
        updateMetadataTimeline:
          type: boolean
          description: ''
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
            description: ''
          type: array
          description: ''
        updatePermissions:
          type: boolean
          description: ''
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
          description: ''
        description: ''
      required:
        - creator
        - mapId
        - updateManagerTimeline
        - managerTimeline
        - updateMetadataTimeline
        - metadataTimeline
        - updatePermissions
        - permissions
      additionalProperties: false
      type: object
      description: ''
    iMsgDeleteMap:
      properties:
        creator:
          type: string
          description: ''
        mapId:
          type: string
          description: ''
        description: ''
      required:
        - creator
        - mapId
      additionalProperties: false
      type: object
      description: ''
    iMsgSetValue:
      properties:
        creator:
          type: string
          description: ''
        mapId:
          type: string
          description: ''
        key:
          type: string
          description: ''
        value:
          type: string
          description: ''
        options:
          $ref: '#/components/schemas/iSetOptions'
          description: ''
        description: ''
      required:
        - creator
        - mapId
        - key
        - value
        - options
      additionalProperties: false
      type: object
      description: ''
    iSetOptions:
      properties:
        useMostRecentCollectionId:
          type: boolean
          description: ''
        description: ''
      required:
        - useMostRecentCollectionId
      additionalProperties: false
      type: object
      description: ''
    iMsgCreateAddressLists:
      properties:
        creator:
          description: The creator of the transaction.
          type: string
        addressLists:
          items:
            $ref: '#/components/schemas/iAddressList'
            description: ''
          description: The address lists to create.
          type: array
        description: ''
      required:
        - creator
        - addressLists
      additionalProperties: false
      type: object
      description: ''
    iMsgCreateCollection:
      properties:
        creator:
          description: The creator of the transaction.
          type: string
        balancesType:
          description: >-
            The balances type. Either "Standard", "Off-Chain - Indexed",
            "Off-Chain - Non-Indexed" or "Non-Public"
          type: string
        defaultBalances:
          $ref: '#/components/schemas/iUserBalanceStore'
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only can be set on initial creation. Only used if
            collection has "Standard" balance type.
        badgesToCreate:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: >-
            The badges to create. Newly created badges will be sent to the
            "Mint" address. Must have necessary permissions in future
            transactions to update. However, no restrictions in this genesis
            Msg. Only used if collection has "Standard" balance type.
          type: array
        collectionPermissions:
          $ref: '#/components/schemas/iCollectionPermissions'
          description: >-
            The new collection permissions. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg.
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          description: >-
            The new manager timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
            description: ''
          description: >-
            The new collection metadata timeline. Must have the necessary
            permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
            description: ''
          description: >-
            The new badge metadata timeline. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg. Note we take first-match only for badge IDs, so do not
            define duplicates.
          type: array
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
            description: ''
          description: >-
            The new off-chain balances metadata timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
            or "Off-Chain - Non-Indexed" balance type.
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
            description: ''
          description: >-
            The new custom data timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
            description: ''
          description: >-
            The new collection approved transfers timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
            description: ''
          description: >-
            The new standards timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
            description: ''
          description: >-
            The new is archived timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        description: ''
      required:
        - creator
      additionalProperties: false
      type: object
      description: ''
    iMsgDeleteCollection:
      properties:
        creator:
          description: The creator of the transaction.
          type: string
        collectionId:
          description: The ID of the collection to delete.
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - creator
        - collectionId
      additionalProperties: false
      type: object
      description: ''
    iMsgTransferBadges:
      properties:
        creator:
          description: The creator of the transaction.
          type: string
        collectionId:
          description: The ID of the collection to transfer badges from.
          $ref: '#/components/schemas/NumberType'
        transfers:
          items:
            $ref: '#/components/schemas/iTransfer'
            description: ''
          description: The transfers to perform.
          type: array
        description: ''
      required:
        - creator
        - collectionId
        - transfers
      additionalProperties: false
      type: object
      description: ''
    iMsgUniversalUpdateCollection:
      properties:
        creator:
          description: The creator of the transaction.
          type: string
        balancesType:
          description: >-
            The balances type. Either "Standard", "Off-Chain - Indexed",
            "Off-Chain - Non-Indexed" or "Non-Public"
          type: string
        defaultBalances:
          $ref: '#/components/schemas/iUserBalanceStore'
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only can be set on initial creation. Only used if
            collection has "Standard" balance type.
        badgesToCreate:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: >-
            The badges to create. Newly created badges will be sent to the
            "Mint" address. Must have necessary permissions in future
            transactions to update. However, no restrictions in this genesis
            Msg. Only used if collection has "Standard" balance type.
          type: array
        collectionPermissions:
          $ref: '#/components/schemas/iCollectionPermissions'
          description: >-
            The new collection permissions. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg.
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            description: ''
          description: >-
            The new manager timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
            description: ''
          description: >-
            The new collection metadata timeline. Must have the necessary
            permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
            description: ''
          description: >-
            The new badge metadata timeline. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg. Note we take first-match only for badge IDs, so do not
            define duplicates.
          type: array
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
            description: ''
          description: >-
            The new off-chain balances metadata timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
            or "Off-Chain - Non-Indexed" balance type.
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
            description: ''
          description: >-
            The new custom data timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
            description: ''
          description: >-
            The new collection approved transfers timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
            description: ''
          description: >-
            The new standards timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
            description: ''
          description: >-
            The new is archived timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionId:
          description: The ID of the collection to update.
          $ref: '#/components/schemas/NumberType'
        updateCollectionPermissions:
          description: Whether or not to update the collection permissions.
          type: boolean
        updateManagerTimeline:
          description: Whether or not to update the manager timeline.
          type: boolean
        updateCollectionMetadataTimeline:
          description: Whether or not to update the collection metadata timeline.
          type: boolean
        updateBadgeMetadataTimeline:
          description: Whether or not to update the badge metadata timeline.
          type: boolean
        updateOffChainBalancesMetadataTimeline:
          description: Whether or not to update the off-chain balances metadata timeline.
          type: boolean
        updateCustomDataTimeline:
          description: Whether or not to update the custom data timeline.
          type: boolean
        updateCollectionApprovals:
          description: Whether or not to update the collection approved transfers timeline.
          type: boolean
        updateStandardsTimeline:
          description: Whether or not to update the standards timeline.
          type: boolean
        updateIsArchivedTimeline:
          description: Whether or not to update the is archived timeline.
          type: boolean
        description: ''
      required:
        - creator
        - collectionId
      additionalProperties: false
      type: object
      description: ''
    iMsgUpdateCollection:
      additionalProperties: false
      type: object
      description: ''
    iMsgUpdateUserApprovals:
      properties:
        creator:
          description: The creator of the transaction.
          type: string
        collectionId:
          description: The ID of the collection to transfer badges from.
          $ref: '#/components/schemas/NumberType'
        updateOutgoingApprovals:
          description: Whether or not to update the outgoing approvals.
          type: boolean
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
            description: ''
          description: >-
            The new outgoing approvals. Must have the necessary permissions to
            update.
          type: array
        updateIncomingApprovals:
          description: Whether or not to update the incoming approvals.
          type: boolean
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
            description: ''
          description: >-
            The new incoming approvals. Must have the necessary permissions to
            update.
          type: array
        updateAutoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether or not to update the auto approve self initiated outgoing
            transfers (i.e. from == the user and initiator == the user).
          type: boolean
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            The new auto approve self initiated outgoing transfers. Must have
            the necessary permissions to update.
          type: boolean
        updateAutoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether or not to update the auto approve self initiated incoming
            transfers (i.e. to == the user and initiator == the user).
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            The new auto approve self initiated incoming transfers. Must have
            the necessary permissions to update.
          type: boolean
        updateUserPermissions:
          description: Whether or not to update the user permissions.
          type: boolean
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          description: >-
            The new user permissions. Must have the necessary permissions to
            update.
        description: ''
      required:
        - creator
        - collectionId
      additionalProperties: false
      type: object
      description: ''
    SupportedChainType:
      enum:
        - Bitcoin
        - Ethereum
        - Cosmos
        - Solana
        - Unknown
      description: >-
        Safe adds two uints and returns an error if the result is invalid. Keeps
        the right type.
      type: string
    JSPrimitiveNumberType:
      description: >-
        JSPrimitiveNumberType is a type that can be used to represent a number
        in JavaScript in multiple ways.

        Because the blockchain supports numbers > 2^53, we need to use BigInts
        or strings to represent them.


        JSPrimitiveNumberType is a union of all the types that can be used to
        represent a number in JavaScript.

        This is the same as NumberType, but without BigInts because they are not
        a primitive.
      $ref: '#/components/schemas/NumberType'
    iUserPermissions:
      properties:
        canUpdateOutgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApprovalPermission'
            description: ''
          description: The list of permissions for updating approved outgoing transfers.
          type: array
        canUpdateIncomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApprovalPermission'
            description: ''
          description: The list of permissions for updating approved incoming transfers.
          type: array
        canUpdateAutoApproveSelfInitiatedOutgoingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
            description: ''
          description: >-
            The permissions for updating auto-approving self-initiated outgoing
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all outgoing transfers that are
            self-initiated.
          type: array
        canUpdateAutoApproveSelfInitiatedIncomingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
            description: ''
          description: >-
            The permissions for updating auto-approving self-initiated incoming
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all incoming transfers that are
            self-initiated.
          type: array
        description: ''
      required:
        - canUpdateOutgoingApprovals
        - canUpdateIncomingApprovals
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      type: object
      description: ''
    iUserOutgoingApprovalPermission:
      properties:
        toListId:
          description: The list ID of the to addresses of the approved outgoing transfers.
          type: string
        toList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved outgoing
            transfers.
          type: string
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The transfer times of the approved outgoing transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs of the approved outgoing transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The owned times of the approved outgoing transfers.
          type: array
        approvalId:
          description: >-
            The approval ID of the approved outgoing transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The permitted times of the approved outgoing transfers.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The forbidden times of the approved outgoing transfers.
          type: array
        description: ''
      required:
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
      description: ''
    iUserIncomingApprovalPermission:
      properties:
        fromListId:
          description: >-
            The list ID of the from addresses of the approved incoming
            transfers.
          type: string
        fromList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved incoming
            transfers.
          type: string
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The transfer times of the approved incoming transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs of the approved incoming transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The owned times of the approved incoming transfers.
          type: array
        approvalId:
          description: >-
            The approval ID of the approved incoming transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The permitted times of the approved incoming transfers.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The forbidden times of the approved incoming transfers.
          type: array
        description: ''
      required:
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
      description: ''
    iCollectionPermissions:
      properties:
        canDeleteCollection:
          items:
            $ref: '#/components/schemas/iActionPermission'
            description: ''
          description: The permissions for deleting the collection.
          type: array
        canArchiveCollection:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          description: The permissions for archiving the collection.
          type: array
        canUpdateOffChainBalancesMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          description: The permissions for updating the off-chain balances metadata.
          type: array
        canUpdateStandards:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          description: The permissions for updating the standards.
          type: array
        canUpdateCustomData:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          description: The permissions for updating the custom data.
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          description: The permissions for updating the manager.
          type: array
        canUpdateCollectionMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            description: ''
          description: The permissions for updating the collection metadata.
          type: array
        canCreateMoreBadges:
          items:
            $ref: '#/components/schemas/iBalancesActionPermission'
            description: ''
          description: The permissions for creating more badges.
          type: array
        canUpdateBadgeMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
            description: ''
          description: The permissions for updating the badge metadata.
          type: array
        canUpdateCollectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApprovalPermission'
            description: ''
          description: The permissions for updating the collection approved transfers.
          type: array
        description: ''
      required:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateBadgeMetadata
        - canUpdateCollectionApprovals
      additionalProperties: false
      type: object
      description: ''
    iActionPermission:
      properties:
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The forbidden times of the permission.
          type: array
        description: ''
      required:
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
      description: ''
    iTimedUpdatePermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The timeline times that the permission applies to.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The forbidden times of the permission.
          type: array
        description: ''
      required:
        - timelineTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
      description: ''
    iBalancesActionPermission:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs that the permission applies to.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The owned times of the permission.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The forbidden times of the permission.
          type: array
        description: ''
      required:
        - badgeIds
        - ownershipTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
      description: ''
    iTimedUpdateWithBadgeIdsPermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The timeline times that the permission applies to.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs that the permission applies to.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The forbidden times of the permission.
          type: array
        description: ''
      required:
        - timelineTimes
        - badgeIds
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
      description: ''
    iCollectionApprovalPermission:
      properties:
        fromListId:
          description: The list ID of the from addresses of the approved transfers.
          type: string
        fromList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        toListId:
          description: The list ID of the to addresses of the approved transfers.
          type: string
        toList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        initiatedByListId:
          description: The list ID of the initiatedBy addresses of the approved transfers.
          type: string
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The transfer times of the approved transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs of the approved transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The owned times of the approved transfers.
          type: array
        approvalId:
          description: >-
            The approval ID of the approved transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The permitted times of this permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The forbidden times of this permission.
          type: array
        description: ''
      required:
        - fromListId
        - fromList
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
      description: ''
    iUintRange:
      properties:
        start:
          description: The start of the range.
          $ref: '#/components/schemas/NumberType'
        end:
          description: The end of the range, inclusive.
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - start
        - end
      additionalProperties: false
      type: object
      description: ''
    iBadgeMetadata:
      properties:
        uri:
          description: The URI where to fetch the badge metadata from.
          type: string
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs corresponding to the URI.
          type: array
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
        description: ''
      required:
        - uri
        - badgeIds
        - customData
      additionalProperties: false
      type: object
      description: ''
    iCollectionMetadata:
      properties:
        uri:
          description: The URI where to fetch the collection metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
        description: ''
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
      description: ''
    iOffChainBalancesMetadata:
      properties:
        uri:
          description: The URI where to fetch the off-chain balances metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
        description: ''
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
      description: ''
    iSecretsProof:
      properties:
        createdBy:
          type: string
          description: ''
        scheme:
          enum:
            - bbs
            - standard
          type: string
          description: ''
        messageFormat:
          enum:
            - plaintext
            - json
          type: string
          description: ''
        secretMessages:
          items:
            type: string
            description: ''
          type: array
          description: ''
        entropies:
          items:
            type: string
            description: ''
          type: array
          description: ''
        dataIntegrityProof:
          properties:
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        proofOfIssuance:
          properties:
            message:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            signature:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - message
            - signer
            - signature
          additionalProperties: false
          type: object
          description: ''
        name:
          type: string
          description: ''
        image:
          type: string
          description: ''
        description:
          type: string
          description: ''
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
            description: ''
          type: array
          description: ''
        anchors:
          items:
            properties:
              txHash:
                type: string
                description: ''
              message:
                type: string
                description: ''
              description: ''
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
      required:
        - createdBy
        - scheme
        - messageFormat
        - secretMessages
        - dataIntegrityProof
        - proofOfIssuance
        - name
        - image
        - description
      additionalProperties: false
      type: object
      description: ''
    iSecret:
      properties:
        createdBy:
          type: string
          description: ''
        messageFormat:
          enum:
            - plaintext
            - json
          type: string
          description: ''
        proofOfIssuance:
          properties:
            message:
              type: string
              description: ''
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        secretId:
          type: string
          description: ''
        type:
          type: string
          description: ''
        scheme:
          enum:
            - bbs
            - standard
          type: string
          description: ''
        secretMessages:
          items:
            type: string
            description: ''
          type: array
          description: ''
        dataIntegrityProof:
          properties:
            signature:
              type: string
              description: ''
            signer:
              type: string
              description: ''
            publicKey:
              type: string
              description: ''
            description: ''
          required:
            - signature
            - signer
          additionalProperties: false
          type: object
          description: ''
        name:
          type: string
          description: ''
        image:
          type: string
          description: ''
        description:
          type: string
          description: ''
        viewers:
          items:
            type: string
            description: ''
          type: array
          description: ''
        anchors:
          items:
            properties:
              txHash:
                type: string
                description: ''
              message:
                type: string
                description: ''
              description: ''
            additionalProperties: false
            type: object
            description: ''
          type: array
          description: ''
      required:
        - createdBy
        - messageFormat
        - proofOfIssuance
        - secretId
        - type
        - scheme
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
        - viewers
        - anchors
      additionalProperties: false
      type: object
      description: ''
    iZkProof:
      properties:
        verificationKey:
          description: The verification key of the zkProof.
          type: string
        uri:
          description: The URI where to fetch the zkProof metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        zkpTrackerId:
          description: ZKP tracker ID.
          type: string
        description: ''
      required:
        - verificationKey
        - uri
        - customData
        - zkpTrackerId
      additionalProperties: false
      type: object
      description: ''
    iZkProofSolution:
      properties:
        proof:
          description: The proof of the zkProof.
          type: string
        publicInputs:
          description: The public inputs of the zkProof.
          type: string
        description: ''
      required:
        - proof
        - publicInputs
      additionalProperties: false
      type: object
      description: ''
    iMustOwnBadges:
      properties:
        collectionId:
          description: The collection ID of the badges to own.
          $ref: '#/components/schemas/NumberType'
        amountRange:
          $ref: '#/components/schemas/iUintRange'
          description: >-
            The min/max acceptable amount of badges that must be owned (can be
            any values, including 0-0).
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The range of the times that the badges must be owned.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The range of the badge IDs that must be owned.
          type: array
        overrideWithCurrentTime:
          description: Whether or not to override the ownershipTimes with the current time.
          type: boolean
        mustSatisfyForAllAssets:
          description: >-
            Whether or not the user must own all the specified badges. If false,
            we will accept if they meet criteria for at least one badge.
          type: boolean
        description: ''
      required:
        - collectionId
        - amountRange
        - ownershipTimes
        - badgeIds
        - overrideWithCurrentTime
        - mustSatisfyForAllAssets
      additionalProperties: false
      type: object
      description: ''
    iBalance:
      properties:
        amount:
          description: The amount or balance of the owned badge.
          $ref: '#/components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs corresponding to the balance.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times that the badge is owned from.
          type: array
        description: ''
      required:
        - amount
        - badgeIds
        - ownershipTimes
      additionalProperties: false
      type: object
      description: ''
    iAddressList:
      properties:
        listId:
          description: The ID of the address list.
          type: string
        addresses:
          items:
            type: string
            description: ''
          description: The addresses of the address list.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          type: string
        aliasAddress:
          description: The alias cosmos address of the address list.
          type: string
        description: ''
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
      additionalProperties: false
      type: object
      description: ''
    iTransfer:
      properties:
        from:
          description: The address to transfer from.
          type: string
        toAddresses:
          items:
            type: string
            description: ''
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
            description: ''
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
            description: ''
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.
          type: boolean
        zkProofSolutions:
          items:
            $ref: '#/components/schemas/iZkProofSolution'
            description: ''
          description: The zk proof solutions for approvals.
          type: array
        description: ''
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
      description: ''
    iApprovalIdentifierDetails:
      properties:
        approvalId:
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          description: >-
            The address of the approval to check. If approvalLevel is
            "collection", this is blank "".
          type: string
        description: ''
      required:
        - approvalId
        - approvalLevel
        - approverAddress
      additionalProperties: false
      type: object
      description: ''
    iCoinTransfer:
      properties:
        to:
          description: >-
            The recipient of the coin transfer. This should be a Bech32 Cosmos
            address.
          type: string
        coins:
          items:
            $ref: '#/components/schemas/iCosmosCoin'
            description: ''
          description: The coins
          type: array
        description: ''
      required:
        - to
        - coins
      additionalProperties: false
      type: object
      description: ''
    iAmountTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#/components/schemas/NumberType'
        approvalId:
          description: The approval ID
          type: string
        amountTrackerId:
          description: The amount tracker ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          description: The address of the approval to check.
          type: string
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          type: string
        description: ''
      required:
        - collectionId
        - approvalId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
      additionalProperties: false
      type: object
      description: ''
    iMerkleChallenge:
      properties:
        root:
          description: The root of the merkle tree.
          type: string
        expectedProofLength:
          description: The expected proof length of the merkle proof.
          $ref: '#/components/schemas/NumberType'
        useCreatorAddressAsLeaf:
          description: >-
            Whether or not to override any leaf value and use the creator
            address as the leaf. Used for whitelist trees.
          type: boolean
        maxUsesPerLeaf:
          description: >-
            Whether or not to enforce max uses per leaf. Used to prevent replay
            attacks.
          $ref: '#/components/schemas/NumberType'
        uri:
          description: The URI where to fetch the merkle challenge metadata from.
          type: string
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        challengeTrackerId:
          description: Tracker ID details for the merkle challenge.
          type: string
        description: ''
      required:
        - root
        - expectedProofLength
        - useCreatorAddressAsLeaf
        - maxUsesPerLeaf
        - uri
        - customData
        - challengeTrackerId
      additionalProperties: false
      type: object
      description: ''
    iMerklePathItem:
      properties:
        aunt:
          description: The aunt of the merkle path item.
          type: string
        onRight:
          description: Indicates whether the aunt node is on the right side of the path.
          type: boolean
        description: ''
      required:
        - aunt
        - onRight
      additionalProperties: false
      type: object
      description: ''
    iMerkleProof:
      properties:
        aunts:
          items:
            $ref: '#/components/schemas/iMerklePathItem'
            description: ''
          description: The aunts of the merkle proof.
          type: array
        leaf:
          description: >-
            The leaf of the merkle proof. If useCreatorAddressAsLeaf is true,
            this will be populated with the creator Cosmos address.
          type: string
        description: ''
      required:
        - aunts
        - leaf
      additionalProperties: false
      type: object
      description: ''
    iTimelineItem:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        description: ''
      required:
        - timelineTimes
      additionalProperties: false
      type: object
      description: ''
    iManagerTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        manager:
          description: The manager of the collection.
          type: string
        description: ''
      required:
        - timelineTimes
        - manager
      additionalProperties: false
      type: object
      description: ''
    iCollectionMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        collectionMetadata:
          $ref: '#/components/schemas/iCollectionMetadata'
          description: The collection metadata.
        description: ''
      required:
        - timelineTimes
        - collectionMetadata
      additionalProperties: false
      type: object
      description: ''
    iBadgeMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        badgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadata'
            description: ''
          description: The badge metadata.
          type: array
        description: ''
      required:
        - timelineTimes
        - badgeMetadata
      additionalProperties: false
      type: object
      description: ''
    iOffChainBalancesMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        offChainBalancesMetadata:
          $ref: '#/components/schemas/iOffChainBalancesMetadata'
          description: The off-chain balances metadata.
        description: ''
      required:
        - timelineTimes
        - offChainBalancesMetadata
      additionalProperties: false
      type: object
      description: ''
    iCustomDataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        customData:
          description: Arbitrary custom data.
          type: string
        description: ''
      required:
        - timelineTimes
        - customData
      additionalProperties: false
      type: object
      description: ''
    iStandardsTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        standards:
          items:
            type: string
            description: ''
          description: The standards.
          type: array
        description: ''
      required:
        - timelineTimes
        - standards
      additionalProperties: false
      type: object
      description: ''
    iIsArchivedTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        isArchived:
          description: Whether the collection is archived.
          type: boolean
        description: ''
      required:
        - timelineTimes
        - isArchived
      additionalProperties: false
      type: object
      description: ''
    iUserOutgoingApproval:
      properties:
        toListId:
          type: string
          description: ''
        toList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        initiatedByListId:
          type: string
          description: ''
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          type: array
          description: ''
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          type: array
          description: ''
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          type: array
          description: ''
        approvalId:
          type: string
          description: ''
        uri:
          type: string
          description: ''
        customData:
          type: string
          description: ''
        approvalCriteria:
          $ref: '#/components/schemas/iOutgoingApprovalCriteria'
          description: ''
        description: ''
      required:
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
      additionalProperties: false
      type: object
      description: ''
    iOutgoingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
            description: ''
          description: The list of must own badges to be approved.
          type: array
        zkProofs:
          items:
            $ref: '#/components/schemas/iZkProof'
            description: ''
          description: >-
            The list of ZK proofs that need to be satisfied. One use per proof
            solution.
          type: array
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
            description: ''
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
            description: ''
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          description: The predetermined balances for each transfer.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          description: The max num transfers for this approval.
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iPredeterminedBalances:
      properties:
        manualBalances:
          items:
            $ref: '#/components/schemas/iManualBalances'
            description: ''
          description: >-
            Manually define the balances for each transfer. Cannot be used with
            incrementedBalances. Order number corresponds to the index of the
            balance in the array.
          type: array
        incrementedBalances:
          $ref: '#/components/schemas/iIncrementedBalances'
          description: >-
            Define a starting balance and increment the badge IDs and owned
            times by a certain amount after each transfer. Cannot be used with
            manualBalances. Order number corresponds to number of times we
            increment.
        orderCalculationMethod:
          $ref: '#/components/schemas/iPredeterminedOrderCalculationMethod'
          description: The order calculation method.
        description: ''
      required:
        - manualBalances
        - incrementedBalances
        - orderCalculationMethod
      additionalProperties: false
      type: object
      description: ''
    iManualBalances:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: >-
            The list of balances for each transfer. Order number corresponds to
            the index of the balance in the array.
          type: array
        description: ''
      required:
        - balances
      additionalProperties: false
      type: object
      description: ''
    iIncrementedBalances:
      properties:
        startBalances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: >-
            The starting balances for each transfer. Order number corresponds to
            the number of times we increment.
          type: array
        incrementBadgeIdsBy:
          description: The amount to increment the badge IDs by after each transfer.
          $ref: '#/components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: The amount to increment the owned times by after each transfer.
          $ref: '#/components/schemas/NumberType'
        description: ''
      required:
        - startBalances
        - incrementBadgeIdsBy
        - incrementOwnershipTimesBy
      additionalProperties: false
      type: object
      description: ''
    iPredeterminedOrderCalculationMethod:
      properties:
        useOverallNumTransfers:
          description: >-
            Use the overall number of transfers this approval has been used with
            as the order number. Ex: If this approval has been used 2 times by
            ANY address, then the order number for the next transfer will be 3.
          type: boolean
        usePerToAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each to
            address as the order number. Ex: If this approval has been used 2
            times by to address A, then the order number for the next transfer
            by to address A will be 3.
          type: boolean
        usePerFromAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each from
            address as the order number. Ex: If this approval has been used 2
            times by from address A, then the order number for the next transfer
            by from address A will be 3.
          type: boolean
        usePerInitiatedByAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each
            initiated by address as the order number. Ex: If this approval has
            been used 2 times by initiated by address A, then the order number
            for the next transfer by initiated by address A will be 3.
          type: boolean
        useMerkleChallengeLeafIndex:
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: boolean
        challengeTrackerId:
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: string
        description: ''
      required:
        - useOverallNumTransfers
        - usePerToAddressNumTransfers
        - usePerFromAddressNumTransfers
        - usePerInitiatedByAddressNumTransfers
        - useMerkleChallengeLeafIndex
        - challengeTrackerId
      additionalProperties: false
      type: object
      description: ''
    iApprovalAmounts:
      properties:
        overallApprovalAmount:
          description: >-
            The overall maximum amount approved for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#/components/schemas/NumberType'
        perToAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each to address. Running tally that includes all transfers from each
            unique to address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perFromAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each from address. Running tally that includes all transfers from
            each unique from address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perInitiatedByAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each initiated by address. Running tally that includes all transfers
            from each unique initiated by address that match this approval.
          $ref: '#/components/schemas/NumberType'
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
        description: ''
      required:
        - overallApprovalAmount
        - perToAddressApprovalAmount
        - perFromAddressApprovalAmount
        - perInitiatedByAddressApprovalAmount
        - amountTrackerId
      additionalProperties: false
      type: object
      description: ''
    iMaxNumTransfers:
      properties:
        overallMaxNumTransfers:
          description: >-
            The overall maximum number of transfers for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#/components/schemas/NumberType'
        perToAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each to address. Running tally that includes all transfers from
            each unique to address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perFromAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each from address. Running tally that includes all transfers
            from each unique from address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perInitiatedByAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each initiated by address. Running tally that includes all
            transfers from each unique initiated by address that match this
            approval.
          $ref: '#/components/schemas/NumberType'
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
        description: ''
      required:
        - overallMaxNumTransfers
        - perToAddressMaxNumTransfers
        - perFromAddressMaxNumTransfers
        - perInitiatedByAddressMaxNumTransfers
        - amountTrackerId
      additionalProperties: false
      type: object
      description: ''
    iUserIncomingApproval:
      properties:
        fromListId:
          description: The list ID for the user(s) who is sending the badges.
          type: string
        fromList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        initiatedByListId:
          description: The list ID for the user(s) who initiate the transfer.
          type: string
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the transfer transaction.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs to be transferred.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The ownership times of the badges being transferred.
          type: array
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        uri:
          description: The URI of the approval.
          type: string
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iIncomingApprovalCriteria'
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
        description: ''
      required:
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
      additionalProperties: false
      type: object
      description: ''
    iIncomingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
            description: ''
          description: The list of must own badges to be approved.
          type: array
        zkProofs:
          items:
            $ref: '#/components/schemas/iZkProof'
            description: ''
          description: >-
            The list of ZK proofs that need to be satisfied. One use per proof
            solution.
          type: array
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
            description: ''
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
            description: ''
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          description: The predetermined balances for each transfer using this approval.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          description: The max num transfers for this approval.
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iCollectionApproval:
      properties:
        toListId:
          description: The list ID for the user(s) who is receiving the badges.
          type: string
        toList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        fromListId:
          description: The list ID for the user(s) who is sending the badges.
          type: string
        fromList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        initiatedByListId:
          description: The list ID for the user(s) who initiate the transfer.
          type: string
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          description: ''
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The times of the transfer transaction.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The badge IDs to be transferred.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            description: ''
          description: The ownership times of the badges being transferred.
          type: array
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        uri:
          description: The URI of the approval.
          type: string
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iApprovalCriteria'
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
        description: ''
      required:
        - toListId
        - toList
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
      additionalProperties: false
      type: object
      description: ''
    iApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
            description: ''
          description: The list of must own badges to be approved.
          type: array
        zkProofs:
          items:
            $ref: '#/components/schemas/iZkProof'
            description: ''
          description: >-
            The list of ZK proofs that need to be satisfied. One use per proof
            solution.
          type: array
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
            description: ''
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
            description: ''
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          description: The predetermined balances for each transfer.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          description: The max num transfers for this approval.
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
        overridesFromOutgoingApprovals:
          description: >-
            Whether this approval overrides the from address's approved outgoing
            transfers.
          type: boolean
        overridesToIncomingApprovals:
          description: >-
            Whether this approval overrides the to address's approved incoming
            transfers.
          type: boolean
        description: ''
      additionalProperties: false
      type: object
      description: ''
    iUserBalanceStore:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            description: ''
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
            description: ''
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
            description: ''
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        description: ''
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      description: >-
        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    description: ''
  description: ''
description: ''
