openapi: '3.0.2'
info:
  title: BitBadges API
  version: '0.1'
servers:
  - url: https://api.bitbadges.io/api/v0
paths:
  /status:
    post:
      operationId: getStatus
      summary: Get Status
      description: |
        Gets the current status details about the blockchain / indexer (gas, block height, etc).
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetStatusRouteSuccessResponse'
          description: Returns the current status of the blockchain / indexer

        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /search/{searchValue}:
    post:
      operationId: searchByValue
      summary: Search
      description: |
        Searches for collections, badges, accounts, and address lists based on the provided search value.
      parameters:
        - name: searchValue
          in: path
          description: The value to search for.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSearchRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSearchRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/batch:
    post:
      operationId: getCollectionsBatch
      summary: Retrieve badge collections
      description: Retrieves badge collections and associated details in batches.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCollectionBatchRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionBatchRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /collection/{collectionId}/{badgeId}/owners:
    post:
      operationId: getOwnersForBadge
      summary: Retrieve owners for a badge
      description: Retrieves the owners for a specific badge in a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID of the badge for which owners are to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOwnersForBadgeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetOwnersForBadgeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/balance/{cosmosAddress}:
    post:
      operationId: getBadgeBalanceByAddress
      summary: Retrieve badge balance by address
      description: Retrieves the balance of a specific badge for a specific address.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: cosmosAddress
          in: path
          description: The Cosmos address for which the badge balance is to be retrieved.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeBalanceByAddressRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeBalanceByAddressRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/{badgeId}/activity:
    post:
      operationId: getBadgeActivity
      summary: Retrieve activity for a badge
      description: Retrieves the activity for a specific badge in a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID of the badge for which activity is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeActivityRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeActivityRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /collection/{collectionId}/refresh:
    post:
      operationId: refreshMetadata
      summary: Trigger metadata refresh for a collection
      description: |
        Triggers a metadata refresh for a specific collection. BitBadges API uses a refresh queue system for fetching anything off-chain.
        This will refetch any details for the collection (such as metadata, balances, approval details, etc). Note it will reject if recently refreshed.
        Uses a cooldown of 5 minutes.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection to trigger metadata refresh.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshMetadataRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshMetadataRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /claims/{claimId}/{cosmosAddress}:
    post:
      operationId: checkAndCompleteClaim
      summary: Check and complete claim
      description: |
        Completes a claim for a user. This will check if the claim is valid and that all criteria is satisfied. If so, we perform the claim action.
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: cosmosAddress
          in: path
          description: The Cosmos address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckAndCompleteClaimRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckAndCompleteClaimRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /deleteReview/{reviewId}:
    post:
      operationId: deleteReview
      summary: Delete a review
      description: Deletes a review.
      parameters:
        - name: reviewId
          in: path
          description: The ID of the review to be deleted.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteReviewRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteReviewRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /collection/{collectionId}/addReview:
    post:
      operationId: addReviewForCollection
      summary: Add a review for a collection
      description: Adds a new review for a collection.
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection for which the review is being added.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewForCollectionRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddReviewForCollectionRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /user/batch:
    post:
      operationId: getAccounts
      summary: Get accounts and details
      description: Retrieves accounts and accompanying details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /user/{addressOrUsername}/addReview:
    post:
      operationId: addReviewForUser
      summary: Add a review for a user
      description: Adds a review for a user.
      parameters:
        - name: addressOrUsername
          in: path
          description: The address or username of the user for whom the review is being added.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewForUserRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddReviewForUserRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /user/updateAccount:
    post:
      operationId: updateAccountInfo
      summary: Update user account information
      description: Updates the profile/account information for a user. Only the provided fields will be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInfoRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAccountInfoRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /addBalancesToOffChainStorage:
    post:
      operationId: addBalancesToOffChainStorage
      summary: Add balance map to off-chain storage
      description: Adds a balance map to off-chain storage. Mode can either be 'ipfs' for storing on IPFS or 'centralized' for storing on DigitalOcean.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBalancesToOffChainStorageRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddBalancesToOffChainStorageRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /addMetadataToIpfs:
    post:
      operationId: addMetadataToIpfs
      summary: Add metadata to IPFS
      description: Adds metadata to IPFS.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMetadataToIpfsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddMetadataToIpfsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /addApprovalDetailsToOffChainStorage:
    post:
      operationId: addApprovalDetailsToOffChainStorage
      summary: Add approval details to off-chain storage
      description: Adds approval details to off-chain storage.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddApprovalDetailsToOffChainStorageRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iAddApprovalDetailsToOffChainStorageRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
        - frontendOnly: []
  /auth/getChallenge:
    post:
      operationId: getSignInChallenge
      summary: Get Blockin sign-in challenge
      description: Gets the Blockin sign-in challenge to be signed for authentication. The returned blockinMessage is the message to be signed by the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSignInChallengeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSignInChallengeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/verify:
    post:
      operationId: verifySignIn
      summary: Verify user sign-in
      description: Verifies the user-signed challenge and grants them a valid session if everything checks out.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySignInRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iVerifySignInRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/status:
    post:
      operationId: checkIfSignedIn
      summary: Check user sign-in status
      description: Checks if the user is signed in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckSignInStatusRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckSignInStatusRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /auth/logout:
    post:
      operationId: signOut
      summary: Sign out user
      description: Signs the user out.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSignOutSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /browse:
    post:
      operationId: getBrowseCollections
      summary: Get browse collections
      description: Gets details for a browse/explore page.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBrowseCollectionsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBrowseCollectionsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /broadcast:
    post:
      operationId: broadcastTx
      summary: Broadcast transaction
      description: Broadcasts a transaction to the blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BroadcastTxRouteRequestBody'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBroadcastTxRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /simulate:
    post:
      operationId: simulateTx
      summary: Simulate transaction
      description: Simulates a transaction on the blockchain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SimulateTxRouteRequestBody'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateTxRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /metadata:
    post:
      operationId: fetchMetadataDirectly
      summary: Fetch metadata directly from IPFS
      description: Fetches arbitrary metadata directly from IPFS. This is useful for fetching metadata that is not stored on-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchMetadataDirectlyRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFetchMetadataDirectlyRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - frontendOnly: []
  /addressList/update:
    post:
      operationId: updateAddressLists
      summary: Update or create address lists
      description: Updates or creates address lists stored by BitBadges centralized servers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userIsOwner: []
        - userSignedIn: []
  /addressList:
    post:
      operationId: getAddressLists
      summary: Get address lists
      description: Gets address lists. Can be on-chain or off-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userMaybeSignedIn: []
  /addressList/delete:
    post:
      operationId: deleteAddressLists
      summary: Delete address lists
      description: Deletes address lists. Must be created off-chain.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAddressListsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAddressListsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userIsOwner: []
        - userSignedIn: []
  /authCode:
    post:
      operationId: getAuthCode
      summary: Get Blockin authentication code
      description: Gets a Blockin authentication code. This is used for signing in with Blockin at in-person events. Anyone with the signature is able to fetch the preimage message.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /authCode/create:
    post:
      operationId: createAuthCode
      summary: Create Blockin authentication code
      description: Creates a Blockin authentication code. This is used for signing in with Blockin at in-person events.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /authCode/delete:
    post:
      operationId: deleteAuthCode
      summary: Delete Blockin authentication code
      description: Deletes a Blockin authentication code. This is used for signing in with Blockin at in-person events.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBlockinAuthCodeRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteBlockinAuthCodeRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /auth/verifyGeneric:
    post:
      operationId: verifySignInGeneric
      summary: Verify Blockin sign-in requests (generic)
      description: A generic route for verifying Blockin sign-in requests. Used as a helper if implementing Blockin on your own.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericBlockinVerifyRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenericBlockinVerifyRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
  /sendClaimAlerts:
    post:
      operationId: sendClaimAlert
      summary: Sends claim alert notifications
      description: Sends claim alert notifications out.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendClaimAlertsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSendClaimAlertsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: [] # This specifies that an API key is required for authentication
        - userSignedIn: []
  /getFollowDetails:
    post:
      operationId: getFollowDetails
      summary: Gets follow details for a user
      description: Gets the follow details for a user with the BitBadges follow protocol.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFollowDetailsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetFollowDetailsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /getClaimAlerts:
    post:
      operationId: getClaimAlerts
      summary: Gets claim alerts for a collection
      description: Gets claim alerts for a collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimAlertsForCollectionRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAlertsForCollectionRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
        - userSignedIn: []
        - userIsManager: []
  /getRefreshStatus:
    post:
      operationId: getRefreshStatus
      summary: Gets the refresh status for a collection
      description: Gets the refresh status for a collection. Used to track if any errors occur during a refresh, or if it is in the queue or not.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NumberType'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshStatusRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /getProtocol:
    post:
      operationId: getProtocol
      summary: Get protocol details by name
      description: Get protocol details by name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetProtocolsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetProtocolsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /getCollectionForProtocol:
    post:
      operationId: getCollectionForProtocol
      summary: Get the collection ID set by a user for a protocol
      description: Get the collection ID set by a user for a protocol.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCollectionForProtocolRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionForProtocolRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []

  /filterBadgesInCollection:
    post:
      operationId: filterBadgesInCollection
      summary: Filter badges in a collection based on multiple filter values
      description: Filter badges in a collection based on multiple filter values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterBadgesInCollectionRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFilterBadgesInCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /appleWalletPass:
    post:
      operationId: generateAppleWalletPass
      summary: Generate an Apple Wallet pass
      description: |
        Generate an Apple Wallet pass based on the provided request body. 
        ```tsx
         <a
              onClick={async () => {
                const res = await BitBadgesApi.generateAppleWalletPass({
                  name: authCode.name,
                  description: authCode.description,
                  signature: authCode.signature,
                  message: createChallenge(authCode.params)
                });
                const pass = Buffer.from(res.data);

                const blob = new Blob([pass], { type: 'application/vnd.apple.pkpass' });
                const url = window.URL.createObjectURL(blob);
                if (url) {
                  const link = document.createElement('a');
                  link.href = url;
                  link.download = 'bitbadges.pkpass';
                  link.click();
                }
              }}>
              <img src="/images/add_to_apple_wallet.svg" style={{ width: 150 }} />
            </a>
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAppleWalletPassRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateAppleWalletPassRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /claims:
    post:
      operationId: getClaims
      summary: Retrieve claims
      description: Retrieve claims based on the provided request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimsRouteRequestBody'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimsRouteSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
        - userMaybeSignedIn: []
components:
  responses:
    ErrorResponse:
      description: An error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestResponse:
      description: Bad Request - Invalid configuration or request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedResponse:
      description: Unauthorized - Does not meet authnetication requirements. This can be due to an invalid API key, CORS origin, or session cookie.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: Requires a BitBadges API key for requests
      x-type: string
    frontendOnly:
      type: apiKey
      in: header
      name: Origin
      description: Can only be called by the official BitBadges frontend. Not for developer use.
    userSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in with a valid session.
    userMaybeSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in for certain requests, but not all.
    userIsManager:
      type: http
      scheme: cookie
      description: User must be signed in and have manager permissions.
    userIsOwner:
      type: http
      scheme: cookie
      description: User must be signed in and have owner permissions.
  schemas:
    ErrorResponse:
      type: object
      required:
        - errorMessage
      properties:
        error:
          type: object
          description: Serialized error object for debugging purposes. Technical users can use this to debug issues.
        errorMessage:
          type: string
          description: UX-friendly error message that can be displayed to the user. Always present if error.
        unauthorized:
          type: boolean
          description: Authentication error. Present if the user is not authenticated.
    NumberType:
      anyOf:
        - type: string
        - type: number
      example: '1'
      description: String numbers are always returned to avoid precision loss. You may pass in request bodies as numbers or strings. See SDK docs for NumberType conversions.
    BlockinChallengeParams:
      properties:
        domain:
          title: BlockinChallengeParams.domain
          description: The domain of the challenge.
          type: string
        statement:
          title: BlockinChallengeParams.statement
          description: The statement of the challenge.
          type: string
        address:
          title: BlockinChallengeParams.address
          description: The address of the challenge.
          type: string
        uri:
          title: BlockinChallengeParams.uri
          description: The URI of the challenge.
          type: string
        nonce:
          title: BlockinChallengeParams.nonce
          description: The nonce of the challenge.
          type: string
        version:
          title: BlockinChallengeParams.version
          description: The version of the challenge.
          type: string
        chainId:
          title: BlockinChallengeParams.chainId
          description: The chain ID of the challenge.
          type: string
        issuedAt:
          title: BlockinChallengeParams.issuedAt
          description: The issued at time of the challenge.
          type: string
        expirationDate:
          title: BlockinChallengeParams.expirationDate
          description: The expiration date of the challenge.
          type: string
        notBefore:
          title: BlockinChallengeParams.notBefore
          description: The not before time of the challenge.
          type: string
        resources:
          items:
            title: BlockinChallengeParams.resources.[]
            type: string
          title: BlockinChallengeParams.resources
          type: array
        assetOwnershipRequirements:
          title: BlockinChallengeParams.assetOwnershipRequirements
          description: The asset ownership requirements of the challenge.
      required:
        - domain
        - statement
        - address
        - uri
        - nonce
      additionalProperties: false
      title: BlockinChallengeParams
      type: object

    # -------------------------------------------------------------COPIED FROM JS SCRIPT-------------------------------------------------------------
    Doc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
      required:
        - _docId
      additionalProperties: false
      title: Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iBitBadgesCollection:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          title: iCollectionDoc.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
            title: iCollectionDoc.collectionMetadataTimeline.[]
          title: iCollectionDoc.collectionMetadataTimeline
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
            title: iCollectionDoc.badgeMetadataTimeline.[]
          title: iCollectionDoc.badgeMetadataTimeline
          description: The badge metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Inherited
            - Off-Chain - Non-Indexed
          title: iCollectionDoc.balancesType
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Inherited, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
            title: iCollectionDoc.offChainBalancesMetadataTimeline.[]
          title: iCollectionDoc.offChainBalancesMetadataTimeline
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
            title: iCollectionDoc.customDataTimeline.[]
          title: iCollectionDoc.customDataTimeline
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            title: iCollectionDoc.managerTimeline.[]
          title: iCollectionDoc.managerTimeline
          description: The manager timeline
          type: array
        collectionPermissions:
          $ref: '#/components/schemas/iCollectionPermissions'
          title: iCollectionDoc.collectionPermissions
          description: The collection permissions
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
            title: iCollectionDoc.collectionApprovals.[]
          title: iCollectionDoc.collectionApprovals
          description: The collection approved transfers timeline
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
            title: iCollectionDoc.standardsTimeline.[]
          title: iCollectionDoc.standardsTimeline
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
            title: iCollectionDoc.isArchivedTimeline.[]
          title: iCollectionDoc.isArchivedTimeline
          description: The is archived timeline
          type: array
        defaultBalances:
          $ref: '#/components/schemas/iUserBalanceStore'
          title: iCollectionDoc.defaultBalances
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only used if collection has "Standard" balance type.
        createdBy:
          title: iCollectionDoc.createdBy
          description: The cosmos address of the user who created this collection
          type: string
        createdBlock:
          title: iCollectionDoc.createdBlock
          description: The block number when this collection was created
          $ref: '#components/schemas/NumberType'
        createdTimestamp:
          title: iCollectionDoc.createdTimestamp
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        updateHistory:
          items:
            properties:
              txHash:
                title: iCollectionDoc.updateHistory.[].txHash
                type: string
              block:
                title: iCollectionDoc.updateHistory.[].block
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                title: iCollectionDoc.updateHistory.[].blockTimestamp
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            title: iCollectionDoc.updateHistory.[]
            type: object
          title: iCollectionDoc.updateHistory
          description: The update history of this collection
          type: array
        aliasAddress:
          title: iCollectionDoc.aliasAddress
          description: The alias cosmos address for the collection
          type: string
        cachedCollectionMetadata:
          $ref: '#/components/schemas/iMetadata'
          title: iBitBadgesCollection.cachedCollectionMetadata
          description: >-
            The fetched collection metadata for this collection. Will only be
            fetched if requested. It is your responsibility to join this data.
        cachedBadgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadataDetails'
            title: iBitBadgesCollection.cachedBadgeMetadata.[]
          title: iBitBadgesCollection.cachedBadgeMetadata
          description: >-
            The fetched badge metadata for this collection. Will only be fetched
            if requested. It is your responsibility to join this data.
          type: array
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            title: iBitBadgesCollection.activity.[]
          title: iBitBadgesCollection.activity
          description: >-
            The fetched activity for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
            title: iBitBadgesCollection.reviews.[]
          title: iBitBadgesCollection.reviews
          description: >-
            The fetched reviews for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
            title: iBitBadgesCollection.owners.[]
          title: iBitBadgesCollection.owners
          description: >-
            The fetched owners of this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
            title: iBitBadgesCollection.merkleChallenges.[]
          title: iBitBadgesCollection.merkleChallenges
          description: >-
            The fetched merkle challenges for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
            title: iBitBadgesCollection.approvalTrackers.[]
          title: iBitBadgesCollection.approvalTrackers
          description: >-
            The fetched approval trackers for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        nsfw:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
                title: iBitBadgesCollection.nsfw.badgeIds.[]
              title: iBitBadgesCollection.nsfw.badgeIds
              type: array
            reason:
              title: iBitBadgesCollection.nsfw.reason
              type: string
          required:
            - badgeIds
            - reason
          additionalProperties: false
          title: iBitBadgesCollection.nsfw
          description: The badge IDs in this collection that are marked as NSFW.
          type: object
        reported:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
                title: iBitBadgesCollection.reported.badgeIds.[]
              title: iBitBadgesCollection.reported.badgeIds
              type: array
            reason:
              title: iBitBadgesCollection.reported.reason
              type: string
          required:
            - badgeIds
            - reason
          additionalProperties: false
          title: iBitBadgesCollection.reported
          description: The badge IDs in this collection that have been reported.
          type: object
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  title: ids.[]
                  type: string
                title: ids
                type: array
              type:
                title: type
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
                title: pagination
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          title: iBitBadgesCollection.views
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        offChainClaims:
          items:
            properties:
              claimId:
                title: iBitBadgesCollection.offChainClaims.[].claimId
                type: string
              plugins:
                items: {}
                title: iBitBadgesCollection.offChainClaims.[].plugins
                type: array
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
                title: iBitBadgesCollection.offChainClaims.[].balancesToSet
              manualDistribution:
                title: iBitBadgesCollection.offChainClaims.[].manualDistribution
                type: boolean
            required:
              - claimId
              - plugins
              - balancesToSet
            additionalProperties: false
            title: iBitBadgesCollection.offChainClaims.[]
            type: object
          title: iBitBadgesCollection.offChainClaims
          description: >-
            Details about any off-chain claims for this collection. Only
            applicable when outsourced to BitBadges.
          type: array
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionPermissions
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - defaultBalances
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
        - cachedBadgeMetadata
        - activity
        - reviews
        - owners
        - merkleChallenges
        - approvalTrackers
        - views
        - offChainClaims
      additionalProperties: false
      title: iBitBadgesCollection, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iUpdateHistory:
      properties:
        txHash:
          title: iUpdateHistory.txHash
          type: string
        block:
          title: iUpdateHistory.block
          $ref: '#components/schemas/NumberType'
        blockTimestamp:
          title: iUpdateHistory.blockTimestamp
          $ref: '#components/schemas/NumberType'
      required:
        - txHash
        - block
        - blockTimestamp
      additionalProperties: false
      title: iUpdateHistory
      type: object
    ErrorDoc:
      properties:
        _docId:
          title: ErrorDoc._docId
          type: string
        _id:
          title: ErrorDoc._id
          type: string
        error:
          title: ErrorDoc.error
          type: string
        function:
          title: ErrorDoc.function
          type: string
      required:
        - _docId
        - error
        - function
      additionalProperties: false
      title: ErrorDoc
      type: object
    iNotificationPreferences:
      properties:
        email:
          title: iNotificationPreferences.email
          type: string
        emailVerification:
          $ref: '#/components/schemas/iEmailVerificationStatus'
          title: iNotificationPreferences.emailVerification
        preferences:
          properties:
            listActivity:
              title: iNotificationPreferences.preferences.listActivity
              type: boolean
            transferActivity:
              title: iNotificationPreferences.preferences.transferActivity
              type: boolean
            claimAlerts:
              title: iNotificationPreferences.preferences.claimAlerts
              type: boolean
          additionalProperties: false
          title: iNotificationPreferences.preferences
          type: object
      additionalProperties: false
      title: iNotificationPreferences
      type: object
    iEmailVerificationStatus:
      properties:
        verified:
          title: iEmailVerificationStatus.verified
          type: boolean
        token:
          title: iEmailVerificationStatus.token
          type: string
        expiry:
          title: iEmailVerificationStatus.expiry
          $ref: '#components/schemas/NumberType'
        antiPhishingCode:
          title: iEmailVerificationStatus.antiPhishingCode
          type: string
      additionalProperties: false
      title: iEmailVerificationStatus
      type: object
    iActivityDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          title: iActivityDoc.timestamp
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          title: iActivityDoc.block
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          title: iActivityDoc._notificationsHandled
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
      required:
        - _docId
        - timestamp
        - block
      additionalProperties: false
      title: iActivityDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iReviewDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          title: iActivityDoc.timestamp
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          title: iActivityDoc.block
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          title: iActivityDoc._notificationsHandled
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        review:
          title: iReviewDoc.review
          description: The review text (max 2048 characters).
          type: string
        stars:
          title: iReviewDoc.stars
          description: The number of stars given (1-5).
          $ref: '#components/schemas/NumberType'
        from:
          title: iReviewDoc.from
          description: The cosmos address of the user who gave the review.
          type: string
        collectionId:
          title: iReviewDoc.collectionId
          description: >-
            The collection ID of the collection that was reviewed. Only
            applicable to collection reviews.
          $ref: '#components/schemas/NumberType'
        reviewedAddress:
          title: iReviewDoc.reviewedAddress
          description: >-
            The cosmos address of the user who the review is for. Only
            applicable to user reviews.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - review
        - stars
        - from
      additionalProperties: false
      title: iReviewDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iTransferActivityDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          title: iActivityDoc.timestamp
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          title: iActivityDoc.block
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          title: iActivityDoc._notificationsHandled
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        to:
          items:
            title: iTransferActivityDoc.to.[]
            type: string
          title: iTransferActivityDoc.to
          description: The list of cosmos addresses that were involved in the activity.
          type: array
        from:
          title: iTransferActivityDoc.from
          description: The list of cosmos addresses that were involved in the activity.
          type: string
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iTransferActivityDoc.balances.[]
          title: iTransferActivityDoc.balances
          description: The list of balances and badge IDs that were transferred.
          type: array
        collectionId:
          title: iTransferActivityDoc.collectionId
          description: The collection ID of the collection that was transferred.
          $ref: '#components/schemas/NumberType'
        memo:
          title: iTransferActivityDoc.memo
          description: The memo of the transfer.
          type: string
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          title: iTransferActivityDoc.precalculateBalancesFromApproval
          description: Which approval to use to precalculate the balances.
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
            title: iTransferActivityDoc.prioritizedApprovals.[]
          title: iTransferActivityDoc.prioritizedApprovals
          description: The prioritized approvals of the transfer.
          type: array
        onlyCheckPrioritizedApprovals:
          title: iTransferActivityDoc.onlyCheckPrioritizedApprovals
          description: Whether or not to only check prioritized approvals.
          type: boolean
        initiatedBy:
          title: iTransferActivityDoc.initiatedBy
          description: The cosmos address of the user who initiated the activity.
          type: string
        txHash:
          title: iTransferActivityDoc.txHash
          description: The transaction hash of the activity.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - to
        - from
        - balances
        - collectionId
        - initiatedBy
      additionalProperties: false
      title: iTransferActivityDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iListActivityDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          title: iActivityDoc.timestamp
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          title: iActivityDoc.block
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          title: iActivityDoc._notificationsHandled
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        listId:
          title: iListActivityDoc.listId
          description: The list ID of the list.
          type: string
        addedToList:
          title: iListActivityDoc.addedToList
          description: >-
            Whether or not the address is included in the list. Note that this
            could mean added to an whitelist or a blacklist
          type: boolean
        addresses:
          items:
            title: iListActivityDoc.addresses.[]
            type: string
          title: iListActivityDoc.addresses
          description: The list of addresses that were added or removed from the list.
          type: array
        txHash:
          title: iListActivityDoc.txHash
          description: The transaction hash of the activity.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - listId
      additionalProperties: false
      title: iListActivityDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iClaimAlertDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          title: iActivityDoc.timestamp
          description: The timestamp  of the activity.
          $ref: '#components/schemas/NumberType'
        block:
          title: iActivityDoc.block
          description: The block number of the activity.
          $ref: '#components/schemas/NumberType'
        _notificationsHandled:
          title: iActivityDoc._notificationsHandled
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        code:
          title: iClaimAlertDoc.code
          description: The code of the claim alert.
          type: string
        cosmosAddresses:
          items:
            title: iClaimAlertDoc.cosmosAddresses.[]
            type: string
          title: iClaimAlertDoc.cosmosAddresses
          description: The cosmos addresses of the users that have been alerted.
          type: array
        collectionId:
          title: iClaimAlertDoc.collectionId
          description: The collection ID of the claim alert.
          $ref: '#components/schemas/NumberType'
        message:
          title: iClaimAlertDoc.message
          description: The message of the claim alert.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - cosmosAddresses
        - collectionId
      additionalProperties: false
      title: iClaimAlertDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iCollectionDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          title: iCollectionDoc.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
            title: iCollectionDoc.collectionMetadataTimeline.[]
          title: iCollectionDoc.collectionMetadataTimeline
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
            title: iCollectionDoc.badgeMetadataTimeline.[]
          title: iCollectionDoc.badgeMetadataTimeline
          description: The badge metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Inherited
            - Off-Chain - Non-Indexed
          title: iCollectionDoc.balancesType
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Inherited, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
            title: iCollectionDoc.offChainBalancesMetadataTimeline.[]
          title: iCollectionDoc.offChainBalancesMetadataTimeline
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
            title: iCollectionDoc.customDataTimeline.[]
          title: iCollectionDoc.customDataTimeline
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
            title: iCollectionDoc.managerTimeline.[]
          title: iCollectionDoc.managerTimeline
          description: The manager timeline
          type: array
        collectionPermissions:
          $ref: '#/components/schemas/iCollectionPermissions'
          title: iCollectionDoc.collectionPermissions
          description: The collection permissions
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
            title: iCollectionDoc.collectionApprovals.[]
          title: iCollectionDoc.collectionApprovals
          description: The collection approved transfers timeline
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
            title: iCollectionDoc.standardsTimeline.[]
          title: iCollectionDoc.standardsTimeline
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
            title: iCollectionDoc.isArchivedTimeline.[]
          title: iCollectionDoc.isArchivedTimeline
          description: The is archived timeline
          type: array
        defaultBalances:
          $ref: '#/components/schemas/iUserBalanceStore'
          title: iCollectionDoc.defaultBalances
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only used if collection has "Standard" balance type.
        createdBy:
          title: iCollectionDoc.createdBy
          description: The cosmos address of the user who created this collection
          type: string
        createdBlock:
          title: iCollectionDoc.createdBlock
          description: The block number when this collection was created
          $ref: '#components/schemas/NumberType'
        createdTimestamp:
          title: iCollectionDoc.createdTimestamp
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        updateHistory:
          items:
            properties:
              txHash:
                title: iCollectionDoc.updateHistory.[].txHash
                type: string
              block:
                title: iCollectionDoc.updateHistory.[].block
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                title: iCollectionDoc.updateHistory.[].blockTimestamp
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            title: iCollectionDoc.updateHistory.[]
            type: object
          title: iCollectionDoc.updateHistory
          description: The update history of this collection
          type: array
        aliasAddress:
          title: iCollectionDoc.aliasAddress
          description: The alias cosmos address for the collection
          type: string
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionPermissions
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - defaultBalances
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
      additionalProperties: false
      title: iCollectionDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iAccountDoc:
      properties:
        publicKey:
          title: iAccountDoc.publicKey
          description: The public key of the account
          type: string
        accountNumber:
          title: iAccountDoc.accountNumber
          description: The account number of the account
          $ref: '#components/schemas/NumberType'
        pubKeyType:
          title: iAccountDoc.pubKeyType
          description: The public key type of the account
          type: string
        ethAddress:
          title: iAccountDoc.ethAddress
          description: The Eth address of the account
          type: string
        btcAddress:
          title: iAccountDoc.btcAddress
          description: The Bitcoin address of the account
          type: string
        sequence:
          title: iAccountDoc.sequence
          description: The sequence of the account
          $ref: '#components/schemas/NumberType'
        balance:
          $ref: '#/components/schemas/iCosmosCoin'
          title: iAccountDoc.balance
          description: The balance of the account
      required:
        - publicKey
        - accountNumber
        - pubKeyType
        - ethAddress
        - btcAddress
      additionalProperties: false
      title: iAccountDoc
      type: object
    iCustomLink:
      properties:
        title:
          title: iCustomLink.title
          type: string
        url:
          title: iCustomLink.url
          type: string
        image:
          title: iCustomLink.image
          type: string
      required:
        - title
        - url
        - image
      additionalProperties: false
      title: iCustomLink
      description: |-
        CustomLinks are custom links that can be added to a profile.
      type: object
    iCustomPage:
      properties:
        title:
          title: iCustomPage.title
          type: string
        description:
          title: iCustomPage.description
          type: string
        items:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            title: iCustomPage.items.[]
          title: iCustomPage.items
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      title: iCustomPage
      type: object
    iCustomListPage:
      properties:
        title:
          title: iCustomListPage.title
          type: string
        description:
          title: iCustomListPage.description
          type: string
        items:
          items:
            title: iCustomListPage.items.[]
            type: string
          title: iCustomListPage.items
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      title: iCustomListPage
      description: >-
        CustomListPage is a custom list page that can be added to a profile. The
        items are valid list IDs.

      type: object
    iProfileDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          title: iProfileDoc.fetchedProfile
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          title: iProfileDoc.seenActivity
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        createdAt:
          title: iProfileDoc.createdAt
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        discord:
          title: iProfileDoc.discord
          description: The Discord username of the account
          type: string
        twitter:
          title: iProfileDoc.twitter
          description: The Twitter username of the account
          type: string
        github:
          title: iProfileDoc.github
          description: The GitHub username of the account
          type: string
        telegram:
          title: iProfileDoc.telegram
          description: The Telegram username of the account
          type: string
        readme:
          title: iProfileDoc.readme
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
            title: iProfileDoc.customLinks.[]
          title: iProfileDoc.customLinks
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            title: iProfileDoc.hiddenBadges.[]
          title: iProfileDoc.hiddenBadges
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            title: iProfileDoc.hiddenLists.[]
            type: string
          title: iProfileDoc.hiddenLists
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                title: iProfileDoc.customPages.badges.[]
              title: iProfileDoc.customPages.badges
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                title: iProfileDoc.customPages.lists.[]
              title: iProfileDoc.customPages.lists
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          title: iProfileDoc.customPages
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                title: iProfileDoc.watchlists.badges.[]
              title: iProfileDoc.watchlists.badges
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                title: iProfileDoc.watchlists.lists.[]
              title: iProfileDoc.watchlists.lists
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          title: iProfileDoc.watchlists
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          title: iProfileDoc.profilePicUrl
          description: The profile picture URL of the account
          type: string
        username:
          title: iProfileDoc.username
          description: The username of the account
          type: string
        latestSignedInChain:
          title: iProfileDoc.latestSignedInChain
          description: The latest chain the user signed in with
        solAddress:
          title: iProfileDoc.solAddress
          description: >-
            The Solana address of the profile, if applicable (bc we need it to
            convert)
          type: string
        notifications:
          $ref: '#/components/schemas/iNotificationPreferences'
          title: iProfileDoc.notifications
          description: The notifications of the account
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  title: iProfileDoc.approvedSignInMethods.discord.username
                  type: string
                discriminator:
                  title: iProfileDoc.approvedSignInMethods.discord.discriminator
                  type: string
                id:
                  title: iProfileDoc.approvedSignInMethods.discord.id
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              title: iProfileDoc.approvedSignInMethods.discord
              type: object
          additionalProperties: false
          title: iProfileDoc.approvedSignInMethods
          description: Approved ways to sign in (rather than Blockin)
          type: object
      required:
        - _docId
      additionalProperties: false
      title: iProfileDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iQueueDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        uri:
          title: iQueueDoc.uri
          description: >-
            The URI of the metadata to be fetched. If {id} is present, it will
            be replaced with each individual ID in badgeIds
          type: string
        collectionId:
          title: iQueueDoc.collectionId
          description: The collection ID of the metadata to be fetched
          $ref: '#components/schemas/NumberType'
        loadBalanceId:
          title: iQueueDoc.loadBalanceId
          description: >-
            The load balance ID of the metadata to be fetched. Only the node
            with the same load balance ID will fetch this metadata
          $ref: '#components/schemas/NumberType'
        refreshRequestTime:
          title: iQueueDoc.refreshRequestTime
          description: >-
            The timestamp of when this metadata was requested to be refreshed
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        numRetries:
          title: iQueueDoc.numRetries
          description: >-
            The number of times this metadata has been tried to be fetched but
            failed
          $ref: '#components/schemas/NumberType'
        lastFetchedAt:
          title: iQueueDoc.lastFetchedAt
          description: >-
            The timestamp of when this metadata was last fetched (milliseconds
            since epoch)
          $ref: '#components/schemas/NumberType'
        error:
          title: iQueueDoc.error
          description: The error message if this metadata failed to be fetched
          type: string
        deletedAt:
          title: iQueueDoc.deletedAt
          description: >-
            The timestamp of when this document was deleted (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        nextFetchTime:
          title: iQueueDoc.nextFetchTime
          description: >-
            The timestamp of when this document should be fetched next
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        emailMessage:
          title: iQueueDoc.emailMessage
          type: string
        recipientAddress:
          title: iQueueDoc.recipientAddress
          type: string
        activityDocId:
          title: iQueueDoc.activityDocId
          type: string
        notificationType:
          title: iQueueDoc.notificationType
          type: string
      required:
        - _docId
        - uri
        - collectionId
        - loadBalanceId
        - refreshRequestTime
        - numRetries
      additionalProperties: false
      title: iQueueDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iIndexerStatus:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
          title: iIndexerStatus.status
      required:
        - status
      additionalProperties: false
      title: iIndexerStatus
      type: object
    iLatestBlockStatus:
      properties:
        height:
          title: iLatestBlockStatus.height
          description: The height of the latest block
          $ref: '#components/schemas/NumberType'
        txIndex:
          title: iLatestBlockStatus.txIndex
          description: The transaction index of the latest block
          $ref: '#components/schemas/NumberType'
        timestamp:
          title: iLatestBlockStatus.timestamp
          description: The timestamp of the latest block (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
      required:
        - height
        - txIndex
        - timestamp
      additionalProperties: false
      title: iLatestBlockStatus
      type: object
    iStatusDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        block:
          $ref: '#/components/schemas/iLatestBlockStatus'
          title: iStatusDoc.block
          description: The latest synced block status (i.e. height, txIndex, timestamp)
        nextCollectionId:
          title: iStatusDoc.nextCollectionId
          description: The next collection ID to be used
          $ref: '#components/schemas/NumberType'
        gasPrice:
          title: iStatusDoc.gasPrice
          description: The current gas price based on the average of the lastXGasAmounts
          type: number
        lastXGasAmounts:
          items:
            title: iStatusDoc.lastXGasAmounts.[]
            $ref: '#/components/schemas/NumberType'
          title: iStatusDoc.lastXGasAmounts
          description: The last X gas prices
          type: array
        lastXGasLimits:
          items:
            title: iStatusDoc.lastXGasLimits.[]
            $ref: '#/components/schemas/NumberType'
          title: iStatusDoc.lastXGasLimits
          description: The last X gas limits
          type: array
      required:
        - _docId
        - block
        - nextCollectionId
        - gasPrice
        - lastXGasAmounts
        - lastXGasLimits
      additionalProperties: false
      title: iStatusDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iAddressListEditKey:
      properties:
        key:
          title: iAddressListEditKey.key
          description: The key that can be used to edit the address list
          type: string
        expirationDate:
          title: iAddressListEditKey.expirationDate
          description: The expiration date of the key (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        mustSignIn:
          title: iAddressListEditKey.mustSignIn
          description: True if the user can only add their signed in address to the list
          type: boolean
      required:
        - key
        - expirationDate
      additionalProperties: false
      title: iAddressListEditKey
      type: object
    iAddressListDoc:
      properties:
        listId:
          title: iAddressList.listId
          description: The ID of the address list.
          type: string
        addresses:
          items:
            title: iAddressList.addresses.[]
            type: string
          title: iAddressList.addresses
          description: The addresses of the address list.
          type: array
        whitelist:
          title: iAddressList.whitelist
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          title: iAddressList.uri
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          title: iAddressList.customData
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          title: iAddressList.createdBy
          description: The address that created the address list.
          type: string
        aliasAddress:
          title: iAddressList.aliasAddress
          description: The alias cosmos address of the address list.
          type: string
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                title: iAddressListDoc.updateHistory.[].txHash
                type: string
              block:
                title: iAddressListDoc.updateHistory.[].block
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                title: iAddressListDoc.updateHistory.[].blockTimestamp
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            title: iAddressListDoc.updateHistory.[]
            type: object
          title: iAddressListDoc.updateHistory
          description: The update history of this list
          type: array
        createdBlock:
          title: iAddressListDoc.createdBlock
          description: The block number when this list was created
          $ref: '#components/schemas/NumberType'
        lastUpdated:
          title: iAddressListDoc.lastUpdated
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        nsfw:
          properties:
            reason:
              title: iAddressListDoc.nsfw.reason
              type: string
          required:
            - reason
          additionalProperties: false
          title: iAddressListDoc.nsfw
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              title: iAddressListDoc.reported.reason
              type: string
          required:
            - reason
          additionalProperties: false
          title: iAddressListDoc.reported
          description: The reported reason if this list is reported
          type: object
        private:
          title: iAddressListDoc.private
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          title: iAddressListDoc.viewableWithLink
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
      additionalProperties: false
      title: iAddressListDoc, iAddressList, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iBalanceDoc:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iUserBalanceStore.balances.[]
          title: iUserBalanceStore.balances
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
            title: iUserBalanceStore.incomingApprovals.[]
          title: iUserBalanceStore.incomingApprovals
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
            title: iUserBalanceStore.outgoingApprovals.[]
          title: iUserBalanceStore.outgoingApprovals
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          title: iUserBalanceStore.userPermissions
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          title: iUserBalanceStore.autoApproveSelfInitiatedOutgoingTransfers
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          title: iUserBalanceStore.autoApproveSelfInitiatedIncomingTransfers
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          title: iBalanceDoc.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        cosmosAddress:
          title: iBalanceDoc.cosmosAddress
          description: The Cosmos address of the user
          type: string
        onChain:
          title: iBalanceDoc.onChain
          description: True if the balances are on-chain
          type: boolean
        uri:
          title: iBalanceDoc.uri
          description: The URI of the off-chain balances
          type: string
        fetchedAt:
          title: iBalanceDoc.fetchedAt
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        fetchedAtBlock:
          title: iBalanceDoc.fetchedAtBlock
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        isPermanent:
          title: iBalanceDoc.isPermanent
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          title: iBalanceDoc.contentHash
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                title: iBalanceDoc.updateHistory.[].txHash
                type: string
              block:
                title: iBalanceDoc.updateHistory.[].block
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                title: iBalanceDoc.updateHistory.[].blockTimestamp
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            title: iBalanceDoc.updateHistory.[]
            type: object
          title: iBalanceDoc.updateHistory
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      title: iBalanceDoc, iUserBalanceStore, Doc
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.


        Fields for the MongoDB database document

      type: object
    ClaimIntegrationPluginType:
      enum:
        - password
        - numUses
        - greaterThanXBADGEBalance
        - discord
        - codes
        - twitter
        - transferTimes
        - requiresProofOfAddress
        - whitelist
        - mustOwnBadges
        - api
      title: ClaimIntegrationPluginType
      type: string
    JsonBodyInputWithValue:
      properties:
        key:
          title: JsonBodyInputWithValue.key
          type: string
        label:
          title: JsonBodyInputWithValue.label
          type: string
        type:
          enum:
            - date
            - url
          title: JsonBodyInputWithValue.type
          type: string
        value:
          title: JsonBodyInputWithValue.value
          anyOf:
            - type: string
            - type: number
            - type: boolean
      required:
        - key
        - label
        - value
      additionalProperties: false
      title: JsonBodyInputWithValue
      type: object
    JsonBodyInputSchema:
      properties:
        key:
          title: JsonBodyInputSchema.key
          type: string
        label:
          title: JsonBodyInputSchema.label
          type: string
        type:
          enum:
            - date
            - url
            - string
            - number
            - boolean
          title: JsonBodyInputSchema.type
          type: string
        helper:
          title: JsonBodyInputSchema.helper
          type: string
      required:
        - key
        - label
        - type
      additionalProperties: false
      title: JsonBodyInputSchema
      type: object
    ClaimApiCallInfo:
      properties:
        uri:
          title: ClaimApiCallInfo.uri
          type: string
        name:
          title: ClaimApiCallInfo.name
          type: string
        description:
          title: ClaimApiCallInfo.description
          type: string
        passDiscord:
          title: ClaimApiCallInfo.passDiscord
          type: boolean
        passTwitter:
          title: ClaimApiCallInfo.passTwitter
          type: boolean
        bodyParams:
          title: ClaimApiCallInfo.bodyParams
          type: object
        userInputsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          title: ClaimApiCallInfo.userInputsSchema
          type: array
      required:
        - uri
        - name
        - userInputsSchema
      additionalProperties: false
      title: ClaimApiCallInfo
      type: object
    iClaimBuilderDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        cid:
          title: iClaimBuilderDoc.cid
          description: The CID of the password document
          type: string
        createdBy:
          title: iClaimBuilderDoc.createdBy
          description: The cosmos address of the user who created this password
          type: string
        docClaimed:
          title: iClaimBuilderDoc.docClaimed
          description: True if the password document is claimed by the collection
          type: boolean
        collectionId:
          title: iClaimBuilderDoc.collectionId
          description: The collection ID of the password document
          $ref: '#components/schemas/NumberType'
        plugins:
          items: {}
          title: iClaimBuilderDoc.plugins
          description: Dynamic checks to run in the form of plugins
          type: array
        manualDistribution:
          title: iClaimBuilderDoc.manualDistribution
          description: >-
            If true, the claim codes are to be distributed manually. This doc
            will only be used for storage purposes.
          type: boolean
        state:
          additionalProperties: {}
          title: iClaimBuilderDoc.state
          description: The current state of each plugin
          type: object
        action:
          properties:
            codes:
              items:
                title: iClaimBuilderDoc.action.codes.[]
                type: string
              title: iClaimBuilderDoc.action.codes
              type: array
            seedCode:
              title: iClaimBuilderDoc.action.seedCode
              type: string
            balancesToSet:
              $ref: '#/components/schemas/iIncrementedBalances'
              title: iClaimBuilderDoc.action.balancesToSet
            listId:
              title: iClaimBuilderDoc.action.listId
              type: string
          additionalProperties: false
          title: iClaimBuilderDoc.action
          description: Details for the action to perform if the criteria is correct
          type: object
      required:
        - _docId
        - cid
        - createdBy
        - docClaimed
        - collectionId
        - plugins
        - state
        - action
      additionalProperties: false
      title: iClaimBuilderDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iApprovalTrackerDoc:
      properties:
        collectionId:
          title: iAmountTrackerIdDetails.collectionId
          description: The collection ID for the approval.
          $ref: '#components/schemas/NumberType'
        amountTrackerId:
          title: iAmountTrackerIdDetails.amountTrackerId
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          title: iAmountTrackerIdDetails.approvalLevel
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          title: iAmountTrackerIdDetails.approverAddress
          description: The address of the approval to check.
          type: string
        trackerType:
          title: iAmountTrackerIdDetails.trackerType
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          title: iAmountTrackerIdDetails.approvedAddress
          description: The address to check for the approval.
          type: string
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        numTransfers:
          title: iApprovalTrackerDoc.numTransfers
          description: The number of transfers. Is an incrementing tally.
          $ref: '#components/schemas/NumberType'
        amounts:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iApprovalTrackerDoc.amounts.[]
          title: iApprovalTrackerDoc.amounts
          description: A tally of the amounts transferred for this approval.
          type: array
      required:
        - collectionId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
        - _docId
        - numTransfers
        - amounts
      additionalProperties: false
      title: iApprovalTrackerDoc, iAmountTrackerIdDetails, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iChallengeTrackerIdDetails:
      properties:
        collectionId:
          title: iChallengeTrackerIdDetails.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        challengeId:
          title: iChallengeTrackerIdDetails.challengeId
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          title: iChallengeTrackerIdDetails.challengeLevel
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          title: iChallengeTrackerIdDetails.approverAddress
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
      required:
        - collectionId
        - challengeId
        - challengeLevel
        - approverAddress
      additionalProperties: false
      title: iChallengeTrackerIdDetails
      type: object
    iMerkleChallengeDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          title: iMerkleChallengeDoc.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        challengeId:
          title: iMerkleChallengeDoc.challengeId
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          title: iMerkleChallengeDoc.challengeLevel
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          title: iMerkleChallengeDoc.approverAddress
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
        usedLeafIndices:
          items:
            title: iMerkleChallengeDoc.usedLeafIndices.[]
            $ref: '#/components/schemas/NumberType'
          title: iMerkleChallengeDoc.usedLeafIndices
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
      required:
        - _docId
        - collectionId
        - challengeId
        - challengeLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      title: iMerkleChallengeDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iMerkleChallengeIdDetails:
      properties:
        collectionId:
          title: iMerkleChallengeIdDetails.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        challengeId:
          title: iMerkleChallengeIdDetails.challengeId
          description: The challenge ID
          type: string
        challengeLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          title: iMerkleChallengeIdDetails.challengeLevel
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
        approverAddress:
          title: iMerkleChallengeIdDetails.approverAddress
          description: The approver address (leave blank if challengeLevel = "collection")
          type: string
        usedLeafIndices:
          items:
            title: iMerkleChallengeIdDetails.usedLeafIndices.[]
            $ref: '#/components/schemas/NumberType'
          title: iMerkleChallengeIdDetails.usedLeafIndices
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
      required:
        - collectionId
        - challengeId
        - challengeLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      title: iMerkleChallengeIdDetails
      type: object
    iFetchDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        content:
          anyOf:
            - $ref: '#/components/schemas/iMetadata'
              title: iFetchDoc.content
            - $ref: '#/components/schemas/iApprovalInfoDetails'
              title: iFetchDoc.content
            - $ref: '#/components/schemas/iOffChainBalancesMap'
              title: iFetchDoc.content
          title: iFetchDoc.content
          description: >-
            The content of the fetch document. Note that we store balances in
            BALANCES_DB and not here to avoid double storage.
        fetchedAt:
          title: iFetchDoc.fetchedAt
          description: The time the document was fetched
          $ref: '#components/schemas/NumberType'
        fetchedAtBlock:
          title: iFetchDoc.fetchedAtBlock
          description: The block the document was fetched
          $ref: '#components/schemas/NumberType'
        db:
          enum:
            - ApprovalInfo
            - Metadata
            - Balances
          title: iFetchDoc.db
          description: The type of content fetched. This is used for querying purposes
          type: string
        isPermanent:
          title: iFetchDoc.isPermanent
          description: >-
            True if the document is permanent (i.e. fetched from a permanent URI
            like IPFS)
          type: boolean
      required:
        - _docId
        - fetchedAt
        - fetchedAtBlock
        - db
        - isPermanent
      additionalProperties: false
      title: iFetchDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iRefreshDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          title: iRefreshDoc.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        refreshRequestTime:
          title: iRefreshDoc.refreshRequestTime
          description: The time the refresh was requested (Unix timestamp in milliseconds)
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - collectionId
        - refreshRequestTime
      additionalProperties: false
      title: iRefreshDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iAirdropDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        airdropped:
          title: iAirdropDoc.airdropped
          description: True if the airdrop has been completed
          type: boolean
        timestamp:
          title: iAirdropDoc.timestamp
          description: >-
            The timestamp of when the airdrop was completed (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        hash:
          title: iAirdropDoc.hash
          description: The hash of the airdrop transaction
          type: string
      required:
        - _docId
        - airdropped
        - timestamp
      additionalProperties: false
      title: iAirdropDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iIPFSTotalsDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        bytesUploaded:
          title: iIPFSTotalsDoc.bytesUploaded
          description: The total bytes uploaded
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - bytesUploaded
      additionalProperties: false
      title: iIPFSTotalsDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iComplianceDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        badges:
          properties:
            nsfw:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
                title: iComplianceDoc.badges.nsfw.[]
              title: iComplianceDoc.badges.nsfw
              type: array
            reported:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
                title: iComplianceDoc.badges.reported.[]
              title: iComplianceDoc.badges.reported
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          title: iComplianceDoc.badges
          type: object
        addressLists:
          properties:
            nsfw:
              items:
                properties:
                  listId:
                    title: iComplianceDoc.addressLists.nsfw.[].listId
                    type: string
                  reason:
                    title: iComplianceDoc.addressLists.nsfw.[].reason
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                title: iComplianceDoc.addressLists.nsfw.[]
                type: object
              title: iComplianceDoc.addressLists.nsfw
              type: array
            reported:
              items:
                properties:
                  listId:
                    title: iComplianceDoc.addressLists.reported.[].listId
                    type: string
                  reason:
                    title: iComplianceDoc.addressLists.reported.[].reason
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                title: iComplianceDoc.addressLists.reported.[]
                type: object
              title: iComplianceDoc.addressLists.reported
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          title: iComplianceDoc.addressLists
          type: object
        accounts:
          properties:
            nsfw:
              items:
                properties:
                  cosmosAddress:
                    title: iComplianceDoc.accounts.nsfw.[].cosmosAddress
                    type: string
                  reason:
                    title: iComplianceDoc.accounts.nsfw.[].reason
                    type: string
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                title: iComplianceDoc.accounts.nsfw.[]
                type: object
              title: iComplianceDoc.accounts.nsfw
              type: array
            reported:
              items:
                properties:
                  cosmosAddress:
                    title: iComplianceDoc.accounts.reported.[].cosmosAddress
                    type: string
                  reason:
                    title: iComplianceDoc.accounts.reported.[].reason
                    type: string
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                title: iComplianceDoc.accounts.reported.[]
                type: object
              title: iComplianceDoc.accounts.reported
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          title: iComplianceDoc.accounts
          type: object
      required:
        - _docId
        - badges
        - addressLists
        - accounts
      additionalProperties: false
      title: iComplianceDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iBlockinAuthSignatureDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        signature:
          title: iBlockinAuthSignatureDoc.signature
          type: string
        name:
          title: iBlockinAuthSignatureDoc.name
          type: string
        description:
          title: iBlockinAuthSignatureDoc.description
          type: string
        image:
          title: iBlockinAuthSignatureDoc.image
          type: string
        cosmosAddress:
          title: iBlockinAuthSignatureDoc.cosmosAddress
          type: string
        params:
          title: iBlockinAuthSignatureDoc.params
          $ref: '#components/schemas/BlockinChallengeParams'
        createdAt:
          title: iBlockinAuthSignatureDoc.createdAt
          $ref: '#components/schemas/NumberType'
        deletedAt:
          title: iBlockinAuthSignatureDoc.deletedAt
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - signature
        - name
        - description
        - image
        - cosmosAddress
        - params
        - createdAt
      additionalProperties: false
      title: iBlockinAuthSignatureDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iFollowDetailsDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          title: iFollowDetailsDoc.cosmosAddress
          description: The Cosmos address of the user
          type: string
        followingCount:
          title: iFollowDetailsDoc.followingCount
          description: The number of users that the user is following
          $ref: '#components/schemas/NumberType'
        followersCount:
          title: iFollowDetailsDoc.followersCount
          description: The number of users that are following the user
          $ref: '#components/schemas/NumberType'
        followers:
          items:
            title: iFollowDetailsDoc.followers.[]
            type: string
          title: iFollowDetailsDoc.followers
          description: The followers of the user
          type: array
        following:
          items:
            title: iFollowDetailsDoc.following.[]
            type: string
          title: iFollowDetailsDoc.following
          description: The following of the user
          type: array
        followingCollectionId:
          title: iFollowDetailsDoc.followingCollectionId
          description: The collection ID of the following collection
          $ref: '#components/schemas/NumberType'
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
      additionalProperties: false
      title: iFollowDetailsDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iProtocolDoc:
      properties:
        name:
          title: iProtocol.name
          description: The name of the protocol.
          type: string
        uri:
          title: iProtocol.uri
          description: The URI of the protocol.
          type: string
        customData:
          title: iProtocol.customData
          description: The custom data of the protocol.
          type: string
        createdBy:
          title: iProtocol.createdBy
          description: The cosmos address of the user who created the protocol.
          type: string
        isFrozen:
          title: iProtocol.isFrozen
          description: Whether the protocol is frozen or not.
          type: boolean
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
      required:
        - name
        - uri
        - customData
        - createdBy
        - isFrozen
        - _docId
      additionalProperties: false
      title: iProtocolDoc, iProtocol, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iUserProtocolCollectionsDoc:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        protocols:
          additionalProperties:
            $ref: '#/components/schemas/NumberType'
          title: iUserProtocolCollectionsDoc.protocols
          type: object
      required:
        - _docId
        - protocols
      additionalProperties: false
      title: iUserProtocolCollectionsDoc, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    iBadgeMetadataDetails:
      properties:
        metadataId:
          title: iBadgeMetadataDetails.metadataId
          description: >-
            The metadata ID for the fetched URI. Metadata IDs map an ID to each
            unique URI. See BitBadges Docs for more information.
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBadgeMetadataDetails.badgeIds.[]
          title: iBadgeMetadataDetails.badgeIds
          description: The badge IDs that correspond to the metadata
          type: array
        metadata:
          $ref: '#/components/schemas/iMetadata'
          title: iBadgeMetadataDetails.metadata
          description: The metadata fetched by the URI
        uri:
          title: iBadgeMetadataDetails.uri
          description: The URI that the metadata was fetched from
          type: string
        customData:
          title: iBadgeMetadataDetails.customData
          description: Custom data
          type: string
        toUpdate:
          title: iBadgeMetadataDetails.toUpdate
          description: >-
            Flag to denote if the metadata is new and should be updated. Used
            internally.
          type: boolean
      required:
        - badgeIds
        - metadata
      additionalProperties: false
      title: iBadgeMetadataDetails
      type: object
    iMetadata:
      properties:
        name:
          title: iMetadata.name
          description: The name of the badge or badge collection.
          type: string
        description:
          title: iMetadata.description
          description: The description of the badge or badge collection.
          type: string
        image:
          title: iMetadata.image
          description: The image of the badge or badge collection.
          type: string
        video:
          title: iMetadata.video
          description: >-
            The video of the badge or badge collection. If a standard video is
            used, this should be a link to the video. We will use image as the
            poster image. If a youtube video is used, we embed it as an iframe.
          type: string
        creator:
          title: iMetadata.creator
          description: The creator of the badge or badge collection.
          type: string
        color:
          title: iMetadata.color
          description: The color of the badge or badge collection.
          type: string
        category:
          title: iMetadata.category
          description: >-
            The category of the badge or badge collection (e.g. "Education",
            "Attendance").
          type: string
        externalUrl:
          title: iMetadata.externalUrl
          description: The external URL of the badge or badge collection.
          type: string
        tags:
          items:
            title: iMetadata.tags.[]
            type: string
          title: iMetadata.tags
          description: The tags of the badge or badge collection
          type: array
        socials:
          additionalProperties:
            type: string
          title: iMetadata.socials
          description: The socials of the badge or badge collection
          type: object
        offChainTransferabilityInfo:
          properties:
            host:
              title: iMetadata.offChainTransferabilityInfo.host
              type: string
            assignMethod:
              title: iMetadata.offChainTransferabilityInfo.assignMethod
              type: string
          required:
            - host
            - assignMethod
          additionalProperties: false
          title: iMetadata.offChainTransferabilityInfo
          description: The off-chain transferability info of the badge or badge collection
          type: object
        attributes:
          items:
            properties:
              type:
                enum:
                  - date
                  - url
                title: iMetadata.attributes.[].type
                type: string
              name:
                title: iMetadata.attributes.[].name
                type: string
              value:
                title: iMetadata.attributes.[].value
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - name
              - value
            additionalProperties: false
            title: iMetadata.attributes.[]
            type: object
          title: iMetadata.attributes
          description: The attributes of the badge or badge collection
          type: array
        fetchedAtBlock:
          title: iMetadata.fetchedAtBlock
          description: The block the metadata was fetched at.
          $ref: '#components/schemas/NumberType'
        fetchedAt:
          title: iMetadata.fetchedAt
          description: The time the metadata was fetched.
          $ref: '#components/schemas/NumberType'
        _isUpdating:
          title: iMetadata._isUpdating
          description: Whether the metadata is currently being updated.
          type: boolean
      required:
        - name
        - description
        - image
      additionalProperties: false
      title: iMetadata
      type: object
    iBitBadgesAddressList:
      properties:
        listId:
          title: iAddressList.listId
          description: The ID of the address list.
          type: string
        addresses:
          items:
            title: iAddressList.addresses.[]
            type: string
          title: iAddressList.addresses
          description: The addresses of the address list.
          type: array
        whitelist:
          title: iAddressList.whitelist
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          title: iAddressList.uri
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          title: iAddressList.customData
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          title: iAddressList.createdBy
          description: The address that created the address list.
          type: string
        aliasAddress:
          title: iAddressList.aliasAddress
          description: The alias cosmos address of the address list.
          type: string
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                title: iAddressListDoc.updateHistory.[].txHash
                type: string
              block:
                title: iAddressListDoc.updateHistory.[].block
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                title: iAddressListDoc.updateHistory.[].blockTimestamp
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            title: iAddressListDoc.updateHistory.[]
            type: object
          title: iAddressListDoc.updateHistory
          description: The update history of this list
          type: array
        createdBlock:
          title: iAddressListDoc.createdBlock
          description: The block number when this list was created
          $ref: '#components/schemas/NumberType'
        lastUpdated:
          title: iAddressListDoc.lastUpdated
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        nsfw:
          properties:
            reason:
              title: iAddressListDoc.nsfw.reason
              type: string
          required:
            - reason
          additionalProperties: false
          title: iAddressListDoc.nsfw
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              title: iAddressListDoc.reported.reason
              type: string
          required:
            - reason
          additionalProperties: false
          title: iAddressListDoc.reported
          description: The reported reason if this list is reported
          type: object
        private:
          title: iAddressListDoc.private
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          title: iAddressListDoc.viewableWithLink
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
        metadata:
          $ref: '#/components/schemas/iMetadata'
          title: iBitBadgesAddressList.metadata
          description: The metadata of the address list.
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
            title: iBitBadgesAddressList.listsActivity.[]
          title: iBitBadgesAddressList.listsActivity
          description: The activity of the address list.
          type: array
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  title: ids.[]
                  type: string
                title: ids
                type: array
              type:
                title: type
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
                title: pagination
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          title: iBitBadgesAddressList.views
          description: The views of the address list.
          type: object
        editClaims:
          items:
            properties:
              claimId:
                title: iBitBadgesAddressList.editClaims.[].claimId
                type: string
              plugins:
                items: {}
                title: iBitBadgesAddressList.editClaims.[].plugins
                type: array
            required:
              - claimId
              - plugins
            additionalProperties: false
            title: iBitBadgesAddressList.editClaims.[]
            type: object
          title: iBitBadgesAddressList.editClaims
          type: array
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
        - listsActivity
        - views
        - editClaims
      additionalProperties: false
      title: iBitBadgesAddressList, iAddressList, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    GetAddressListsRouteRequestBody:
      properties:
        listsToFetch:
          items:
            properties:
              listId:
                title: GetAddressListsRouteRequestBody.listsToFetch.[].listId
                type: string
              viewsToFetch:
                items:
                  properties:
                    viewId:
                      title: >-
                        GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[].viewId
                      type: string
                    viewType:
                      title: >-
                        GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[].viewType
                      enum:
                        - listActivity
                      type: string
                    bookmark:
                      title: >-
                        GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[].bookmark
                      type: string
                  required:
                    - viewId
                    - viewType
                    - bookmark
                  additionalProperties: false
                  title: >-
                    GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[]
                  type: object
                title: GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch
                type: array
              fetchPrivateParams:
                title: >-
                  GetAddressListsRouteRequestBody.listsToFetch.[].fetchPrivateParams
                type: boolean
            required:
              - listId
            additionalProperties: false
            title: GetAddressListsRouteRequestBody.listsToFetch.[]
            type: object
          title: GetAddressListsRouteRequestBody.listsToFetch
          description: >-
            The lists and accompanyin details to fetch. Supports on-chain,
            off-chain, and reserved lists.
          type: array
      required:
        - listsToFetch
      additionalProperties: false
      title: GetAddressListsRouteRequestBody
      type: object
    iGetAddressListsRouteSuccessResponse:
      properties:
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
            title: iGetAddressListsRouteSuccessResponse.addressLists.[]
          title: iGetAddressListsRouteSuccessResponse.addressLists
          type: array
      required:
        - addressLists
      additionalProperties: false
      title: iGetAddressListsRouteSuccessResponse
      type: object
    UpdateAddressListsRouteRequestBody:
      properties:
        addressLists:
          items:
            allOf:
              - $ref: '#/components/schemas/iAddressList'
              - properties:
                  private:
                    title: private
                    type: boolean
                  editClaims:
                    items:
                      properties:
                        claimId:
                          title: editClaims.[].claimId
                          type: string
                        plugins:
                          items: {}
                          title: editClaims.[].plugins
                          type: array
                      required:
                        - claimId
                        - plugins
                      additionalProperties: false
                      title: editClaims.[]
                      type: object
                    title: editClaims
                    type: array
                  viewableWithLink:
                    title: viewableWithLink
                    type: boolean
                required:
                  - editClaims
                additionalProperties: false
                type: object
          title: UpdateAddressListsRouteRequestBody.addressLists
          description: |-
            New address lists to update.
            Requester must be creator of the lists.
            Only applicable to off-chain balances.
          type: array
      required:
        - addressLists
      additionalProperties: false
      title: UpdateAddressListsRouteRequestBody
      type: object
    iUpdateAddressListsRouteSuccessResponse:
      additionalProperties: false
      title: iUpdateAddressListsRouteSuccessResponse
      type: object
    DeleteAddressListsRouteRequestBody:
      properties:
        listIds:
          items:
            title: DeleteAddressListsRouteRequestBody.listIds.[]
            type: string
          title: DeleteAddressListsRouteRequestBody.listIds
          description: The list IDs to delete.
          type: array
      required:
        - listIds
      additionalProperties: false
      title: DeleteAddressListsRouteRequestBody
      type: object
    iDeleteAddressListsRouteSuccessResponse:
      additionalProperties: false
      title: iDeleteAddressListsRouteSuccessResponse
      type: object
    iBitBadgesUserInfo:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          title: iProfileDoc.fetchedProfile
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          title: iProfileDoc.seenActivity
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#components/schemas/NumberType'
        createdAt:
          title: iProfileDoc.createdAt
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#components/schemas/NumberType'
        discord:
          title: iProfileDoc.discord
          description: The Discord username of the account
          type: string
        twitter:
          title: iProfileDoc.twitter
          description: The Twitter username of the account
          type: string
        github:
          title: iProfileDoc.github
          description: The GitHub username of the account
          type: string
        telegram:
          title: iProfileDoc.telegram
          description: The Telegram username of the account
          type: string
        readme:
          title: iProfileDoc.readme
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
            title: iProfileDoc.customLinks.[]
          title: iProfileDoc.customLinks
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            title: iProfileDoc.hiddenBadges.[]
          title: iProfileDoc.hiddenBadges
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            title: iProfileDoc.hiddenLists.[]
            type: string
          title: iProfileDoc.hiddenLists
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                title: iProfileDoc.customPages.badges.[]
              title: iProfileDoc.customPages.badges
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                title: iProfileDoc.customPages.lists.[]
              title: iProfileDoc.customPages.lists
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          title: iProfileDoc.customPages
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                title: iProfileDoc.watchlists.badges.[]
              title: iProfileDoc.watchlists.badges
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                title: iProfileDoc.watchlists.lists.[]
              title: iProfileDoc.watchlists.lists
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          title: iProfileDoc.watchlists
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          title: iProfileDoc.profilePicUrl
          description: The profile picture URL of the account
          type: string
        username:
          title: iProfileDoc.username
          description: The username of the account
          type: string
        latestSignedInChain:
          title: iProfileDoc.latestSignedInChain
          description: The latest chain the user signed in with
        solAddress:
          title: iProfileDoc.solAddress
          description: >-
            The Solana address of the profile, if applicable (bc we need it to
            convert)
          type: string
        notifications:
          $ref: '#/components/schemas/iNotificationPreferences'
          title: iProfileDoc.notifications
          description: The notifications of the account
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  title: iProfileDoc.approvedSignInMethods.discord.username
                  type: string
                discriminator:
                  title: iProfileDoc.approvedSignInMethods.discord.discriminator
                  type: string
                id:
                  title: iProfileDoc.approvedSignInMethods.discord.id
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              title: iProfileDoc.approvedSignInMethods.discord
              type: object
          additionalProperties: false
          title: iProfileDoc.approvedSignInMethods
          description: Approved ways to sign in (rather than Blockin)
          type: object
        publicKey:
          title: iAccountDoc.publicKey
          description: The public key of the account
          type: string
        accountNumber:
          title: iAccountDoc.accountNumber
          description: The account number of the account
          $ref: '#components/schemas/NumberType'
        pubKeyType:
          title: iAccountDoc.pubKeyType
          description: The public key type of the account
          type: string
        ethAddress:
          title: iAccountDoc.ethAddress
          description: The Eth address of the account
          type: string
        btcAddress:
          title: iAccountDoc.btcAddress
          description: The Bitcoin address of the account
          type: string
        sequence:
          title: iAccountDoc.sequence
          description: The sequence of the account
          $ref: '#components/schemas/NumberType'
        balance:
          $ref: '#/components/schemas/iCosmosCoin'
          title: iAccountDoc.balance
          description: The balance of the account
        resolvedName:
          title: iBitBadgesUserInfo.resolvedName
          description: The resolved name of the account (e.g. ENS name).
          type: string
        avatar:
          title: iBitBadgesUserInfo.avatar
          description: The avatar of the account.
          type: string
        chain:
          title: iBitBadgesUserInfo.chain
          description: The chain of the account.
        airdropped:
          title: iBitBadgesUserInfo.airdropped
          description: Indicates whether the account has claimed their airdrop.
          type: boolean
        collected:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
            title: iBitBadgesUserInfo.collected.[]
          title: iBitBadgesUserInfo.collected
          description: >-
            A list of badges that the account has collected. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            title: iBitBadgesUserInfo.activity.[]
          title: iBitBadgesUserInfo.activity
          description: >-
            A list of transfer activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
            title: iBitBadgesUserInfo.listsActivity.[]
          title: iBitBadgesUserInfo.listsActivity
          description: >-
            A list of list activity items for the account. Paginated and fetched
            as needed. To be used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
            title: iBitBadgesUserInfo.reviews.[]
          title: iBitBadgesUserInfo.reviews
          description: >-
            A list of review activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
            title: iBitBadgesUserInfo.merkleChallenges.[]
          title: iBitBadgesUserInfo.merkleChallenges
          description: >-
            A list of merkle challenge activity items for the account. Paginated
            and fetched as needed. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
            title: iBitBadgesUserInfo.approvalTrackers.[]
          title: iBitBadgesUserInfo.approvalTrackers
          description: >-
            A list of approvals tracker activity items for the account.
            Paginated and fetched as needed. To be used in conjunction with
            views.
          type: array
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
            title: iBitBadgesUserInfo.addressLists.[]
          title: iBitBadgesUserInfo.addressLists
          description: >-
            A list of address lists for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
            title: iBitBadgesUserInfo.claimAlerts.[]
          title: iBitBadgesUserInfo.claimAlerts
          description: >-
            A list of claim alerts for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        authCodes:
          items:
            $ref: '#/components/schemas/iBlockinAuthSignatureDoc'
            title: iBitBadgesUserInfo.authCodes.[]
          title: iBitBadgesUserInfo.authCodes
          description: >-
            A list of auth codes for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        address:
          title: iBitBadgesUserInfo.address
          description: The native address of the account
          type: string
        nsfw:
          additionalProperties:
            type: string
          title: iBitBadgesUserInfo.nsfw
          description: Indicates whether the account is NSFW.
          type: object
        reported:
          additionalProperties:
            type: string
          title: iBitBadgesUserInfo.reported
          description: Indicates whether the account has been reported.
          type: object
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  title: ids.[]
                  type: string
                title: ids
                type: array
              type:
                title: type
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
                title: pagination
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          title: iBitBadgesUserInfo.views
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        alias:
          properties:
            collectionId:
              title: iBitBadgesUserInfo.alias.collectionId
              $ref: '#components/schemas/NumberType'
            listId:
              title: iBitBadgesUserInfo.alias.listId
              type: string
          additionalProperties: false
          title: iBitBadgesUserInfo.alias
          description: The alias for the account.
          type: object
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - ethAddress
        - btcAddress
        - chain
        - collected
        - activity
        - listsActivity
        - reviews
        - merkleChallenges
        - approvalTrackers
        - addressLists
        - claimAlerts
        - authCodes
        - address
        - views
      additionalProperties: false
      title: iBitBadgesUserInfo, Doc, iAccountDoc
      description: |-
        Fields for the MongoDB database document
      type: object
    AccountMap:
      additionalProperties:
        $ref: '#/components/schemas/iBitBadgesUserInfo'
      title: AccountMap
      description: |-
        AccountMap is used to store the user information by address.
      type: object
    AccountViewKey:
      enum:
        - createdLists
        - privateLists
        - authCodes
        - transferActivity
        - reviews
        - badgesCollected
        - claimAlerts
        - allLists
        - whitelists
        - blacklists
        - createdBadges
        - managingBadges
        - listsActivity
      title: AccountViewKey
      description: |-
        The supported view keys for fetching account details.
      type: string
    AccountFetchDetails:
      properties:
        address:
          title: AccountFetchDetails.address
          type: string
        username:
          title: AccountFetchDetails.username
          type: string
        fetchSequence:
          title: AccountFetchDetails.fetchSequence
          description: If true, we will fetch the sequence from the blockchain.
          type: boolean
        fetchBalance:
          title: AccountFetchDetails.fetchBalance
          description: If true, we will fetch the $BADGE balance from the blockchain.
          type: boolean
        noExternalCalls:
          title: AccountFetchDetails.noExternalCalls
          description: If true, we will avoid external API calls.
          type: boolean
        viewsToFetch:
          items:
            properties:
              viewId:
                title: AccountFetchDetails.viewsToFetch.[].viewId
                description: >-
                  Unique view ID. Used for pagination. All fetches w/ same ID
                  should be made with same criteria.
                type: string
              viewType:
                $ref: '#/components/schemas/AccountViewKey'
                title: AccountFetchDetails.viewsToFetch.[].viewType
                description: The base view type to fetch.
              specificCollections:
                items:
                  $ref: '#/components/schemas/iBatchBadgeDetails'
                  title: AccountFetchDetails.viewsToFetch.[].specificCollections.[]
                title: AccountFetchDetails.viewsToFetch.[].specificCollections
                description: >-
                  If defined, we will filter the view to only include the
                  specified collections.
                type: array
              specificLists:
                items:
                  title: AccountFetchDetails.viewsToFetch.[].specificLists.[]
                  type: string
                title: AccountFetchDetails.viewsToFetch.[].specificLists
                description: >-
                  If defined, we will filter the view to only include the
                  specified lists.
                type: array
              oldestFirst:
                title: AccountFetchDetails.viewsToFetch.[].oldestFirst
                description: Oldest first. By default, we fetch newest
                type: boolean
              bookmark:
                title: AccountFetchDetails.viewsToFetch.[].bookmark
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
            required:
              - viewId
              - viewType
              - bookmark
            additionalProperties: false
            title: AccountFetchDetails.viewsToFetch.[]
            type: object
          title: AccountFetchDetails.viewsToFetch
          description: An array of views to fetch
          type: array
      additionalProperties: false
      title: AccountFetchDetails
      description: >-
        This defines the options for fetching additional account details.


        A view is a way of fetching additional details about an account, and
        these will be queryable in the response via the `views` property.


        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the account.

        - `latestAnnouncements` - Fetches the latest announcements for the
        account.

        - `reviews` - Fetches the latest reviews for the account.

        - `badgesCollected` - Fetches the badges collected by the account
        sequentially in random order.

      type: object
    GetAccountsRouteRequestBody:
      properties:
        accountsToFetch:
          items:
            $ref: '#/components/schemas/AccountFetchDetails'
            title: GetAccountsRouteRequestBody.accountsToFetch.[]
          title: GetAccountsRouteRequestBody.accountsToFetch
          type: array
      required:
        - accountsToFetch
      additionalProperties: false
      title: GetAccountsRouteRequestBody
      type: object
    iGetAccountsRouteSuccessResponse:
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
            title: iGetAccountsRouteSuccessResponse.accounts.[]
          title: iGetAccountsRouteSuccessResponse.accounts
          type: array
      required:
        - accounts
      additionalProperties: false
      title: iGetAccountsRouteSuccessResponse
      type: object
    GetFollowDetailsRouteRequestBody:
      properties:
        cosmosAddress:
          title: GetFollowDetailsRouteRequestBody.cosmosAddress
          type: string
        followingBookmark:
          title: GetFollowDetailsRouteRequestBody.followingBookmark
          type: string
        followersBookmark:
          title: GetFollowDetailsRouteRequestBody.followersBookmark
          type: string
        protocol:
          title: GetFollowDetailsRouteRequestBody.protocol
          type: string
        activityBookmark:
          title: GetFollowDetailsRouteRequestBody.activityBookmark
          type: string
      required:
        - cosmosAddress
      additionalProperties: false
      title: GetFollowDetailsRouteRequestBody
      type: object
    iGetFollowDetailsRouteSuccessResponse:
      properties:
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          title: iFollowDetailsDoc.cosmosAddress
          description: The Cosmos address of the user
          type: string
        followingCount:
          title: iFollowDetailsDoc.followingCount
          description: The number of users that the user is following
          $ref: '#components/schemas/NumberType'
        followersCount:
          title: iFollowDetailsDoc.followersCount
          description: The number of users that are following the user
          $ref: '#components/schemas/NumberType'
        followers:
          items:
            title: iFollowDetailsDoc.followers.[]
            type: string
          title: iFollowDetailsDoc.followers
          description: The followers of the user
          type: array
        following:
          items:
            title: iFollowDetailsDoc.following.[]
            type: string
          title: iFollowDetailsDoc.following
          description: The following of the user
          type: array
        followingCollectionId:
          title: iFollowDetailsDoc.followingCollectionId
          description: The collection ID of the following collection
          $ref: '#components/schemas/NumberType'
        followersPagination:
          $ref: '#/components/schemas/PaginationInfo'
          title: iGetFollowDetailsRouteSuccessResponse.followersPagination
        followingPagination:
          $ref: '#/components/schemas/PaginationInfo'
          title: iGetFollowDetailsRouteSuccessResponse.followingPagination
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            title: iGetFollowDetailsRouteSuccessResponse.activity.[]
          title: iGetFollowDetailsRouteSuccessResponse.activity
          type: array
        activityPagination:
          $ref: '#/components/schemas/PaginationInfo'
          title: iGetFollowDetailsRouteSuccessResponse.activityPagination
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
        - followersPagination
        - followingPagination
        - activity
        - activityPagination
      additionalProperties: false
      title: iGetFollowDetailsRouteSuccessResponse, Doc
      description: |-
        Fields for the MongoDB database document
      type: object
    FilterBadgesInCollectionRequestBody:
      properties:
        collectionId:
          title: FilterBadgesInCollectionRequestBody.collectionId
          description: The collection ID to filter
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: FilterBadgesInCollectionRequestBody.badgeIds.[]
          title: FilterBadgesInCollectionRequestBody.badgeIds
          description: >-
            Limit to specific badge IDs. Leave undefined to not filter by badge
            ID.
          type: array
        categories:
          items:
            title: FilterBadgesInCollectionRequestBody.categories.[]
            type: string
          title: FilterBadgesInCollectionRequestBody.categories
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        tags:
          items:
            title: FilterBadgesInCollectionRequestBody.tags.[]
            type: string
          title: FilterBadgesInCollectionRequestBody.tags
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        mostViewed:
          enum:
            - daily
            - allTime
            - weekly
            - monthly
            - yearly
          title: FilterBadgesInCollectionRequestBody.mostViewed
          description: >-
            mostViewed is a special view that sorts by most viewed badges. May
            be incompatible with other filters.
          type: string
        bookmark:
          title: FilterBadgesInCollectionRequestBody.bookmark
          description: Pagination bookmark. Leave undefined or "" for first request.
          type: string
        attributes:
          items:
            properties:
              name:
                title: FilterBadgesInCollectionRequestBody.attributes.[].name
                type: string
              value:
                title: FilterBadgesInCollectionRequestBody.attributes.[].value
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - name
              - value
            additionalProperties: false
            title: FilterBadgesInCollectionRequestBody.attributes.[]
            type: object
          title: FilterBadgesInCollectionRequestBody.attributes
          description: Attribute queries
          type: array
      required:
        - collectionId
      additionalProperties: false
      title: FilterBadgesInCollectionRequestBody
      type: object
    iFilterBadgesInCollectionSuccessResponse:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iFilterBadgesInCollectionSuccessResponse.badgeIds.[]
          title: iFilterBadgesInCollectionSuccessResponse.badgeIds
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          title: iFilterBadgesInCollectionSuccessResponse.pagination
      required:
        - badgeIds
        - pagination
      additionalProperties: false
      title: iFilterBadgesInCollectionSuccessResponse
      type: object
    PaginationInfo:
      properties:
        bookmark:
          title: PaginationInfo.bookmark
          type: string
        hasMore:
          title: PaginationInfo.hasMore
          type: boolean
      required:
        - bookmark
        - hasMore
      additionalProperties: false
      title: PaginationInfo
      description: |-
        Type for pagination information.
      type: object
    GetOwnersForBadgeRouteRequestBody:
      properties:
        bookmark:
          title: GetOwnersForBadgeRouteRequestBody.bookmark
          description: >-
            The pagination bookmark for where to start the request. Bookmarks
            are obtained via the previous response. "" for first request.
          type: string
      additionalProperties: false
      title: GetOwnersForBadgeRouteRequestBody
      type: object
    iGetOwnersForBadgeRouteSuccessResponse:
      properties:
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
            title: iGetOwnersForBadgeRouteSuccessResponse.owners.[]
          title: iGetOwnersForBadgeRouteSuccessResponse.owners
          description: Represents a list of owners balance details.
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          title: iGetOwnersForBadgeRouteSuccessResponse.pagination
          description: Represents pagination information.
      required:
        - owners
        - pagination
      additionalProperties: false
      title: iGetOwnersForBadgeRouteSuccessResponse
      type: object
    GetBadgeBalanceByAddressRouteRequestBody:
      additionalProperties: false
      title: GetBadgeBalanceByAddressRouteRequestBody
      type: object
    iGetBadgeBalanceByAddressRouteSuccessResponse:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iUserBalanceStore.balances.[]
          title: iUserBalanceStore.balances
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
            title: iUserBalanceStore.incomingApprovals.[]
          title: iUserBalanceStore.incomingApprovals
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
            title: iUserBalanceStore.outgoingApprovals.[]
          title: iUserBalanceStore.outgoingApprovals
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          title: iUserBalanceStore.userPermissions
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          title: iUserBalanceStore.autoApproveSelfInitiatedOutgoingTransfers
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          title: iUserBalanceStore.autoApproveSelfInitiatedIncomingTransfers
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          title: Doc._docId
          description: A unique stringified document ID
          type: string
        _id:
          title: Doc._id
          description: A uniuqe document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          title: iBalanceDoc.collectionId
          description: The collection ID
          $ref: '#components/schemas/NumberType'
        cosmosAddress:
          title: iBalanceDoc.cosmosAddress
          description: The Cosmos address of the user
          type: string
        onChain:
          title: iBalanceDoc.onChain
          description: True if the balances are on-chain
          type: boolean
        uri:
          title: iBalanceDoc.uri
          description: The URI of the off-chain balances
          type: string
        fetchedAt:
          title: iBalanceDoc.fetchedAt
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        fetchedAtBlock:
          title: iBalanceDoc.fetchedAtBlock
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#components/schemas/NumberType'
        isPermanent:
          title: iBalanceDoc.isPermanent
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          title: iBalanceDoc.contentHash
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            properties:
              txHash:
                title: iBalanceDoc.updateHistory.[].txHash
                type: string
              block:
                title: iBalanceDoc.updateHistory.[].block
                $ref: '#components/schemas/NumberType'
              blockTimestamp:
                title: iBalanceDoc.updateHistory.[].blockTimestamp
                $ref: '#components/schemas/NumberType'
            required:
              - txHash
              - block
              - blockTimestamp
            additionalProperties: false
            title: iBalanceDoc.updateHistory.[]
            type: object
          title: iBalanceDoc.updateHistory
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      title: iGetBadgeBalanceByAddressRouteSuccessResponse, iUserBalanceStore, Doc
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.


        Fields for the MongoDB database document

      type: object
    GetBadgeActivityRouteRequestBody:
      properties:
        bookmark:
          title: GetBadgeActivityRouteRequestBody.bookmark
          description: >-
            An optional bookmark for pagination. Bookmarks are obtained via the
            previous response. "" for first request.
          type: string
      additionalProperties: false
      title: GetBadgeActivityRouteRequestBody
      type: object
    iGetBadgeActivityRouteSuccessResponse:
      properties:
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            title: iGetBadgeActivityRouteSuccessResponse.activity.[]
          title: iGetBadgeActivityRouteSuccessResponse.activity
          description: Array of transfer activity information.
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          title: iGetBadgeActivityRouteSuccessResponse.pagination
          description: Pagination information.
      required:
        - activity
        - pagination
      additionalProperties: false
      title: iGetBadgeActivityRouteSuccessResponse
      type: object
    MetadataFetchOptions:
      properties:
        doNotFetchCollectionMetadata:
          title: MetadataFetchOptions.doNotFetchCollectionMetadata
          description: If true, collection metadata will not be fetched.
          type: boolean
        metadataIds:
          anyOf:
            - title: MetadataFetchOptions.metadataIds
              type: string
            - items:
                title: MetadataFetchOptions.metadataIds.[]
                type: number
              title: MetadataFetchOptions.metadataIds.[]
              type: array
            - items:
                $ref: '#/components/schemas/iUintRange'
                title: MetadataFetchOptions.metadataIds.[]
              title: MetadataFetchOptions.metadataIds.[]
              type: array
          title: MetadataFetchOptions.metadataIds
          description: >-
            If present, the metadata corresponding to the specified metadata IDs
            will be fetched.

            Metadata IDs are helpful when determining UNQIUE URIs to be fetched.


            If badges 1-10000 all share the same URI, they will have the same
            single metadata ID.

            If badge 1 has a different URI than badges 2-10000, badge 1 will
            have a different metadata ID than the rest/


            We scan in increasing order of badge IDs, so metadata ID 1 will be
            for badge 1-X, metadata ID 2 will be for badge X+1-Y, etc.


            ID 0 = Collection metadata fetch

            ID 1 = First badge metadata fetch

            ID 2 = Second badge metadata fetch (if present)

            And so on

            Learn more in documentation.
        uris:
          items:
            title: MetadataFetchOptions.uris.[]
            type: string
          title: MetadataFetchOptions.uris
          description: >-
            If present, the metadata corresponding to the specified URIs will be
            fetched.
          type: array
        badgeIds:
          anyOf:
            - title: MetadataFetchOptions.badgeIds
              type: string
            - items:
                title: MetadataFetchOptions.badgeIds.[]
                type: number
              title: MetadataFetchOptions.badgeIds.[]
              type: array
            - items:
                $ref: '#/components/schemas/iUintRange'
                title: MetadataFetchOptions.badgeIds.[]
              title: MetadataFetchOptions.badgeIds.[]
              type: array
          title: MetadataFetchOptions.badgeIds
          description: >-
            If present, the metadata corresponding to the specified badge IDs
            will be fetched.
      additionalProperties: false
      title: MetadataFetchOptions
      description: |-
        Defines the options for fetching metadata.
      type: object
    CollectionViewKey:
      enum:
        - transferActivity
        - reviews
        - owners
        - amountTrackers
        - challengeTrackers
      title: CollectionViewKey
      description: |-
        Supported view keys for fetching additional collection details.
      type: string
    GetAdditionalCollectionDetailsRequestBody:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewType
                description: The base view type to fetch.
              viewId:
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewId
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
              bookmark:
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].bookmark
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].oldestFirst
                description: If defined, we will return the oldest items first.
                type: boolean
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[]
            type: object
          title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          title: GetAdditionalCollectionDetailsRequestBody.fetchTotalAndMintBalances
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
            title: >-
              GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch.[]
          title: GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
            title: >-
              GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch.[]
          title: GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          title: GetAdditionalCollectionDetailsRequestBody.handleAllAndAppendDefaults
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          title: GetAdditionalCollectionDetailsRequestBody.fetchPrivateParams
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
      additionalProperties: false
      title: GetAdditionalCollectionDetailsRequestBody
      description: >-
        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.

      type: object
    GetMetadataForCollectionRequestBody:
      properties:
        metadataToFetch:
          $ref: '#/components/schemas/MetadataFetchOptions'
          title: GetMetadataForCollectionRequestBody.metadataToFetch
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
      additionalProperties: false
      title: GetMetadataForCollectionRequestBody
      type: object
    GetCollectionBatchRouteRequestBody:
      properties:
        collectionsToFetch:
          items:
            allOf:
              - properties:
                  collectionId:
                    title: collectionId
                    description: The ID of the collection to fetch.
                    $ref: '#components/schemas/NumberType'
                required:
                  - collectionId
                additionalProperties: false
                type: object
              - $ref: '#/components/schemas/GetMetadataForCollectionRequestBody'
              - $ref: '#/components/schemas/GetAdditionalCollectionDetailsRequestBody'
          title: GetCollectionBatchRouteRequestBody.collectionsToFetch
          type: array
      required:
        - collectionsToFetch
      additionalProperties: false
      title: GetCollectionBatchRouteRequestBody
      type: object
    iGetCollectionBatchRouteSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
            title: iGetCollectionBatchRouteSuccessResponse.collections.[]
          title: iGetCollectionBatchRouteSuccessResponse.collections
          type: array
      required:
        - collections
      additionalProperties: false
      title: iGetCollectionBatchRouteSuccessResponse
      type: object
    GetCollectionByIdRouteRequestBody:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewType
                description: The base view type to fetch.
              viewId:
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewId
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
              bookmark:
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].bookmark
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                title: >-
                  GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].oldestFirst
                description: If defined, we will return the oldest items first.
                type: boolean
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[]
            type: object
          title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          title: GetAdditionalCollectionDetailsRequestBody.fetchTotalAndMintBalances
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
            title: >-
              GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch.[]
          title: GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
            title: >-
              GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch.[]
          title: GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          title: GetAdditionalCollectionDetailsRequestBody.handleAllAndAppendDefaults
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          title: GetAdditionalCollectionDetailsRequestBody.fetchPrivateParams
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
        metadataToFetch:
          $ref: '#/components/schemas/MetadataFetchOptions'
          title: GetMetadataForCollectionRequestBody.metadataToFetch
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
      additionalProperties: false
      title: >-
        GetCollectionByIdRouteRequestBody,
        GetAdditionalCollectionDetailsRequestBody,
        GetMetadataForCollectionRequestBody
      description: >-

        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.

      type: object
    iGetCollectionByIdRouteSuccessResponse:
      properties:
        collection:
          $ref: '#/components/schemas/iBitBadgesCollection'
          title: iGetCollectionByIdRouteSuccessResponse.collection
      required:
        - collection
      additionalProperties: false
      title: iGetCollectionByIdRouteSuccessResponse
      type: object
    RefreshMetadataRouteRequestBody:
      additionalProperties: false
      title: RefreshMetadataRouteRequestBody
      type: object
    iRefreshMetadataRouteSuccessResponse:
      additionalProperties: false
      title: iRefreshMetadataRouteSuccessResponse
      type: object
    RefreshStatusRouteRequestBody:
      additionalProperties: false
      title: RefreshStatusRouteRequestBody
      type: object
    iRefreshStatusRouteSuccessResponse:
      properties:
        inQueue:
          title: iRefreshStatusRouteSuccessResponse.inQueue
          description: Boolean indicating if the collection is currently in the queue.
          type: boolean
        errorDocs:
          items:
            $ref: '#/components/schemas/iQueueDoc'
            title: iRefreshStatusRouteSuccessResponse.errorDocs.[]
          title: iRefreshStatusRouteSuccessResponse.errorDocs
          description: Array of error documents corresponding to the collection.
          type: array
        refreshDoc:
          $ref: '#/components/schemas/iRefreshDoc'
          title: iRefreshStatusRouteSuccessResponse.refreshDoc
          description: The status information corresponding to the collection.
      required:
        - inQueue
        - errorDocs
        - refreshDoc
      additionalProperties: false
      title: iRefreshStatusRouteSuccessResponse
      type: object
    GetProtocolsRouteRequestBody:
      properties:
        names:
          items:
            title: GetProtocolsRouteRequestBody.names.[]
            type: string
          title: GetProtocolsRouteRequestBody.names
          type: array
      required:
        - names
      additionalProperties: false
      title: GetProtocolsRouteRequestBody
      type: object
    iGetProtocolsRouteSuccessResponse:
      properties:
        protocols:
          items:
            $ref: '#/components/schemas/iProtocol'
            title: iGetProtocolsRouteSuccessResponse.protocols.[]
          title: iGetProtocolsRouteSuccessResponse.protocols
          type: array
      required:
        - protocols
      additionalProperties: false
      title: iGetProtocolsRouteSuccessResponse
      type: object
    iProtocol:
      properties:
        name:
          title: iProtocol.name
          description: The name of the protocol.
          type: string
        uri:
          title: iProtocol.uri
          description: The URI of the protocol.
          type: string
        customData:
          title: iProtocol.customData
          description: The custom data of the protocol.
          type: string
        createdBy:
          title: iProtocol.createdBy
          description: The cosmos address of the user who created the protocol.
          type: string
        isFrozen:
          title: iProtocol.isFrozen
          description: Whether the protocol is frozen or not.
          type: boolean
      required:
        - name
        - uri
        - customData
        - createdBy
        - isFrozen
      additionalProperties: false
      title: iProtocol
      type: object
    GetCollectionForProtocolRouteRequestBody:
      properties:
        name:
          title: GetCollectionForProtocolRouteRequestBody.name
          type: string
        address:
          title: GetCollectionForProtocolRouteRequestBody.address
          type: string
      required:
        - name
        - address
      additionalProperties: false
      title: GetCollectionForProtocolRouteRequestBody
      type: object
    iGetCollectionForProtocolRouteSuccessResponse:
      properties:
        collectionId:
          title: iGetCollectionForProtocolRouteSuccessResponse.collectionId
          $ref: '#components/schemas/NumberType'
      required:
        - collectionId
      additionalProperties: false
      title: iGetCollectionForProtocolRouteSuccessResponse
      type: object
    GetStatusRouteRequestBody:
      additionalProperties: false
      title: GetStatusRouteRequestBody
      type: object
    iGetStatusRouteSuccessResponse:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
          title: iGetStatusRouteSuccessResponse.status
          description: Includes status details about the indexer / blockchain.
      required:
        - status
      additionalProperties: false
      title: iGetStatusRouteSuccessResponse
      type: object
    GetSearchRouteRequestBody:
      properties:
        noCollections:
          title: GetSearchRouteRequestBody.noCollections
          description: If true, we will skip all collection queries.
          type: boolean
        noAccounts:
          title: GetSearchRouteRequestBody.noAccounts
          description: If true, we will skip all account queries.
          type: boolean
        noAddressLists:
          title: GetSearchRouteRequestBody.noAddressLists
          description: If true, we will skip all address list queries.
          type: boolean
        noBadges:
          title: GetSearchRouteRequestBody.noBadges
          description: If true, we will skip all badge queries.
          type: boolean
        specificCollectionId:
          title: GetSearchRouteRequestBody.specificCollectionId
          description: If true, we will limit collection results to a single collection.
          $ref: '#components/schemas/NumberType'
      additionalProperties: false
      title: GetSearchRouteRequestBody
      type: object
    iGetSearchRouteSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
            title: iGetSearchRouteSuccessResponse.collections.[]
          title: iGetSearchRouteSuccessResponse.collections
          type: array
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
            title: iGetSearchRouteSuccessResponse.accounts.[]
          title: iGetSearchRouteSuccessResponse.accounts
          type: array
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
            title: iGetSearchRouteSuccessResponse.addressLists.[]
          title: iGetSearchRouteSuccessResponse.addressLists
          type: array
        badges:
          items:
            properties:
              collection:
                $ref: '#/components/schemas/iBitBadgesCollection'
                title: iGetSearchRouteSuccessResponse.badges.[].collection
              badgeIds:
                items:
                  $ref: '#/components/schemas/iUintRange'
                  title: iGetSearchRouteSuccessResponse.badges.[].badgeIds.[]
                title: iGetSearchRouteSuccessResponse.badges.[].badgeIds
                type: array
            required:
              - collection
              - badgeIds
            additionalProperties: false
            title: iGetSearchRouteSuccessResponse.badges.[]
            type: object
          title: iGetSearchRouteSuccessResponse.badges
          type: array
      required:
        - collections
        - accounts
        - addressLists
        - badges
      additionalProperties: false
      title: iGetSearchRouteSuccessResponse
      type: object
    CodesAndPasswords:
      properties:
        cid:
          title: CodesAndPasswords.cid
          description: The IPFS CID of the merkle challenge.
          type: string
        codes:
          items:
            title: CodesAndPasswords.codes.[]
            type: string
          title: CodesAndPasswords.codes
          type: array
        password:
          title: CodesAndPasswords.password
          type: string
      required:
        - cid
        - codes
        - password
      additionalProperties: false
      title: CodesAndPasswords
      description: >-
        Type to allow specifying codes and passwords for a merkle challenge.


        We only support storing codes and passwords for merkle challenges
        created by BitBadges via IPFS.

        The IPFS CID of the merkle challenge is used to identify the merkle
        challenge.


        Note that we only support storing a set of codes and passwords once per
        unique CID.

      type: object
    GetClaimsRouteRequestBody:
      properties:
        claimIds:
          items:
            title: GetClaimsRouteRequestBody.claimIds.[]
            type: string
          title: GetClaimsRouteRequestBody.claimIds
          type: array
        listId:
          title: GetClaimsRouteRequestBody.listId
          type: string
      required:
        - claimIds
      additionalProperties: false
      title: GetClaimsRouteRequestBody
      type: object
    iGetClaimsRouteSuccessResponse:
      properties:
        claims:
          items:
            properties:
              claimId:
                title: iGetClaimsRouteSuccessResponse.claims.[].claimId
                type: string
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
                title: iGetClaimsRouteSuccessResponse.claims.[].balancesToSet
              plugins:
                items: {}
                title: iGetClaimsRouteSuccessResponse.claims.[].plugins
                type: array
              manualDistribution:
                title: iGetClaimsRouteSuccessResponse.claims.[].manualDistribution
                type: boolean
            required:
              - claimId
              - plugins
            additionalProperties: false
            title: iGetClaimsRouteSuccessResponse.claims.[]
            type: object
          title: iGetClaimsRouteSuccessResponse.claims
          type: array
      required:
        - claims
      additionalProperties: false
      title: iGetClaimsRouteSuccessResponse
      type: object
    CheckAndCompleteClaimRouteRequestBody:
      properties:
        prevCodesOnly:
          title: CheckAndCompleteClaimRouteRequestBody.prevCodesOnly
          type: boolean
      additionalProperties: {}
      title: CheckAndCompleteClaimRouteRequestBody
      type: object
    iCheckAndCompleteClaimRouteSuccessResponse:
      properties:
        code:
          title: iCheckAndCompleteClaimRouteSuccessResponse.code
          type: string
        prevCodes:
          items:
            title: iCheckAndCompleteClaimRouteSuccessResponse.prevCodes.[]
            type: string
          title: iCheckAndCompleteClaimRouteSuccessResponse.prevCodes
          type: array
      additionalProperties: false
      title: iCheckAndCompleteClaimRouteSuccessResponse
      type: object
    DeleteReviewRouteRequestBody:
      properties:
        reviewId:
          title: DeleteReviewRouteRequestBody.reviewId
          description: The review ID to delete.
          type: string
      required:
        - reviewId
      additionalProperties: false
      title: DeleteReviewRouteRequestBody
      type: object
    iDeleteReviewRouteSuccessResponse:
      additionalProperties: false
      title: iDeleteReviewRouteSuccessResponse
      type: object
    AddReviewForCollectionRouteRequestBody:
      properties:
        review:
          title: AddReviewForCollectionRouteRequestBody.review
          description: The review text (1 to 2048 characters).
          type: string
        stars:
          title: AddReviewForCollectionRouteRequestBody.stars
          description: The star rating (1 to 5).
          $ref: '#components/schemas/NumberType'
      required:
        - review
        - stars
      additionalProperties: false
      title: AddReviewForCollectionRouteRequestBody
      type: object
    iAddReviewForCollectionRouteSuccessResponse:
      additionalProperties: false
      title: iAddReviewForCollectionRouteSuccessResponse
      type: object
    AddReviewForUserRouteRequestBody:
      properties:
        review:
          title: AddReviewForUserRouteRequestBody.review
          description: The review text (1 to 2048 characters).
          type: string
        stars:
          title: AddReviewForUserRouteRequestBody.stars
          description: The number of stars (1 to 5) for the review.
          $ref: '#components/schemas/NumberType'
      required:
        - review
        - stars
      additionalProperties: false
      title: AddReviewForUserRouteRequestBody
      type: object
    iAddReviewForUserRouteSuccessResponse:
      additionalProperties: false
      title: iAddReviewForUserRouteSuccessResponse
      type: object
    UpdateAccountInfoRouteRequestBody:
      properties:
        discord:
          title: UpdateAccountInfoRouteRequestBody.discord
          description: The Discord username.
          type: string
        twitter:
          title: UpdateAccountInfoRouteRequestBody.twitter
          description: The Twitter username.
          type: string
        github:
          title: UpdateAccountInfoRouteRequestBody.github
          description: The GitHub username.
          type: string
        telegram:
          title: UpdateAccountInfoRouteRequestBody.telegram
          description: The Telegram username.
          type: string
        seenActivity:
          title: UpdateAccountInfoRouteRequestBody.seenActivity
          description: The last seen activity timestamp.
          $ref: '#components/schemas/NumberType'
        readme:
          title: UpdateAccountInfoRouteRequestBody.readme
          description: The README details.
          type: string
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
            title: UpdateAccountInfoRouteRequestBody.hiddenBadges.[]
          title: UpdateAccountInfoRouteRequestBody.hiddenBadges
          description: The badges to hide and not view for this profile's portfolio
          type: array
        hiddenLists:
          items:
            title: UpdateAccountInfoRouteRequestBody.hiddenLists.[]
            type: string
          title: UpdateAccountInfoRouteRequestBody.hiddenLists
          description: The lists to hide and not view for this profile's portfolio
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                title: UpdateAccountInfoRouteRequestBody.customPages.badges.[]
              title: UpdateAccountInfoRouteRequestBody.customPages.badges
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                title: UpdateAccountInfoRouteRequestBody.customPages.lists.[]
              title: UpdateAccountInfoRouteRequestBody.customPages.lists
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          title: UpdateAccountInfoRouteRequestBody.customPages
          description: >-
            An array of custom pages on the user's portolio. Used to customize,
            sort, and group badges / lists into pages.
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
                title: UpdateAccountInfoRouteRequestBody.watchlists.badges.[]
              title: UpdateAccountInfoRouteRequestBody.watchlists.badges
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
                title: UpdateAccountInfoRouteRequestBody.watchlists.lists.[]
              title: UpdateAccountInfoRouteRequestBody.watchlists.lists
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          title: UpdateAccountInfoRouteRequestBody.watchlists
          description: The watchlist of badges / lists
          type: object
        profilePicUrl:
          title: UpdateAccountInfoRouteRequestBody.profilePicUrl
          description: The profile picture URL.
          type: string
        username:
          title: UpdateAccountInfoRouteRequestBody.username
          description: The username.
          type: string
        profilePicImageFile:
          title: UpdateAccountInfoRouteRequestBody.profilePicImageFile
          description: The profile picture image file. We will then upload to our CDN.
        notifications:
          properties:
            email:
              title: UpdateAccountInfoRouteRequestBody.notifications.email
              type: string
            antiPhishingCode:
              title: UpdateAccountInfoRouteRequestBody.notifications.antiPhishingCode
              type: string
            preferences:
              additionalProperties: false
              title: UpdateAccountInfoRouteRequestBody.notifications.preferences
              type: object
          additionalProperties: false
          title: UpdateAccountInfoRouteRequestBody.notifications
          description: The notification preferences for the user.
          type: object
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  title: >-
                    UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord.username
                  type: string
                discriminator:
                  title: >-
                    UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord.discriminator
                  type: string
                id:
                  title: >-
                    UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord.id
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              title: UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord
              type: object
          additionalProperties: false
          title: UpdateAccountInfoRouteRequestBody.approvedSignInMethods
          description: Approved sign in methods
          type: object
      additionalProperties: false
      title: UpdateAccountInfoRouteRequestBody
      type: object
    iUpdateAccountInfoRouteSuccessResponse:
      additionalProperties: false
      title: iUpdateAccountInfoRouteSuccessResponse
      type: object
    AddBalancesToOffChainStorageRouteRequestBody:
      properties:
        balances:
          $ref: '#/components/schemas/iOffChainBalancesMap'
          title: AddBalancesToOffChainStorageRouteRequestBody.balances
          description: A map of Cosmos addresses or list IDs -> Balance[].
        offChainClaims:
          items:
            properties:
              claimId:
                title: >-
                  AddBalancesToOffChainStorageRouteRequestBody.offChainClaims.[].claimId
                type: string
              plugins:
                items: {}
                title: >-
                  AddBalancesToOffChainStorageRouteRequestBody.offChainClaims.[].plugins
                type: array
              balancesToSet:
                $ref: '#/components/schemas/iIncrementedBalances'
                title: >-
                  AddBalancesToOffChainStorageRouteRequestBody.offChainClaims.[].balancesToSet
            required:
              - claimId
              - plugins
            additionalProperties: false
            title: AddBalancesToOffChainStorageRouteRequestBody.offChainClaims.[]
            type: object
          title: AddBalancesToOffChainStorageRouteRequestBody.offChainClaims
          description: The claim details
          type: array
        method:
          enum:
            - ipfs
            - centralized
          title: AddBalancesToOffChainStorageRouteRequestBody.method
          description: The method for storing balances (ipfs or centralized).
          type: string
        collectionId:
          title: AddBalancesToOffChainStorageRouteRequestBody.collectionId
          description: The collection ID.
          $ref: '#components/schemas/NumberType'
      required:
        - method
        - collectionId
      additionalProperties: false
      title: AddBalancesToOffChainStorageRouteRequestBody
      type: object
    iAddBalancesToOffChainStorageRouteSuccessResponse:
      properties:
        uri:
          title: iAddBalancesToOffChainStorageRouteSuccessResponse.uri
          description: The URI of the stored data.
          type: string
        result:
          properties:
            cid:
              title: iAddBalancesToOffChainStorageRouteSuccessResponse.result.cid
              type: string
          additionalProperties: false
          title: iAddBalancesToOffChainStorageRouteSuccessResponse.result
          description: The result object with CID.
          type: object
      required:
        - result
      additionalProperties: false
      title: iAddBalancesToOffChainStorageRouteSuccessResponse
      type: object
    AddMetadataToIpfsRouteRequestBody:
      properties:
        collectionMetadata:
          $ref: '#/components/schemas/iMetadata'
          title: AddMetadataToIpfsRouteRequestBody.collectionMetadata
          description: The collection metadata to add to IPFS
        badgeMetadata:
          anyOf:
            - items:
                $ref: '#/components/schemas/iBadgeMetadataDetails'
                title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
              title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
              type: array
            - items:
                $ref: '#/components/schemas/iMetadata'
                title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
              title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
              type: array
          title: AddMetadataToIpfsRouteRequestBody.badgeMetadata
          description: The badge metadata to add to IPFS
      additionalProperties: false
      title: AddMetadataToIpfsRouteRequestBody
      type: object
    iAddMetadataToIpfsRouteSuccessResponse:
      properties:
        collectionMetadataResult:
          properties:
            cid:
              title: >-
                iAddMetadataToIpfsRouteSuccessResponse.collectionMetadataResult.cid
              type: string
          required:
            - cid
          additionalProperties: false
          title: iAddMetadataToIpfsRouteSuccessResponse.collectionMetadataResult
          description: The result for collection metadata.
          type: object
        badgeMetadataResults:
          items:
            properties:
              cid:
                title: >-
                  iAddMetadataToIpfsRouteSuccessResponse.badgeMetadataResults.[].cid
                type: string
            required:
              - cid
            additionalProperties: false
            title: iAddMetadataToIpfsRouteSuccessResponse.badgeMetadataResults.[]
            type: object
          title: iAddMetadataToIpfsRouteSuccessResponse.badgeMetadataResults
          description: An array of badge metadata results, if applicable.
          type: array
      required:
        - badgeMetadataResults
      additionalProperties: false
      title: iAddMetadataToIpfsRouteSuccessResponse
      type: object
    AddApprovalDetailsToOffChainStorageRouteRequestBody:
      properties:
        name:
          title: AddApprovalDetailsToOffChainStorageRouteRequestBody.name
          description: The name of the approval.
          type: string
        description:
          title: AddApprovalDetailsToOffChainStorageRouteRequestBody.description
          description: The description of the approval.
          type: string
        challengeDetails:
          $ref: '#/components/schemas/iChallengeDetails'
          title: AddApprovalDetailsToOffChainStorageRouteRequestBody.challengeDetails
          description: The challenge details.
        offChainClaims:
          items:
            properties:
              plugins:
                items: {}
                title: >-
                  AddApprovalDetailsToOffChainStorageRouteRequestBody.offChainClaims.[].plugins
                description: The plugins for the approval.
                type: array
              claimId:
                title: >-
                  AddApprovalDetailsToOffChainStorageRouteRequestBody.offChainClaims.[].claimId
                type: string
              manualDistribution:
                title: >-
                  AddApprovalDetailsToOffChainStorageRouteRequestBody.offChainClaims.[].manualDistribution
                type: boolean
            required:
              - plugins
              - claimId
            additionalProperties: false
            title: >-
              AddApprovalDetailsToOffChainStorageRouteRequestBody.offChainClaims.[]
            type: object
          title: AddApprovalDetailsToOffChainStorageRouteRequestBody.offChainClaims
          type: array
      required:
        - name
        - description
      additionalProperties: false
      title: AddApprovalDetailsToOffChainStorageRouteRequestBody
      type: object
    iAddApprovalDetailsToOffChainStorageRouteSuccessResponse:
      properties:
        result:
          properties:
            cid:
              title: >-
                iAddApprovalDetailsToOffChainStorageRouteSuccessResponse.result.cid
              type: string
          required:
            - cid
          additionalProperties: false
          title: iAddApprovalDetailsToOffChainStorageRouteSuccessResponse.result
          description: The result with CID for IPFS.
          type: object
      required:
        - result
      additionalProperties: false
      title: iAddApprovalDetailsToOffChainStorageRouteSuccessResponse
      type: object
    GetSignInChallengeRouteRequestBody:
      properties:
        chain:
          title: GetSignInChallengeRouteRequestBody.chain
          description: The blockchain to be signed in with.
        address:
          title: GetSignInChallengeRouteRequestBody.address
          description: The user's blockchain address (their native L1 address).
          type: string
        hours:
          title: GetSignInChallengeRouteRequestBody.hours
          description: The number of hours to be signed in for.
          $ref: '#components/schemas/NumberType'
      required:
        - chain
        - address
      additionalProperties: false
      title: GetSignInChallengeRouteRequestBody
      type: object
    iGetSignInChallengeRouteSuccessResponse:
      properties:
        nonce:
          title: iGetSignInChallengeRouteSuccessResponse.nonce
          description: The nonce for the challenge.
          type: string
        params:
          title: iGetSignInChallengeRouteSuccessResponse.params
          description: The challenge parameters.
          $ref: '#/components/schemas/BlockinChallengeParams'
        message:
          title: iGetSignInChallengeRouteSuccessResponse.message
          description: The Blockin challenge message to sign.
          type: string
      required:
        - nonce
        - params
        - message
      additionalProperties: false
      title: iGetSignInChallengeRouteSuccessResponse
      type: object

    VerifySignInRouteRequestBody:
      properties:
        message:
          title: VerifySignInRouteRequestBody.message
          description: The original Blockin message
          type: string
        signature:
          title: VerifySignInRouteRequestBody.signature
          description: The signature of the Blockin message
          type: string
        publicKey:
          title: VerifySignInRouteRequestBody.publicKey
          description: Required for some chains. The public key of the signer.
          type: string
      required:
        - message
        - signature
      additionalProperties: false
      title: VerifySignInRouteRequestBody
      type: object
    iVerifySignInRouteSuccessResponse:
      additionalProperties: false
      title: iVerifySignInRouteSuccessResponse
      type: object
    CheckSignInStatusRequestBody:
      additionalProperties: false
      title: CheckSignInStatusRequestBody
      type: object
    iCheckSignInStatusRequestSuccessResponse:
      properties:
        signedIn:
          title: iCheckSignInStatusRequestSuccessResponse.signedIn
          description: Indicates whether the user is signed in.
          type: boolean
        message:
          title: iCheckSignInStatusRequestSuccessResponse.message
          description: The Blockin message that was signed.
          type: string
        discord:
          properties:
            username:
              title: iCheckSignInStatusRequestSuccessResponse.discord.username
              type: string
            discriminator:
              title: iCheckSignInStatusRequestSuccessResponse.discord.discriminator
              type: string
            id:
              title: iCheckSignInStatusRequestSuccessResponse.discord.id
              type: string
          required:
            - username
            - discriminator
            - id
          additionalProperties: false
          title: iCheckSignInStatusRequestSuccessResponse.discord
          description: Signed in with Discord username and discriminator?
          type: object
        twitter:
          properties:
            id:
              title: iCheckSignInStatusRequestSuccessResponse.twitter.id
              type: string
            username:
              title: iCheckSignInStatusRequestSuccessResponse.twitter.username
              type: string
          required:
            - id
            - username
          additionalProperties: false
          title: iCheckSignInStatusRequestSuccessResponse.twitter
          description: Signed in with Twitter username?
          type: object
      required:
        - signedIn
        - message
      additionalProperties: false
      title: iCheckSignInStatusRequestSuccessResponse
      type: object
    SignOutRequestBody:
      properties:
        signOutDiscord:
          title: SignOutRequestBody.signOutDiscord
          type: boolean
        signOutTwitter:
          title: SignOutRequestBody.signOutTwitter
          type: boolean
        signOutBlockin:
          title: SignOutRequestBody.signOutBlockin
          type: boolean
      required:
        - signOutDiscord
        - signOutTwitter
        - signOutBlockin
      additionalProperties: false
      title: SignOutRequestBody
      type: object
    iSignOutSuccessResponse:
      additionalProperties: false
      title: iSignOutSuccessResponse
      type: object
    GetBrowseCollectionsRouteRequestBody:
      additionalProperties: false
      title: GetBrowseCollectionsRouteRequestBody
      type: object
    iGetBrowseCollectionsRouteSuccessResponse:
      properties:
        collections:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesCollection'
              title: '[]'
            title: '[]'
            type: array
          title: iGetBrowseCollectionsRouteSuccessResponse.collections
          type: object
        addressLists:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesAddressList'
              title: '[]'
            title: '[]'
            type: array
          title: iGetBrowseCollectionsRouteSuccessResponse.addressLists
          type: object
        profiles:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesUserInfo'
              title: '[]'
            title: '[]'
            type: array
          title: iGetBrowseCollectionsRouteSuccessResponse.profiles
          type: object
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
            title: iGetBrowseCollectionsRouteSuccessResponse.activity.[]
          title: iGetBrowseCollectionsRouteSuccessResponse.activity
          type: array
        badges:
          additionalProperties:
            items:
              properties:
                collection:
                  $ref: '#/components/schemas/iBitBadgesCollection'
                  title: '[].collection'
                badgeIds:
                  items:
                    $ref: '#/components/schemas/iUintRange'
                    title: '[].badgeIds.[]'
                  title: '[].badgeIds'
                  type: array
              required:
                - collection
                - badgeIds
              additionalProperties: false
              title: '[]'
              type: object
            title: '[]'
            type: array
          title: iGetBrowseCollectionsRouteSuccessResponse.badges
          type: object
      required:
        - collections
        - addressLists
        - profiles
        - activity
        - badges
      additionalProperties: false
      title: iGetBrowseCollectionsRouteSuccessResponse
      type: object
    BroadcastTxRouteRequestBody:
      title: BroadcastTxRouteRequestBody
    iBroadcastTxRouteSuccessResponse:
      properties:
        tx_response:
          properties:
            code:
              title: iBroadcastTxRouteSuccessResponse.tx_response.code
              type: number
            codespace:
              title: iBroadcastTxRouteSuccessResponse.tx_response.codespace
              type: string
            data:
              title: iBroadcastTxRouteSuccessResponse.tx_response.data
              type: string
            events:
              items:
                properties:
                  type:
                    title: >-
                      iBroadcastTxRouteSuccessResponse.tx_response.events.[].type
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          title: >-
                            iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[].key
                          type: string
                        value:
                          title: >-
                            iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[].value
                          type: string
                        index:
                          title: >-
                            iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[].index
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      title: >-
                        iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[]
                      type: object
                    title: >-
                      iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                title: iBroadcastTxRouteSuccessResponse.tx_response.events.[]
                type: object
              title: iBroadcastTxRouteSuccessResponse.tx_response.events
              type: array
            gas_wanted:
              title: iBroadcastTxRouteSuccessResponse.tx_response.gas_wanted
              type: string
            gas_used:
              title: iBroadcastTxRouteSuccessResponse.tx_response.gas_used
              type: string
            height:
              title: iBroadcastTxRouteSuccessResponse.tx_response.height
              type: string
            Doc:
              title: iBroadcastTxRouteSuccessResponse.tx_response.Doc
              type: string
            logs:
              items:
                properties:
                  events:
                    items:
                      properties:
                        type:
                          title: >-
                            iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].type
                          type: string
                        attributes:
                          items:
                            properties:
                              key:
                                title: >-
                                  iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[].key
                                type: string
                              value:
                                title: >-
                                  iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[].value
                                type: string
                              index:
                                title: >-
                                  iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[].index
                                type: boolean
                            required:
                              - key
                              - value
                              - index
                            additionalProperties: false
                            title: >-
                              iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[]
                            type: object
                          title: >-
                            iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes
                          type: array
                      required:
                        - type
                        - attributes
                      additionalProperties: false
                      title: >-
                        iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[]
                      type: object
                    title: >-
                      iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events
                    type: array
                required:
                  - events
                additionalProperties: false
                title: iBroadcastTxRouteSuccessResponse.tx_response.logs.[]
                type: object
              title: iBroadcastTxRouteSuccessResponse.tx_response.logs
              type: array
            raw_log:
              title: iBroadcastTxRouteSuccessResponse.tx_response.raw_log
              type: string
            timestamp:
              title: iBroadcastTxRouteSuccessResponse.tx_response.timestamp
              type: string
            tx:
              title: iBroadcastTxRouteSuccessResponse.tx_response.tx
              nullable: true
              type: object
            txhash:
              title: iBroadcastTxRouteSuccessResponse.tx_response.txhash
              type: string
          required:
            - code
            - codespace
            - data
            - events
            - gas_wanted
            - gas_used
            - height
            - Doc
            - logs
            - raw_log
            - timestamp
            - tx
            - txhash
          additionalProperties: false
          title: iBroadcastTxRouteSuccessResponse.tx_response
          description: |-
            The response from the blockchain for the broadcasted tx.
            See Cosmos SDK documentation for what each field means.
          type: object
      required:
        - tx_response
      additionalProperties: false
      title: iBroadcastTxRouteSuccessResponse
      type: object
    SimulateTxRouteRequestBody:
      title: SimulateTxRouteRequestBody
    iSimulateTxRouteSuccessResponse:
      properties:
        gas_info:
          properties:
            gas_used:
              title: iSimulateTxRouteSuccessResponse.gas_info.gas_used
              type: string
            gas_wanted:
              title: iSimulateTxRouteSuccessResponse.gas_info.gas_wanted
              type: string
          required:
            - gas_used
            - gas_wanted
          additionalProperties: false
          title: iSimulateTxRouteSuccessResponse.gas_info
          description: How much gas was used in the simulation.
          type: object
        result:
          properties:
            data:
              title: iSimulateTxRouteSuccessResponse.result.data
              type: string
            log:
              title: iSimulateTxRouteSuccessResponse.result.log
              type: string
            events:
              items:
                properties:
                  type:
                    title: iSimulateTxRouteSuccessResponse.result.events.[].type
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          title: >-
                            iSimulateTxRouteSuccessResponse.result.events.[].attributes.[].key
                          type: string
                        value:
                          title: >-
                            iSimulateTxRouteSuccessResponse.result.events.[].attributes.[].value
                          type: string
                        index:
                          title: >-
                            iSimulateTxRouteSuccessResponse.result.events.[].attributes.[].index
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      title: >-
                        iSimulateTxRouteSuccessResponse.result.events.[].attributes.[]
                      type: object
                    title: >-
                      iSimulateTxRouteSuccessResponse.result.events.[].attributes
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                title: iSimulateTxRouteSuccessResponse.result.events.[]
                type: object
              title: iSimulateTxRouteSuccessResponse.result.events
              type: array
          required:
            - data
            - log
            - events
          additionalProperties: false
          title: iSimulateTxRouteSuccessResponse.result
          description: The result of the simulation.
          type: object
      required:
        - gas_info
        - result
      additionalProperties: false
      title: iSimulateTxRouteSuccessResponse
      type: object
    FetchMetadataDirectlyRouteRequestBody:
      properties:
        uris:
          items:
            title: FetchMetadataDirectlyRouteRequestBody.uris.[]
            type: string
          title: FetchMetadataDirectlyRouteRequestBody.uris
          type: array
      required:
        - uris
      additionalProperties: false
      title: FetchMetadataDirectlyRouteRequestBody
      type: object
    iFetchMetadataDirectlyRouteSuccessResponse:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/iMetadata'
            title: iFetchMetadataDirectlyRouteSuccessResponse.metadata.[]
          title: iFetchMetadataDirectlyRouteSuccessResponse.metadata
          type: array
      required:
        - metadata
      additionalProperties: false
      title: iFetchMetadataDirectlyRouteSuccessResponse
      type: object
    GetTokensFromFaucetRouteRequestBody:
      additionalProperties: false
      title: GetTokensFromFaucetRouteRequestBody
      type: object
    iGetTokensFromFaucetRouteSuccessResponse:
      title: iGetTokensFromFaucetRouteSuccessResponse
    SendClaimAlertsRouteRequestBody:
      properties:
        claimAlerts:
          items:
            properties:
              collectionId:
                title: SendClaimAlertsRouteRequestBody.claimAlerts.[].collectionId
                $ref: '#components/schemas/NumberType'
              message:
                title: SendClaimAlertsRouteRequestBody.claimAlerts.[].message
                type: string
              recipientAddress:
                title: >-
                  SendClaimAlertsRouteRequestBody.claimAlerts.[].recipientAddress
                type: string
            required:
              - collectionId
              - recipientAddress
            additionalProperties: false
            title: SendClaimAlertsRouteRequestBody.claimAlerts.[]
            type: object
          title: SendClaimAlertsRouteRequestBody.claimAlerts
          type: array
      required:
        - claimAlerts
      additionalProperties: false
      title: SendClaimAlertsRouteRequestBody
      type: object
    iSendClaimAlertsRouteSuccessResponse:
      additionalProperties: false
      title: iSendClaimAlertsRouteSuccessResponse
      type: object
    CosmosAccountResponse:
      properties:
        account_number:
          title: CosmosAccountResponse.account_number
          type: number
        sequence:
          title: CosmosAccountResponse.sequence
          type: number
        pub_key:
          properties:
            key:
              title: CosmosAccountResponse.pub_key.key
              type: string
          required:
            - key
          additionalProperties: false
          title: CosmosAccountResponse.pub_key
          type: object
        address:
          title: CosmosAccountResponse.address
          type: string
      required:
        - account_number
        - sequence
        - pub_key
        - address
      additionalProperties: false
      title: CosmosAccountResponse
      type: object
    GenericBlockinVerifyRouteRequestBody:
      properties:
        message:
          title: VerifySignInRouteRequestBody.message
          description: The original Blockin message
          type: string
        signature:
          title: VerifySignInRouteRequestBody.signature
          description: The signature of the Blockin message
          type: string
        publicKey:
          title: VerifySignInRouteRequestBody.publicKey
          description: Required for some chains. The public key of the signer.
          type: string
        options:
          title: GenericBlockinVerifyRouteRequestBody.options
          description: Additional options for verifying the challenge.
      required:
        - message
        - signature
      additionalProperties: false
      title: GenericBlockinVerifyRouteRequestBody, VerifySignInRouteRequestBody
      description: >-
        Generic route to verify any Blockin request. Does not sign you in with
        the API. Used for custom Blockin integrations.
      type: object
    iGenericBlockinVerifyRouteSuccessResponse:
      additionalProperties: false
      title: >-
        iGenericBlockinVerifyRouteSuccessResponse,
        iVerifySignInRouteSuccessResponse
      type: object
    CreateBlockinAuthCodeRouteRequestBody:
      properties:
        name:
          title: CreateBlockinAuthCodeRouteRequestBody.name
          type: string
        description:
          title: CreateBlockinAuthCodeRouteRequestBody.description
          type: string
        image:
          title: CreateBlockinAuthCodeRouteRequestBody.image
          type: string
        message:
          title: CreateBlockinAuthCodeRouteRequestBody.message
          type: string
        signature:
          title: CreateBlockinAuthCodeRouteRequestBody.signature
          type: string
        publicKey:
          title: CreateBlockinAuthCodeRouteRequestBody.publicKey
          type: string
      required:
        - name
        - description
        - image
        - message
        - signature
      additionalProperties: false
      title: CreateBlockinAuthCodeRouteRequestBody
      type: object
    iCreateBlockinAuthCodeRouteSuccessResponse:
      additionalProperties: false
      title: iCreateBlockinAuthCodeRouteSuccessResponse
      type: object
    GetBlockinAuthCodeRouteRequestBody:
      properties:
        signature:
          title: GetBlockinAuthCodeRouteRequestBody.signature
          type: string
        options:
          title: GetBlockinAuthCodeRouteRequestBody.options
      required:
        - signature
      additionalProperties: false
      title: GetBlockinAuthCodeRouteRequestBody
      type: object
    iGetBlockinAuthCodeRouteSuccessResponse:
      properties:
        message:
          title: iGetBlockinAuthCodeRouteSuccessResponse.message
          description: The corresponding message that was signed to obtain the signature.
          type: string
        params:
          title: iGetBlockinAuthCodeRouteSuccessResponse.params
          description: The converted Blockin params fort the message
          $ref: '#/components/schemas/BlockinChallengeParams'
        verificationResponse:
          properties:
            success:
              title: >-
                iGetBlockinAuthCodeRouteSuccessResponse.verificationResponse.success
              description: >-
                Returns whether the current (message, signature) pair is valid
                and verified (i.e. signature is valid and any assets are owned).
              type: boolean
            errorMessage:
              title: >-
                iGetBlockinAuthCodeRouteSuccessResponse.verificationResponse.errorMessage
              description: Returns the response message returned from Blockin verification.
              type: string
          required:
            - success
          additionalProperties: false
          title: iGetBlockinAuthCodeRouteSuccessResponse.verificationResponse
          description: Verification response
          type: object
      required:
        - message
        - params
        - verificationResponse
      additionalProperties: false
      title: iGetBlockinAuthCodeRouteSuccessResponse
      type: object
    DeleteBlockinAuthCodeRouteRequestBody:
      properties:
        signature:
          title: DeleteBlockinAuthCodeRouteRequestBody.signature
          type: string
      required:
        - signature
      additionalProperties: false
      title: DeleteBlockinAuthCodeRouteRequestBody
      type: object
    iDeleteBlockinAuthCodeRouteSuccessResponse:
      additionalProperties: false
      title: iDeleteBlockinAuthCodeRouteSuccessResponse
      type: object
    GenerateAppleWalletPassRouteRequestBody:
      properties:
        name:
          title: GenerateAppleWalletPassRouteRequestBody.name
          type: string
        description:
          title: GenerateAppleWalletPassRouteRequestBody.description
          type: string
        message:
          title: GenerateAppleWalletPassRouteRequestBody.message
          type: string
        signature:
          title: GenerateAppleWalletPassRouteRequestBody.signature
          type: string
      required:
        - name
        - description
        - message
        - signature
      additionalProperties: false
      title: GenerateAppleWalletPassRouteRequestBody
      type: object
    iGenerateAppleWalletPassRouteSuccessResponse:
      properties:
        type:
          title: iGenerateAppleWalletPassRouteSuccessResponse.type
          type: string
        data:
          title: iGenerateAppleWalletPassRouteSuccessResponse.data
          type: string
      required:
        - type
        - data
      additionalProperties: false
      title: iGenerateAppleWalletPassRouteSuccessResponse
      type: object
    GetClaimAlertsForCollectionRouteRequestBody:
      properties:
        collectionId:
          title: GetClaimAlertsForCollectionRouteRequestBody.collectionId
          $ref: '#components/schemas/NumberType'
        bookmark:
          title: GetClaimAlertsForCollectionRouteRequestBody.bookmark
          type: string
      required:
        - collectionId
        - bookmark
      additionalProperties: false
      title: GetClaimAlertsForCollectionRouteRequestBody
      type: object
    iGetClaimAlertsForCollectionRouteSuccessResponse:
      properties:
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
            title: iGetClaimAlertsForCollectionRouteSuccessResponse.claimAlerts.[]
          title: iGetClaimAlertsForCollectionRouteSuccessResponse.claimAlerts
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
          title: iGetClaimAlertsForCollectionRouteSuccessResponse.pagination
      required:
        - claimAlerts
        - pagination
      additionalProperties: false
      title: iGetClaimAlertsForCollectionRouteSuccessResponse
      type: object
    iOffChainBalancesMap:
      additionalProperties:
        items:
          $ref: '#/components/schemas/iBalance'
          title: '[]'
        title: '[]'
        type: array
      title: iOffChainBalancesMap
      type: object
    iTransferWithIncrements:
      properties:
        from:
          title: iTransfer.from
          description: The address to transfer from.
          type: string
        toAddresses:
          items:
            title: iTransfer.toAddresses.[]
            type: string
          title: iTransfer.toAddresses
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iTransfer.balances.[]
          title: iTransfer.balances
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          title: iTransfer.precalculateBalancesFromApproval
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
            title: iTransfer.merkleProofs.[]
          title: iTransfer.merkleProofs
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          title: iTransfer.memo
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
            title: iTransfer.prioritizedApprovals.[]
          title: iTransfer.prioritizedApprovals
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedApprovals:
          title: iTransfer.onlyCheckPrioritizedApprovals
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.
          type: boolean
        toAddressesLength:
          title: iTransferWithIncrements.toAddressesLength
          description: >-
            The number of addresses to send the badges to. This takes priority
            over toAddresses.length (used when you don't know exact addresses
            (i.e. you know number of codes)).
          $ref: '#components/schemas/NumberType'
        incrementBadgeIdsBy:
          title: iTransferWithIncrements.incrementBadgeIdsBy
          description: The number to increment the badgeIDs by for each transfer.
          $ref: '#components/schemas/NumberType'
        incrementOwnershipTimesBy:
          title: iTransferWithIncrements.incrementOwnershipTimesBy
          description: The number to increment the ownershipTimes by for each transfer.
          $ref: '#components/schemas/NumberType'
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      title: iTransferWithIncrements, iTransfer
      type: object
    iBatchBadgeDetails:
      properties:
        collectionId:
          title: iBatchBadgeDetails.collectionId
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBatchBadgeDetails.badgeIds.[]
          title: iBatchBadgeDetails.badgeIds
          type: array
      required:
        - collectionId
        - badgeIds
      additionalProperties: false
      title: iBatchBadgeDetails
      type: object
    LeavesDetails:
      properties:
        leaves:
          items:
            title: LeavesDetails.leaves.[]
            type: string
          title: LeavesDetails.leaves
          type: array
        isHashed:
          title: LeavesDetails.isHashed
          type: boolean
        preimages:
          items:
            title: LeavesDetails.preimages.[]
            type: string
          title: LeavesDetails.preimages
          type: array
        seedCode:
          title: LeavesDetails.seedCode
          type: string
      required:
        - leaves
        - isHashed
      additionalProperties: false
      title: LeavesDetails
      description: >-
        LeavesDetails represents details about the leaves of a claims tree.

        This is used as helpers for storing leaves and for UI purposes.


        This is used to check if an entered claim value is valid. If the leaves
        are hashed, then the value entered by the user will be hashed before
        being checked against the provided leaf values.

        If the leaves are not hashed, then the value entered by the user will be
        checked directly against the provided leaf values.


        IMPORTANT: The leaf values here are to be publicly stored on IPFS, so
        they should not contain any sensitive information (i.e. codes,
        passwords, etc.)

        Only use this with the non-hashed option when the values do not contain
        any sensitive information (i.e. a public whitelist of addresses).
    iChallengeDetails:
      properties:
        leavesDetails:
          $ref: '#/components/schemas/LeavesDetails'
          title: iChallengeDetails.leavesDetails
          description: The leaves of the Merkle tree with accompanying details
        tree:
          title: iChallengeDetails.tree
          description: The Merkle tree
        treeOptions:
          title: iChallengeDetails.treeOptions
          description: The Merkle tree options for how to build it
        numLeaves:
          title: iChallengeDetails.numLeaves
          description: >-
            The number of leaves in the Merkle tree. This takes priority over
            leaves.length if defined (used for buffer time between leaf
            generation and leaf length select)
          $ref: '#components/schemas/NumberType'
        currCode:
          title: iChallengeDetails.currCode
          description: >-
            The current code being used for the challenge. Used behind the
            scenes
          $ref: '#components/schemas/NumberType'
      required:
        - leavesDetails
      additionalProperties: false
      title: iChallengeDetails
      type: object
    iApprovalInfoDetails:
      properties:
        name:
          title: iApprovalInfoDetails.name
          description: The name of the claim
          type: string
        description:
          title: iApprovalInfoDetails.description
          description: >-
            The description of the claim. This describes how to earn and claim
            the badge.
          type: string
        challengeDetails:
          $ref: '#/components/schemas/iChallengeDetails'
          title: iApprovalInfoDetails.challengeDetails
          description: The challenge details of the claim / approval
        offChainClaims:
          items:
            properties:
              plugins:
                items: {}
                title: iApprovalInfoDetails.offChainClaims.[].plugins
                description: The plugins of the claim / approval
                type: array
              claimId:
                title: iApprovalInfoDetails.offChainClaims.[].claimId
                type: string
              manualDistribution:
                title: iApprovalInfoDetails.offChainClaims.[].manualDistribution
                type: boolean
            required:
              - plugins
              - claimId
            additionalProperties: false
            title: iApprovalInfoDetails.offChainClaims.[]
            type: object
          title: iApprovalInfoDetails.offChainClaims
          type: array
      required:
        - name
        - description
      additionalProperties: false
      title: iApprovalInfoDetails
      type: object
    iCosmosCoin:
      properties:
        amount:
          title: iCosmosCoin.amount
          description: The amount of the coin.
          $ref: '#components/schemas/NumberType'
        denom:
          title: iCosmosCoin.denom
          description: The denomination of the coin.
          type: string
      required:
        - amount
        - denom
      additionalProperties: false
      title: iCosmosCoin
      type: object
    EIP712Type:
      properties:
        name:
          title: EIP712Type.name
          type: string
        type:
          title: EIP712Type.type
          type: string
      required:
        - name
        - type
      additionalProperties: false
      title: EIP712Type
      type: object
    JSONObject:
      additionalProperties: {}
      title: JSONObject
      type: object
    FlattenPayloadResponse:
      properties:
        payload:
          $ref: '#/components/schemas/JSONObject'
          title: FlattenPayloadResponse.payload
        numMessages:
          title: FlattenPayloadResponse.numMessages
          type: number
      required:
        - payload
        - numMessages
      additionalProperties: false
      title: FlattenPayloadResponse
      type: object
    TxContext:
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
          title: TxContext.chain
        sender:
          $ref: '#/components/schemas/Sender'
          title: TxContext.sender
        fee:
          $ref: '#/components/schemas/Fee'
          title: TxContext.fee
        memo:
          title: TxContext.memo
          type: string
      required:
        - chain
        - sender
        - fee
        - memo
      additionalProperties: false
      title: TxContext
      description: |-
        TxContext is the transaction context for a SignDoc that is independent
        from the transaction payload.
      type: object
    EIP712TypedData:
      properties:
        types:
          title: EIP712TypedData.types
          type: object
        message:
          anyOf:
            - title: EIP712TypedData.message
              type: object
            - items:
                title: EIP712TypedData.message.[]
                type: object
              title: EIP712TypedData.message.[]
              type: array
          title: EIP712TypedData.message
        domain:
          title: EIP712TypedData.domain
          type: object
        primaryType:
          title: EIP712TypedData.primaryType
          type: string
      required:
        - types
        - message
        - domain
        - primaryType
      additionalProperties: false
      title: EIP712TypedData
      description: |-
        EIP712TypedData represents a signable EIP-712 typed data object,
        including both the types and message object.
        @remarks See the EIP-712 specification for more:
         ://eips.ethereum.org/EIPS/eip-712
      type: object
    EIP712ToSign:
      properties:
        types:
          title: EIP712ToSign.types
          type: object
        primaryType:
          title: EIP712ToSign.primaryType
          type: string
        domain:
          properties:
            name:
              title: EIP712ToSign.domain.name
              type: string
            version:
              title: EIP712ToSign.domain.version
              type: string
            chainId:
              title: EIP712ToSign.domain.chainId
              type: number
            verifyingContract:
              title: EIP712ToSign.domain.verifyingContract
              type: string
            salt:
              title: EIP712ToSign.domain.salt
              type: string
          required:
            - name
            - version
            - chainId
            - verifyingContract
            - salt
          additionalProperties: false
          title: EIP712ToSign.domain
          type: object
        message:
          title: EIP712ToSign.message
          type: object
      required:
        - types
        - primaryType
        - domain
        - message
      additionalProperties: false
      title: EIP712ToSign
      description: >-
        EI712ToSign represents a signable EIP-712 payload that can be signed
        using MetaMask or Keplr.

        @remarks Evmos uses the EIP-712 protocol to wrap Cosmos SDK Transactions
        for Ethereum signing clients.

        EIP-712 payload signatures can be used interchangeably with standard
        Cosmos SDK signatures.

        Learn more about the  ://eips.ethereum.org/EIPS/eip-712 | EIP-712
        Standard

      type: object
    Fee:
      properties:
        amount:
          title: Fee.amount
          type: string
        denom:
          title: Fee.denom
          type: string
        gas:
          title: Fee.gas
          type: string
      required:
        - amount
        - denom
        - gas
      additionalProperties: false
      title: Fee
      description: >-
        Fee represents a Cosmos SDK transaction fee object.

        @remarks Learn more about fees in Evmos from the
         ://docs.cosmos.network/main/basics/gas-fees | Cosmos SDK Fee Docs 
        and the  ://docs.evmos.org/protocol/concepts/gas-and-fees | Evmos Gas
        and Fee Docs

      type: object
    Sender:
      properties:
        accountAddress:
          title: Sender.accountAddress
          type: string
        sequence:
          title: Sender.sequence
          type: number
        accountNumber:
          title: Sender.accountNumber
          type: number
        pubkey:
          title: Sender.pubkey
          type: string
      required:
        - accountAddress
        - sequence
        - accountNumber
        - pubkey
      additionalProperties: false
      title: Sender
      description: >-
        Sender represents a Cosmos SDK Transaction signer.

        @remarks A sender object is used to populate the Cosmos SDK's SignerInfo
        field,

        which is used to declare transaction signers.

      type: object
    Chain:
      properties:
        chainId:
          title: Chain.chainId
          type: number
        cosmosChainId:
          title: Chain.cosmosChainId
          type: string
        chain:
          title: Chain.chain
      required:
        - chainId
        - cosmosChainId
        - chain
      additionalProperties: false
      title: Chain
      description: >-
        Chain represents the base chain's chainID.

        @remarks chainId corresponds to a numerical Ethereum ChainID (e.g. 9001)

        cosmosChainId corresponds to a Cosmos SDK string ChainID (e.g.
        'evmos_9001-2'

      type: object
    iUserPermissions:
      properties:
        canUpdateOutgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApprovalPermission'
            title: iUserPermissions.canUpdateOutgoingApprovals.[]
          title: iUserPermissions.canUpdateOutgoingApprovals
          description: The list of permissions for updating approved outgoing transfers.
          type: array
        canUpdateIncomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApprovalPermission'
            title: iUserPermissions.canUpdateIncomingApprovals.[]
          title: iUserPermissions.canUpdateIncomingApprovals
          description: The list of permissions for updating approved incoming transfers.
          type: array
        canUpdateAutoApproveSelfInitiatedOutgoingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
            title: >-
              iUserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers.[]
          title: iUserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers
          description: >-
            The permissions for updating auto-approving self-initiated outgoing
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all outgoing transfers that are
            self-initiated.
          type: array
        canUpdateAutoApproveSelfInitiatedIncomingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
            title: >-
              iUserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers.[]
          title: iUserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers
          description: >-
            The permissions for updating auto-approving self-initiated incoming
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all incoming transfers that are
            self-initiated.
          type: array
      required:
        - canUpdateOutgoingApprovals
        - canUpdateIncomingApprovals
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      title: iUserPermissions
      type: object
    iUserOutgoingApprovalPermission:
      properties:
        toListId:
          title: iUserOutgoingApprovalPermission.toListId
          description: The list ID of the to addresses of the approved outgoing transfers.
          type: string
        initiatedByListId:
          title: iUserOutgoingApprovalPermission.initiatedByListId
          description: >-
            The list ID of the initiatedBy addresses of the approved outgoing
            transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApprovalPermission.transferTimes.[]
          title: iUserOutgoingApprovalPermission.transferTimes
          description: The transfer times of the approved outgoing transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApprovalPermission.badgeIds.[]
          title: iUserOutgoingApprovalPermission.badgeIds
          description: The badge IDs of the approved outgoing transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApprovalPermission.ownershipTimes.[]
          title: iUserOutgoingApprovalPermission.ownershipTimes
          description: The owned times of the approved outgoing transfers.
          type: array
        approvalId:
          title: iUserOutgoingApprovalPermission.approvalId
          description: >-
            The approval ID of the approved outgoing transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          title: iUserOutgoingApprovalPermission.amountTrackerId
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          title: iUserOutgoingApprovalPermission.challengeTrackerId
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApprovalPermission.permanentlyPermittedTimes.[]
          title: iUserOutgoingApprovalPermission.permanentlyPermittedTimes
          description: The permitted times of the approved outgoing transfers.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApprovalPermission.permanentlyForbiddenTimes.[]
          title: iUserOutgoingApprovalPermission.permanentlyForbiddenTimes
          description: The forbidden times of the approved outgoing transfers.
          type: array
        toList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserOutgoingApprovalPermission.toList
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserOutgoingApprovalPermission.initiatedByList
      required:
        - toListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
        - toList
        - initiatedByList
      additionalProperties: false
      title: iUserOutgoingApprovalPermission
      type: object
    iUserIncomingApprovalPermission:
      properties:
        fromListId:
          title: iUserIncomingApprovalPermission.fromListId
          description: >-
            The list ID of the from addresses of the approved incoming
            transfers.
          type: string
        initiatedByListId:
          title: iUserIncomingApprovalPermission.initiatedByListId
          description: >-
            The list ID of the initiatedBy addresses of the approved incoming
            transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApprovalPermission.transferTimes.[]
          title: iUserIncomingApprovalPermission.transferTimes
          description: The transfer times of the approved incoming transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApprovalPermission.badgeIds.[]
          title: iUserIncomingApprovalPermission.badgeIds
          description: The badge IDs of the approved incoming transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApprovalPermission.ownershipTimes.[]
          title: iUserIncomingApprovalPermission.ownershipTimes
          description: The owned times of the approved incoming transfers.
          type: array
        approvalId:
          title: iUserIncomingApprovalPermission.approvalId
          description: >-
            The approval ID of the approved incoming transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          title: iUserIncomingApprovalPermission.amountTrackerId
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          title: iUserIncomingApprovalPermission.challengeTrackerId
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApprovalPermission.permanentlyPermittedTimes.[]
          title: iUserIncomingApprovalPermission.permanentlyPermittedTimes
          description: The permitted times of the approved incoming transfers.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApprovalPermission.permanentlyForbiddenTimes.[]
          title: iUserIncomingApprovalPermission.permanentlyForbiddenTimes
          description: The forbidden times of the approved incoming transfers.
          type: array
        fromList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserIncomingApprovalPermission.fromList
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserIncomingApprovalPermission.initiatedByList
      required:
        - fromListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
        - fromList
        - initiatedByList
      additionalProperties: false
      title: iUserIncomingApprovalPermission
      type: object
    iCollectionPermissions:
      properties:
        canDeleteCollection:
          items:
            $ref: '#/components/schemas/iActionPermission'
            title: iCollectionPermissions.canDeleteCollection.[]
          title: iCollectionPermissions.canDeleteCollection
          description: The permissions for deleting the collection.
          type: array
        canArchiveCollection:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canArchiveCollection.[]
          title: iCollectionPermissions.canArchiveCollection
          description: The permissions for archiving the collection.
          type: array
        canUpdateOffChainBalancesMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateOffChainBalancesMetadata.[]
          title: iCollectionPermissions.canUpdateOffChainBalancesMetadata
          description: The permissions for updating the off-chain balances metadata.
          type: array
        canUpdateStandards:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateStandards.[]
          title: iCollectionPermissions.canUpdateStandards
          description: The permissions for updating the standards.
          type: array
        canUpdateCustomData:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateCustomData.[]
          title: iCollectionPermissions.canUpdateCustomData
          description: The permissions for updating the custom data.
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateManager.[]
          title: iCollectionPermissions.canUpdateManager
          description: The permissions for updating the manager.
          type: array
        canUpdateCollectionMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateCollectionMetadata.[]
          title: iCollectionPermissions.canUpdateCollectionMetadata
          description: The permissions for updating the collection metadata.
          type: array
        canCreateMoreBadges:
          items:
            $ref: '#/components/schemas/iBalancesActionPermission'
            title: iCollectionPermissions.canCreateMoreBadges.[]
          title: iCollectionPermissions.canCreateMoreBadges
          description: The permissions for creating more badges.
          type: array
        canUpdateBadgeMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
            title: iCollectionPermissions.canUpdateBadgeMetadata.[]
          title: iCollectionPermissions.canUpdateBadgeMetadata
          description: The permissions for updating the badge metadata.
          type: array
        canUpdateCollectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApprovalPermission'
            title: iCollectionPermissions.canUpdateCollectionApprovals.[]
          title: iCollectionPermissions.canUpdateCollectionApprovals
          description: The permissions for updating the collection approved transfers.
          type: array
      required:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateBadgeMetadata
        - canUpdateCollectionApprovals
      additionalProperties: false
      title: iCollectionPermissions
      type: object
    iActionPermission:
      properties:
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iActionPermission.permanentlyPermittedTimes.[]
          title: iActionPermission.permanentlyPermittedTimes
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iActionPermission.permanentlyForbiddenTimes.[]
          title: iActionPermission.permanentlyForbiddenTimes
          description: The forbidden times of the permission.
          type: array
      required:
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      title: iActionPermission
      type: object
    iTimedUpdatePermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimedUpdatePermission.timelineTimes.[]
          title: iTimedUpdatePermission.timelineTimes
          description: The timeline times that the permission applies to.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimedUpdatePermission.permanentlyPermittedTimes.[]
          title: iTimedUpdatePermission.permanentlyPermittedTimes
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimedUpdatePermission.permanentlyForbiddenTimes.[]
          title: iTimedUpdatePermission.permanentlyForbiddenTimes
          description: The forbidden times of the permission.
          type: array
      required:
        - timelineTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      title: iTimedUpdatePermission
      type: object
    iBalancesActionPermission:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBalancesActionPermission.badgeIds.[]
          title: iBalancesActionPermission.badgeIds
          description: The badge IDs that the permission applies to.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBalancesActionPermission.ownershipTimes.[]
          title: iBalancesActionPermission.ownershipTimes
          description: The owned times of the permission.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBalancesActionPermission.permanentlyPermittedTimes.[]
          title: iBalancesActionPermission.permanentlyPermittedTimes
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBalancesActionPermission.permanentlyForbiddenTimes.[]
          title: iBalancesActionPermission.permanentlyForbiddenTimes
          description: The forbidden times of the permission.
          type: array
      required:
        - badgeIds
        - ownershipTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      title: iBalancesActionPermission
      type: object
    iTimedUpdateWithBadgeIdsPermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimedUpdateWithBadgeIdsPermission.timelineTimes.[]
          title: iTimedUpdateWithBadgeIdsPermission.timelineTimes
          description: The timeline times that the permission applies to.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimedUpdateWithBadgeIdsPermission.badgeIds.[]
          title: iTimedUpdateWithBadgeIdsPermission.badgeIds
          description: The badge IDs that the permission applies to.
          type: array
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes.[]
          title: iTimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes
          description: The permitted times of the permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes.[]
          title: iTimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes
          description: The forbidden times of the permission.
          type: array
      required:
        - timelineTimes
        - badgeIds
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      title: iTimedUpdateWithBadgeIdsPermission
      type: object
    iCollectionApprovalPermission:
      properties:
        fromListId:
          title: iCollectionApprovalPermission.fromListId
          description: The list ID of the from addresses of the approved transfers.
          type: string
        toListId:
          title: iCollectionApprovalPermission.toListId
          description: The list ID of the to addresses of the approved transfers.
          type: string
        initiatedByListId:
          title: iCollectionApprovalPermission.initiatedByListId
          description: The list ID of the initiatedBy addresses of the approved transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.transferTimes.[]
          title: iCollectionApprovalPermission.transferTimes
          description: The transfer times of the approved transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.badgeIds.[]
          title: iCollectionApprovalPermission.badgeIds
          description: The badge IDs of the approved transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.ownershipTimes.[]
          title: iCollectionApprovalPermission.ownershipTimes
          description: The owned times of the approved transfers.
          type: array
        approvalId:
          title: iCollectionApprovalPermission.approvalId
          description: >-
            The approval ID of the approved transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          title: iCollectionApprovalPermission.amountTrackerId
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          title: iCollectionApprovalPermission.challengeTrackerId
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.permanentlyPermittedTimes.[]
          title: iCollectionApprovalPermission.permanentlyPermittedTimes
          description: The permitted times of this permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.permanentlyForbiddenTimes.[]
          title: iCollectionApprovalPermission.permanentlyForbiddenTimes
          description: The forbidden times of this permission.
          type: array
      required:
        - fromListId
        - toListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      title: iCollectionApprovalPermission
      type: object
    iCollectionApprovalPermissionWithDetails:
      properties:
        fromListId:
          title: iCollectionApprovalPermission.fromListId
          description: The list ID of the from addresses of the approved transfers.
          type: string
        toListId:
          title: iCollectionApprovalPermission.toListId
          description: The list ID of the to addresses of the approved transfers.
          type: string
        initiatedByListId:
          title: iCollectionApprovalPermission.initiatedByListId
          description: The list ID of the initiatedBy addresses of the approved transfers.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.transferTimes.[]
          title: iCollectionApprovalPermission.transferTimes
          description: The transfer times of the approved transfers.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.badgeIds.[]
          title: iCollectionApprovalPermission.badgeIds
          description: The badge IDs of the approved transfers.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.ownershipTimes.[]
          title: iCollectionApprovalPermission.ownershipTimes
          description: The owned times of the approved transfers.
          type: array
        approvalId:
          title: iCollectionApprovalPermission.approvalId
          description: >-
            The approval ID of the approved transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        amountTrackerId:
          title: iCollectionApprovalPermission.amountTrackerId
          description: >-
            The approval tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        challengeTrackerId:
          title: iCollectionApprovalPermission.challengeTrackerId
          description: >-
            The challenge tracker ID of the approved transfers. Can use "All" to
            represent all IDs, "!trackerId" to represent all IDs except
            trackerId, or "trackerId" to represent only trackerId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.permanentlyPermittedTimes.[]
          title: iCollectionApprovalPermission.permanentlyPermittedTimes
          description: The permitted times of this permission.
          type: array
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApprovalPermission.permanentlyForbiddenTimes.[]
          title: iCollectionApprovalPermission.permanentlyForbiddenTimes
          description: The forbidden times of this permission.
          type: array
        toList:
          $ref: '#/components/schemas/iAddressList'
          title: iCollectionApprovalPermissionWithDetails.toList
        fromList:
          $ref: '#/components/schemas/iAddressList'
          title: iCollectionApprovalPermissionWithDetails.fromList
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          title: iCollectionApprovalPermissionWithDetails.initiatedByList
      required:
        - fromListId
        - toListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
        - toList
        - fromList
        - initiatedByList
      additionalProperties: false
      title: iCollectionApprovalPermissionWithDetails, iCollectionApprovalPermission
      type: object
    iCollectionPermissionsWithDetails:
      properties:
        canDeleteCollection:
          items:
            $ref: '#/components/schemas/iActionPermission'
            title: iCollectionPermissions.canDeleteCollection.[]
          title: iCollectionPermissions.canDeleteCollection
          description: The permissions for deleting the collection.
          type: array
        canArchiveCollection:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canArchiveCollection.[]
          title: iCollectionPermissions.canArchiveCollection
          description: The permissions for archiving the collection.
          type: array
        canUpdateOffChainBalancesMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateOffChainBalancesMetadata.[]
          title: iCollectionPermissions.canUpdateOffChainBalancesMetadata
          description: The permissions for updating the off-chain balances metadata.
          type: array
        canUpdateStandards:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateStandards.[]
          title: iCollectionPermissions.canUpdateStandards
          description: The permissions for updating the standards.
          type: array
        canUpdateCustomData:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateCustomData.[]
          title: iCollectionPermissions.canUpdateCustomData
          description: The permissions for updating the custom data.
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateManager.[]
          title: iCollectionPermissions.canUpdateManager
          description: The permissions for updating the manager.
          type: array
        canUpdateCollectionMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
            title: iCollectionPermissions.canUpdateCollectionMetadata.[]
          title: iCollectionPermissions.canUpdateCollectionMetadata
          description: The permissions for updating the collection metadata.
          type: array
        canCreateMoreBadges:
          items:
            $ref: '#/components/schemas/iBalancesActionPermission'
            title: iCollectionPermissions.canCreateMoreBadges.[]
          title: iCollectionPermissions.canCreateMoreBadges
          description: The permissions for creating more badges.
          type: array
        canUpdateBadgeMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
            title: iCollectionPermissions.canUpdateBadgeMetadata.[]
          title: iCollectionPermissions.canUpdateBadgeMetadata
          description: The permissions for updating the badge metadata.
          type: array
        canUpdateCollectionApprovals:
          allOf:
            - items:
                $ref: '#/components/schemas/iCollectionApprovalPermission'
                title: iCollectionPermissions.canUpdateCollectionApprovals.[]
              title: iCollectionPermissions.canUpdateCollectionApprovals
              description: The permissions for updating the collection approved transfers.
              type: array
            - items:
                $ref: '#/components/schemas/iCollectionApprovalPermissionWithDetails'
                title: >-
                  iCollectionPermissionsWithDetails.canUpdateCollectionApprovals.[]
              title: iCollectionPermissionsWithDetails.canUpdateCollectionApprovals
              type: array
      required:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateBadgeMetadata
        - canUpdateCollectionApprovals
      additionalProperties: false
      title: iCollectionPermissionsWithDetails, iCollectionPermissions
      type: object
    iUintRange:
      properties:
        start:
          title: iUintRange.start
          description: The start of the range.
          $ref: '#components/schemas/NumberType'
        end:
          title: iUintRange.end
          description: The end of the range, inclusive.
          $ref: '#components/schemas/NumberType'
      required:
        - start
        - end
      additionalProperties: false
      title: iUintRange
      type: object
      example:
        start: '1'
        end: '10'
    iBadgeMetadata:
      properties:
        uri:
          title: iBadgeMetadata.uri
          description: The URI where to fetch the badge metadata from.
          type: string
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBadgeMetadata.badgeIds.[]
          title: iBadgeMetadata.badgeIds
          description: The badge IDs corresponding to the URI.
          type: array
        customData:
          title: iBadgeMetadata.customData
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - badgeIds
        - customData
      additionalProperties: false
      title: iBadgeMetadata
      type: object
    iCollectionMetadata:
      properties:
        uri:
          title: iCollectionMetadata.uri
          description: The URI where to fetch the collection metadata from.
          type: string
        customData:
          title: iCollectionMetadata.customData
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      title: iCollectionMetadata
      type: object
    iOffChainBalancesMetadata:
      properties:
        uri:
          title: iOffChainBalancesMetadata.uri
          description: The URI where to fetch the off-chain balances metadata from.
          type: string
        customData:
          title: iOffChainBalancesMetadata.customData
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      title: iOffChainBalancesMetadata
      type: object
    iMustOwnBadges:
      properties:
        collectionId:
          title: iMustOwnBadges.collectionId
          description: The collection ID of the badges to own.
          $ref: '#components/schemas/NumberType'
        amountRange:
          $ref: '#/components/schemas/iUintRange'
          title: iMustOwnBadges.amountRange
          description: >-
            The min/max acceptable amount of badges that must be owned (can be
            any values, including 0-0).
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iMustOwnBadges.ownershipTimes.[]
          title: iMustOwnBadges.ownershipTimes
          description: The range of the times that the badges must be owned.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iMustOwnBadges.badgeIds.[]
          title: iMustOwnBadges.badgeIds
          description: The range of the badge IDs that must be owned.
          type: array
        overrideWithCurrentTime:
          title: iMustOwnBadges.overrideWithCurrentTime
          description: Whether or not to override the ownershipTimes with the current time.
          type: boolean
        mustSatisfyForAllAssets:
          title: iMustOwnBadges.mustSatisfyForAllAssets
          description: >-
            Whether or not the user must own all the specified badges. If false,
            we will accept if they meet criteria for at least one badge.
          type: boolean
      required:
        - collectionId
        - amountRange
        - ownershipTimes
        - badgeIds
        - overrideWithCurrentTime
        - mustSatisfyForAllAssets
      additionalProperties: false
      title: iMustOwnBadges
      type: object
    iBalance:
      properties:
        amount:
          title: iBalance.amount
          description: The amount or balance of the owned badge.
          $ref: '#components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBalance.badgeIds.[]
          title: iBalance.badgeIds
          description: The badge IDs corresponding to the balance.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iBalance.ownershipTimes.[]
          title: iBalance.ownershipTimes
          description: The times that the badge is owned from.
          type: array
      required:
        - amount
        - badgeIds
        - ownershipTimes
      additionalProperties: false
      title: iBalance
      type: object
    iAddressList:
      properties:
        listId:
          title: iAddressList.listId
          description: The ID of the address list.
          type: string
        addresses:
          items:
            title: iAddressList.addresses.[]
            type: string
          title: iAddressList.addresses
          description: The addresses of the address list.
          type: array
        whitelist:
          title: iAddressList.whitelist
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          title: iAddressList.uri
          description: The URI where to fetch the address list metadata from.
          type: string
        customData:
          title: iAddressList.customData
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          title: iAddressList.createdBy
          description: The address that created the address list.
          type: string
        aliasAddress:
          title: iAddressList.aliasAddress
          description: The alias cosmos address of the address list.
          type: string
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
      additionalProperties: false
      title: iAddressList
      type: object
    iTransfer:
      properties:
        from:
          title: iTransfer.from
          description: The address to transfer from.
          type: string
        toAddresses:
          items:
            title: iTransfer.toAddresses.[]
            type: string
          title: iTransfer.toAddresses
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iTransfer.balances.[]
          title: iTransfer.balances
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          title: iTransfer.precalculateBalancesFromApproval
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
            title: iTransfer.merkleProofs.[]
          title: iTransfer.merkleProofs
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          title: iTransfer.memo
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
            title: iTransfer.prioritizedApprovals.[]
          title: iTransfer.prioritizedApprovals
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedApprovals:
          title: iTransfer.onlyCheckPrioritizedApprovals
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.
          type: boolean
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      title: iTransfer
      type: object
    iApprovalIdentifierDetails:
      properties:
        approvalId:
          title: iApprovalIdentifierDetails.approvalId
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          title: iApprovalIdentifierDetails.approvalLevel
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          title: iApprovalIdentifierDetails.approverAddress
          description: >-
            The address of the approval to check. If approvalLevel is
            "collection", this is blank "".
          type: string
      required:
        - approvalId
        - approvalLevel
        - approverAddress
      additionalProperties: false
      title: iApprovalIdentifierDetails
      type: object
    iAmountTrackerIdDetails:
      properties:
        collectionId:
          title: iAmountTrackerIdDetails.collectionId
          description: The collection ID for the approval.
          $ref: '#components/schemas/NumberType'
        amountTrackerId:
          title: iAmountTrackerIdDetails.amountTrackerId
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          title: iAmountTrackerIdDetails.approvalLevel
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
        approverAddress:
          title: iAmountTrackerIdDetails.approverAddress
          description: The address of the approval to check.
          type: string
        trackerType:
          title: iAmountTrackerIdDetails.trackerType
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          title: iAmountTrackerIdDetails.approvedAddress
          description: The address to check for the approval.
          type: string
      required:
        - collectionId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
      additionalProperties: false
      title: iAmountTrackerIdDetails
      type: object
    iMerkleChallenge:
      properties:
        root:
          title: iMerkleChallenge.root
          description: The root of the merkle tree.
          type: string
        expectedProofLength:
          title: iMerkleChallenge.expectedProofLength
          description: The expected proof length of the merkle proof.
          $ref: '#components/schemas/NumberType'
        useCreatorAddressAsLeaf:
          title: iMerkleChallenge.useCreatorAddressAsLeaf
          description: >-
            Whether or not to override any leaf value and use the creator
            address as the leaf. Used for whitelist trees.
          type: boolean
        maxUsesPerLeaf:
          title: iMerkleChallenge.maxUsesPerLeaf
          description: >-
            Whether or not to enforce max uses per leaf. Used to prevent replay
            attacks.
          $ref: '#components/schemas/NumberType'
        uri:
          title: iMerkleChallenge.uri
          description: The URI where to fetch the merkle challenge metadata from.
          type: string
        customData:
          title: iMerkleChallenge.customData
          description: Arbitrary custom data that can be stored on-chain.
          type: string
      required:
        - root
        - expectedProofLength
        - useCreatorAddressAsLeaf
        - maxUsesPerLeaf
        - uri
        - customData
      additionalProperties: false
      title: iMerkleChallenge
      type: object
    iMerklePathItem:
      properties:
        aunt:
          title: iMerklePathItem.aunt
          description: The aunt of the merkle path item.
          type: string
        onRight:
          title: iMerklePathItem.onRight
          description: Indicates whether the aunt node is on the right side of the path.
          type: boolean
      required:
        - aunt
        - onRight
      additionalProperties: false
      title: iMerklePathItem
      type: object
    iMerkleProof:
      properties:
        aunts:
          items:
            $ref: '#/components/schemas/iMerklePathItem'
            title: iMerkleProof.aunts.[]
          title: iMerkleProof.aunts
          description: The aunts of the merkle proof.
          type: array
        leaf:
          title: iMerkleProof.leaf
          description: >-
            The leaf of the merkle proof. If useCreatorAddressAsLeaf is true,
            this will be populated with the creator Cosmos address.
          type: string
      required:
        - aunts
        - leaf
      additionalProperties: false
      title: iMerkleProof
      type: object
    iTimelineItem:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
      required:
        - timelineTimes
      additionalProperties: false
      title: iTimelineItem
      type: object
    iManagerTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        manager:
          title: iManagerTimeline.manager
          description: The manager of the collection.
          type: string
      required:
        - timelineTimes
        - manager
      additionalProperties: false
      title: iManagerTimeline, iTimelineItem
      type: object
    iCollectionMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        collectionMetadata:
          $ref: '#/components/schemas/iCollectionMetadata'
          title: iCollectionMetadataTimeline.collectionMetadata
          description: The collection metadata.
      required:
        - timelineTimes
        - collectionMetadata
      additionalProperties: false
      title: iCollectionMetadataTimeline, iTimelineItem
      type: object
    iBadgeMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        badgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadata'
            title: iBadgeMetadataTimeline.badgeMetadata.[]
          title: iBadgeMetadataTimeline.badgeMetadata
          description: The badge metadata.
          type: array
      required:
        - timelineTimes
        - badgeMetadata
      additionalProperties: false
      title: iBadgeMetadataTimeline, iTimelineItem
      type: object
    iOffChainBalancesMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        offChainBalancesMetadata:
          $ref: '#/components/schemas/iOffChainBalancesMetadata'
          title: iOffChainBalancesMetadataTimeline.offChainBalancesMetadata
          description: The off-chain balances metadata.
      required:
        - timelineTimes
        - offChainBalancesMetadata
      additionalProperties: false
      title: iOffChainBalancesMetadataTimeline, iTimelineItem
      type: object
    iCustomDataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        customData:
          title: iCustomDataTimeline.customData
          description: Arbitrary custom data.
          type: string
      required:
        - timelineTimes
        - customData
      additionalProperties: false
      title: iCustomDataTimeline, iTimelineItem
      type: object
    iStandardsTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        standards:
          items:
            title: iStandardsTimeline.standards.[]
            type: string
          title: iStandardsTimeline.standards
          description: The standards.
          type: array
      required:
        - timelineTimes
        - standards
      additionalProperties: false
      title: iStandardsTimeline, iTimelineItem
      type: object
    iIsArchivedTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iTimelineItem.timelineTimes.[]
          title: iTimelineItem.timelineTimes
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
        isArchived:
          title: iIsArchivedTimeline.isArchived
          description: Whether the collection is archived.
          type: boolean
      required:
        - timelineTimes
        - isArchived
      additionalProperties: false
      title: iIsArchivedTimeline, iTimelineItem
      type: object
    iUserOutgoingApproval:
      properties:
        toListId:
          title: iUserOutgoingApproval.toListId
          type: string
        initiatedByListId:
          title: iUserOutgoingApproval.initiatedByListId
          type: string
        toList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserOutgoingApproval.toList
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserOutgoingApproval.initiatedByList
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApproval.transferTimes.[]
          title: iUserOutgoingApproval.transferTimes
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApproval.badgeIds.[]
          title: iUserOutgoingApproval.badgeIds
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserOutgoingApproval.ownershipTimes.[]
          title: iUserOutgoingApproval.ownershipTimes
          type: array
        approvalId:
          title: iUserOutgoingApproval.approvalId
          type: string
        amountTrackerId:
          title: iUserOutgoingApproval.amountTrackerId
          type: string
        challengeTrackerId:
          title: iUserOutgoingApproval.challengeTrackerId
          type: string
        uri:
          title: iUserOutgoingApproval.uri
          type: string
        customData:
          title: iUserOutgoingApproval.customData
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iOutgoingApprovalCriteria'
          title: iUserOutgoingApproval.approvalCriteria
      required:
        - toListId
        - initiatedByListId
        - toList
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
      additionalProperties: false
      title: iUserOutgoingApproval
      type: object
    iOutgoingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
            title: iOutgoingApprovalCriteria.mustOwnBadges.[]
          title: iOutgoingApprovalCriteria.mustOwnBadges
          description: The list of must own badges to be approved.
          type: array
        merkleChallenge:
          $ref: '#/components/schemas/iMerkleChallenge'
          title: iOutgoingApprovalCriteria.merkleChallenge
          description: The list of merkle challenges that need valid proofs to be approved.
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          title: iOutgoingApprovalCriteria.predeterminedBalances
          description: The predetermined balances for each transfer.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          title: iOutgoingApprovalCriteria.approvalAmounts
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          title: iOutgoingApprovalCriteria.maxNumTransfers
          description: The max num transfers for this approval.
        requireToEqualsInitiatedBy:
          title: iOutgoingApprovalCriteria.requireToEqualsInitiatedBy
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          title: iOutgoingApprovalCriteria.requireToDoesNotEqualInitiatedBy
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
      additionalProperties: false
      title: iOutgoingApprovalCriteria
      type: object
    iPredeterminedBalances:
      properties:
        manualBalances:
          items:
            $ref: '#/components/schemas/iManualBalances'
            title: iPredeterminedBalances.manualBalances.[]
          title: iPredeterminedBalances.manualBalances
          description: >-
            Manually define the balances for each transfer. Cannot be used with
            incrementedBalances. Order number corresponds to the index of the
            balance in the array.
          type: array
        incrementedBalances:
          $ref: '#/components/schemas/iIncrementedBalances'
          title: iPredeterminedBalances.incrementedBalances
          description: >-
            Define a starting balance and increment the badge IDs and owned
            times by a certain amount after each transfer. Cannot be used with
            manualBalances. Order number corresponds to number of times we
            increment.
        orderCalculationMethod:
          $ref: '#/components/schemas/iPredeterminedOrderCalculationMethod'
          title: iPredeterminedBalances.orderCalculationMethod
          description: The order calculation method.
      required:
        - manualBalances
        - incrementedBalances
        - orderCalculationMethod
      additionalProperties: false
      title: iPredeterminedBalances
      type: object
    iManualBalances:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iManualBalances.balances.[]
          title: iManualBalances.balances
          description: >-
            The list of balances for each transfer. Order number corresponds to
            the index of the balance in the array.
          type: array
      required:
        - balances
      additionalProperties: false
      title: iManualBalances
      type: object
    iIncrementedBalances:
      properties:
        startBalances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iIncrementedBalances.startBalances.[]
          title: iIncrementedBalances.startBalances
          description: >-
            The starting balances for each transfer. Order number corresponds to
            the number of times we increment.
          type: array
        incrementBadgeIdsBy:
          title: iIncrementedBalances.incrementBadgeIdsBy
          description: The amount to increment the badge IDs by after each transfer.
          $ref: '#components/schemas/NumberType'
        incrementOwnershipTimesBy:
          title: iIncrementedBalances.incrementOwnershipTimesBy
          description: The amount to increment the owned times by after each transfer.
          $ref: '#components/schemas/NumberType'
      required:
        - startBalances
        - incrementBadgeIdsBy
        - incrementOwnershipTimesBy
      additionalProperties: false
      title: iIncrementedBalances
      type: object
    iPredeterminedOrderCalculationMethod:
      properties:
        useOverallNumTransfers:
          title: iPredeterminedOrderCalculationMethod.useOverallNumTransfers
          description: >-
            Use the overall number of transfers this approval has been used with
            as the order number. Ex: If this approval has been used 2 times by
            ANY address, then the order number for the next transfer will be 3.
          type: boolean
        usePerToAddressNumTransfers:
          title: iPredeterminedOrderCalculationMethod.usePerToAddressNumTransfers
          description: >-
            Use the number of times this approval has been used by each to
            address as the order number. Ex: If this approval has been used 2
            times by to address A, then the order number for the next transfer
            by to address A will be 3.
          type: boolean
        usePerFromAddressNumTransfers:
          title: iPredeterminedOrderCalculationMethod.usePerFromAddressNumTransfers
          description: >-
            Use the number of times this approval has been used by each from
            address as the order number. Ex: If this approval has been used 2
            times by from address A, then the order number for the next transfer
            by from address A will be 3.
          type: boolean
        usePerInitiatedByAddressNumTransfers:
          title: >-
            iPredeterminedOrderCalculationMethod.usePerInitiatedByAddressNumTransfers
          description: >-
            Use the number of times this approval has been used by each
            initiated by address as the order number. Ex: If this approval has
            been used 2 times by initiated by address A, then the order number
            for the next transfer by initiated by address A will be 3.
          type: boolean
        useMerkleChallengeLeafIndex:
          title: iPredeterminedOrderCalculationMethod.useMerkleChallengeLeafIndex
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: boolean
      required:
        - useOverallNumTransfers
        - usePerToAddressNumTransfers
        - usePerFromAddressNumTransfers
        - usePerInitiatedByAddressNumTransfers
        - useMerkleChallengeLeafIndex
      additionalProperties: false
      title: iPredeterminedOrderCalculationMethod
      type: object
    iApprovalAmounts:
      properties:
        overallApprovalAmount:
          title: iApprovalAmounts.overallApprovalAmount
          description: >-
            The overall maximum amount approved for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#components/schemas/NumberType'
        perToAddressApprovalAmount:
          title: iApprovalAmounts.perToAddressApprovalAmount
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each to address. Running tally that includes all transfers from each
            unique to address that match this approval.
          $ref: '#components/schemas/NumberType'
        perFromAddressApprovalAmount:
          title: iApprovalAmounts.perFromAddressApprovalAmount
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each from address. Running tally that includes all transfers from
            each unique from address that match this approval.
          $ref: '#components/schemas/NumberType'
        perInitiatedByAddressApprovalAmount:
          title: iApprovalAmounts.perInitiatedByAddressApprovalAmount
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each initiated by address. Running tally that includes all transfers
            from each unique initiated by address that match this approval.
          $ref: '#components/schemas/NumberType'
      required:
        - overallApprovalAmount
        - perToAddressApprovalAmount
        - perFromAddressApprovalAmount
        - perInitiatedByAddressApprovalAmount
      additionalProperties: false
      title: iApprovalAmounts
      type: object
    iMaxNumTransfers:
      properties:
        overallMaxNumTransfers:
          title: iMaxNumTransfers.overallMaxNumTransfers
          description: >-
            The overall maximum number of transfers for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#components/schemas/NumberType'
        perToAddressMaxNumTransfers:
          title: iMaxNumTransfers.perToAddressMaxNumTransfers
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each to address. Running tally that includes all transfers from
            each unique to address that match this approval.
          $ref: '#components/schemas/NumberType'
        perFromAddressMaxNumTransfers:
          title: iMaxNumTransfers.perFromAddressMaxNumTransfers
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each from address. Running tally that includes all transfers
            from each unique from address that match this approval.
          $ref: '#components/schemas/NumberType'
        perInitiatedByAddressMaxNumTransfers:
          title: iMaxNumTransfers.perInitiatedByAddressMaxNumTransfers
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each initiated by address. Running tally that includes all
            transfers from each unique initiated by address that match this
            approval.
          $ref: '#components/schemas/NumberType'
      required:
        - overallMaxNumTransfers
        - perToAddressMaxNumTransfers
        - perFromAddressMaxNumTransfers
        - perInitiatedByAddressMaxNumTransfers
      additionalProperties: false
      title: iMaxNumTransfers
      type: object
    iUserIncomingApproval:
      properties:
        fromListId:
          title: iUserIncomingApproval.fromListId
          description: The list ID for the user(s) who is sending the badges.
          type: string
        initiatedByListId:
          title: iUserIncomingApproval.initiatedByListId
          description: The list ID for the user(s) who initiate the transfer.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApproval.transferTimes.[]
          title: iUserIncomingApproval.transferTimes
          description: The times of the transfer transaction.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApproval.badgeIds.[]
          title: iUserIncomingApproval.badgeIds
          description: The badge IDs to be transferred.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iUserIncomingApproval.ownershipTimes.[]
          title: iUserIncomingApproval.ownershipTimes
          description: The ownership times of the badges being transferred.
          type: array
        approvalId:
          title: iUserIncomingApproval.approvalId
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        amountTrackerId:
          title: iUserIncomingApproval.amountTrackerId
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
        challengeTrackerId:
          title: iUserIncomingApproval.challengeTrackerId
          description: >-
            The ID of the challenge tracker. This is the key used to track used
            leaves for challenges.
          type: string
        uri:
          title: iUserIncomingApproval.uri
          description: The URI of the approval.
          type: string
        customData:
          title: iUserIncomingApproval.customData
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iIncomingApprovalCriteria'
          title: iUserIncomingApproval.approvalCriteria
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
        fromList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserIncomingApproval.fromList
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          title: iUserIncomingApproval.initiatedByList
      required:
        - fromListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - fromList
        - initiatedByList
      additionalProperties: false
      title: iUserIncomingApproval
      type: object
    iIncomingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
            title: iIncomingApprovalCriteria.mustOwnBadges.[]
          title: iIncomingApprovalCriteria.mustOwnBadges
          description: The list of must own badges to be approved.
          type: array
        merkleChallenge:
          $ref: '#/components/schemas/iMerkleChallenge'
          title: iIncomingApprovalCriteria.merkleChallenge
          description: The list of merkle challenges that need valid proofs to be approved.
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          title: iIncomingApprovalCriteria.predeterminedBalances
          description: The predetermined balances for each transfer using this approval.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          title: iIncomingApprovalCriteria.approvalAmounts
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          title: iIncomingApprovalCriteria.maxNumTransfers
          description: The max num transfers for this approval.
        requireFromEqualsInitiatedBy:
          title: iIncomingApprovalCriteria.requireFromEqualsInitiatedBy
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          title: iIncomingApprovalCriteria.requireFromDoesNotEqualInitiatedBy
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
      additionalProperties: false
      title: iIncomingApprovalCriteria
      type: object
    iCollectionApproval:
      properties:
        toListId:
          title: iCollectionApproval.toListId
          description: The list ID for the user(s) who is receiving the badges.
          type: string
        fromListId:
          title: iCollectionApproval.fromListId
          description: The list ID for the user(s) who is sending the badges.
          type: string
        initiatedByListId:
          title: iCollectionApproval.initiatedByListId
          description: The list ID for the user(s) who initiate the transfer.
          type: string
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApproval.transferTimes.[]
          title: iCollectionApproval.transferTimes
          description: The times of the transfer transaction.
          type: array
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApproval.badgeIds.[]
          title: iCollectionApproval.badgeIds
          description: The badge IDs to be transferred.
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
            title: iCollectionApproval.ownershipTimes.[]
          title: iCollectionApproval.ownershipTimes
          description: The ownership times of the badges being transferred.
          type: array
        approvalId:
          title: iCollectionApproval.approvalId
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        amountTrackerId:
          title: iCollectionApproval.amountTrackerId
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
        challengeTrackerId:
          title: iCollectionApproval.challengeTrackerId
          description: >-
            The ID of the challenge tracker. This is the key used to track used
            leaves for challenges.
          type: string
        uri:
          title: iCollectionApproval.uri
          description: The URI of the approval.
          type: string
        customData:
          title: iCollectionApproval.customData
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iApprovalCriteria'
          title: iCollectionApproval.approvalCriteria
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
        details:
          $ref: '#/components/schemas/iApprovalInfoDetails'
          title: iCollectionApproval.details
        toList:
          $ref: '#/components/schemas/iAddressList'
          title: iCollectionApproval.toList
        fromList:
          $ref: '#/components/schemas/iAddressList'
          title: iCollectionApproval.fromList
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
          title: iCollectionApproval.initiatedByList
      required:
        - toListId
        - fromListId
        - initiatedByListId
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - amountTrackerId
        - challengeTrackerId
        - toList
        - fromList
        - initiatedByList
      additionalProperties: false
      title: iCollectionApproval
      type: object
    iApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
            title: iApprovalCriteria.mustOwnBadges.[]
          title: iApprovalCriteria.mustOwnBadges
          description: The list of must own badges to be approved.
          type: array
        merkleChallenge:
          $ref: '#/components/schemas/iMerkleChallenge'
          title: iApprovalCriteria.merkleChallenge
          description: The list of merkle challenges that need valid proofs to be approved.
        predeterminedBalances:
          $ref: '#/components/schemas/iPredeterminedBalances'
          title: iApprovalCriteria.predeterminedBalances
          description: The predetermined balances for each transfer.
        approvalAmounts:
          $ref: '#/components/schemas/iApprovalAmounts'
          title: iApprovalCriteria.approvalAmounts
          description: The maximum approved amounts for this approval.
        maxNumTransfers:
          $ref: '#/components/schemas/iMaxNumTransfers'
          title: iApprovalCriteria.maxNumTransfers
          description: The max num transfers for this approval.
        requireToEqualsInitiatedBy:
          title: iApprovalCriteria.requireToEqualsInitiatedBy
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireFromEqualsInitiatedBy:
          title: iApprovalCriteria.requireFromEqualsInitiatedBy
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          title: iApprovalCriteria.requireToDoesNotEqualInitiatedBy
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          title: iApprovalCriteria.requireFromDoesNotEqualInitiatedBy
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
        overridesFromOutgoingApprovals:
          title: iApprovalCriteria.overridesFromOutgoingApprovals
          description: >-
            Whether this approval overrides the from address's approved outgoing
            transfers.
          type: boolean
        overridesToIncomingApprovals:
          title: iApprovalCriteria.overridesToIncomingApprovals
          description: >-
            Whether this approval overrides the to address's approved incoming
            transfers.
          type: boolean
      additionalProperties: false
      title: iApprovalCriteria
      type: object
    iUserBalanceStore:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
            title: iUserBalanceStore.balances.[]
          title: iUserBalanceStore.balances
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
            title: iUserBalanceStore.incomingApprovals.[]
          title: iUserBalanceStore.incomingApprovals
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
            title: iUserBalanceStore.outgoingApprovals.[]
          title: iUserBalanceStore.outgoingApprovals
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          $ref: '#/components/schemas/iUserPermissions'
          title: iUserBalanceStore.userPermissions
          description: The user's permissions.
        autoApproveSelfInitiatedOutgoingTransfers:
          title: iUserBalanceStore.autoApproveSelfInitiatedOutgoingTransfers
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          title: iUserBalanceStore.autoApproveSelfInitiatedIncomingTransfers
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      title: iUserBalanceStore
      description: >-
        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.

      type: object
